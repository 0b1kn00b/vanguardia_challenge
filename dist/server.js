// Generated by Haxe 4.2.0-rc.1
(function ($hx_exports, $global) { "use strict";
$hx_exports["stx"] = $hx_exports["stx"] || {};
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
EReg.__name__ = "EReg";
EReg.prototype = {
	r: null
	,match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw haxe_Exception.thrown("EReg::matched");
		}
	}
	,matchedPos: function() {
		if(this.r.m == null) {
			throw haxe_Exception.thrown("No string matched");
		}
		return { pos : this.r.m.index, len : this.r.m[0].length};
	}
	,matchSub: function(s,pos,len) {
		if(len == null) {
			len = -1;
		}
		if(this.r.global) {
			this.r.lastIndex = pos;
			this.r.m = this.r.exec(len < 0 ? s : HxOverrides.substr(s,0,pos + len));
			var b = this.r.m != null;
			if(b) {
				this.r.s = s;
			}
			return b;
		} else {
			var b = this.match(len < 0 ? HxOverrides.substr(s,pos,null) : HxOverrides.substr(s,pos,len));
			if(b) {
				this.r.s = s;
				this.r.m.index += pos;
			}
			return b;
		}
	}
	,map: function(s,f) {
		var offset = 0;
		var buf_b = "";
		while(true) {
			if(offset >= s.length) {
				break;
			} else if(!this.matchSub(s,offset)) {
				buf_b += Std.string(HxOverrides.substr(s,offset,null));
				break;
			}
			var p = this.matchedPos();
			buf_b += Std.string(HxOverrides.substr(s,offset,p.pos - offset));
			buf_b += Std.string(f(this));
			if(p.len == 0) {
				buf_b += Std.string(HxOverrides.substr(s,p.pos,1));
				offset = p.pos + 1;
			} else {
				offset = p.pos + p.len;
			}
			if(!this.r.global) {
				break;
			}
		}
		if(!this.r.global && offset > 0 && offset < s.length) {
			buf_b += Std.string(HxOverrides.substr(s,offset,null));
		}
		return buf_b;
	}
	,__class__: EReg
};
var Express = require("express");
var ExpressWs = require("express-ws");
var HxOverrides = function() { };
HxOverrides.__name__ = "HxOverrides";
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.now = function() {
	return Date.now();
};
var Lambda = function() { };
Lambda.__name__ = "Lambda";
Lambda.array = function(it) {
	var a = [];
	var i = $getIterator(it);
	while(i.hasNext()) {
		var i1 = i.next();
		a.push(i1);
	}
	return a;
};
Lambda.list = function(it) {
	var l = new haxe_ds_List();
	var i = $getIterator(it);
	while(i.hasNext()) {
		var i1 = i.next();
		l.add(i1);
	}
	return l;
};
Lambda.map = function(it,f) {
	var l = new haxe_ds_List();
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		l.add(f(x1));
	}
	return l;
};
Lambda.mapi = function(it,f) {
	var l = new haxe_ds_List();
	var i = 0;
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		l.add(f(i++,x1));
	}
	return l;
};
Lambda.flatten = function(it) {
	var l = new haxe_ds_List();
	var e = $getIterator(it);
	while(e.hasNext()) {
		var e1 = e.next();
		var x = $getIterator(e1);
		while(x.hasNext()) {
			var x1 = x.next();
			l.add(x1);
		}
	}
	return l;
};
Lambda.flatMap = function(it,f) {
	return Lambda.flatten(Lambda.map(it,f));
};
Lambda.has = function(it,elt) {
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		if(x1 == elt) {
			return true;
		}
	}
	return false;
};
Lambda.exists = function(it,f) {
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		if(f(x1)) {
			return true;
		}
	}
	return false;
};
Lambda.foreach = function(it,f) {
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		if(!f(x1)) {
			return false;
		}
	}
	return true;
};
Lambda.iter = function(it,f) {
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		f(x1);
	}
};
Lambda.filter = function(it,f) {
	var l = new haxe_ds_List();
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		if(f(x1)) {
			l.add(x1);
		}
	}
	return l;
};
Lambda.fold = function(it,f,first) {
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		first = f(x1,first);
	}
	return first;
};
Lambda.count = function(it,pred) {
	var n = 0;
	if(pred == null) {
		var _ = $getIterator(it);
		while(_.hasNext()) {
			var _1 = _.next();
			++n;
		}
	} else {
		var x = $getIterator(it);
		while(x.hasNext()) {
			var x1 = x.next();
			if(pred(x1)) {
				++n;
			}
		}
	}
	return n;
};
Lambda.empty = function(it) {
	return !$getIterator(it).hasNext();
};
Lambda.indexOf = function(it,v) {
	var i = 0;
	var v2 = $getIterator(it);
	while(v2.hasNext()) {
		var v21 = v2.next();
		if(v == v21) {
			return i;
		}
		++i;
	}
	return -1;
};
Lambda.find = function(it,f) {
	var v = $getIterator(it);
	while(v.hasNext()) {
		var v1 = v.next();
		if(f(v1)) {
			return v1;
		}
	}
	return null;
};
Lambda.concat = function(a,b) {
	var l = new haxe_ds_List();
	var x = $getIterator(a);
	while(x.hasNext()) {
		var x1 = x.next();
		l.add(x1);
	}
	var x = $getIterator(b);
	while(x.hasNext()) {
		var x1 = x.next();
		l.add(x1);
	}
	return l;
};
Math.__name__ = "Math";
var Reflect = function() { };
Reflect.__name__ = "Reflect";
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( _g ) {
		haxe_NativeStackTrace.lastError = _g;
		return null;
	}
};
Reflect.getProperty = function(o,field) {
	var tmp;
	if(o == null) {
		return null;
	} else {
		var tmp1;
		if(o.__properties__) {
			tmp = o.__properties__["get_" + field];
			tmp1 = tmp;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			return o[tmp]();
		} else {
			return o[field];
		}
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
var Server = function() { };
Server.__name__ = "Server";
Server.main = function() {
	haxe_Log.trace(process.cwd(),{ fileName : "Server.hx", lineNumber : 9, className : "Server", methodName : "main"});
	var router = auction_server_Module.router();
	var express = Express();
	var static_ = Express.static("public");
	express.use(static_);
	var tmp = auction_server_Handler._new(router);
	express.use(tmp);
	var ws = ExpressWs(express);
	var wss = ws.app;
	var tmp = auction_server_ws_Handler.toWebsocketRequestHandler(auction_server_ws_Handler._new(auction_server_ws_Module.router()));
	wss.ws("/api",tmp);
	var server = express.listen(3000);
};
var Std = function() { };
Std.__name__ = "Std";
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	if(x != null) {
		var _g = 0;
		var _g1 = x.length;
		while(_g < _g1) {
			var i = _g++;
			var c = x.charCodeAt(i);
			if(c <= 8 || c >= 14 && c != 32 && c != 45) {
				var nc = x.charCodeAt(i + 1);
				var v = parseInt(x,nc == 120 || nc == 88 ? 16 : 10);
				if(isNaN(v)) {
					return null;
				} else {
					return v;
				}
			}
		}
	}
	return null;
};
var StringBuf = function() {
	this.b = "";
};
StringBuf.__name__ = "StringBuf";
StringBuf.prototype = {
	b: null
	,__class__: StringBuf
};
var StringTools = function() { };
StringTools.__name__ = "StringTools";
StringTools.htmlEscape = function(s,quotes) {
	var buf_b = "";
	var _g_offset = 0;
	var _g_s = s;
	while(_g_offset < _g_s.length) {
		var s = _g_s;
		var index = _g_offset++;
		var c = s.charCodeAt(index);
		if(c >= 55296 && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(index + 1) & 1023;
		}
		var c1 = c;
		if(c1 >= 65536) {
			++_g_offset;
		}
		var code = c1;
		switch(code) {
		case 34:
			if(quotes) {
				buf_b += "&quot;";
			} else {
				buf_b += String.fromCodePoint(code);
			}
			break;
		case 38:
			buf_b += "&amp;";
			break;
		case 39:
			if(quotes) {
				buf_b += "&#039;";
			} else {
				buf_b += String.fromCodePoint(code);
			}
			break;
		case 60:
			buf_b += "&lt;";
			break;
		case 62:
			buf_b += "&gt;";
			break;
		default:
			buf_b += String.fromCodePoint(code);
		}
	}
	return buf_b;
};
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return s.lastIndexOf(start,0) == 0;
	} else {
		return false;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.lpad = function(s,c,l) {
	if(c.length <= 0) {
		return s;
	}
	var buf_b = "";
	l -= s.length;
	while(buf_b.length < l) buf_b += c == null ? "null" : "" + c;
	buf_b += s == null ? "null" : "" + s;
	return buf_b;
};
StringTools.rpad = function(s,c,l) {
	if(c.length <= 0) {
		return s;
	}
	var buf_b = "";
	buf_b += s == null ? "null" : "" + s;
	while(buf_b.length < l) buf_b += c == null ? "null" : "" + c;
	return buf_b;
};
StringTools.hex = function(n,digits) {
	var s = "";
	var hexChars = "0123456789ABCDEF";
	while(true) {
		s = hexChars.charAt(n & 15) + s;
		n >>>= 4;
		if(!(n > 0)) {
			break;
		}
	}
	if(digits != null) {
		while(s.length < digits) s = "0" + s;
	}
	return s;
};
var ValueType = $hxEnums["ValueType"] = { __ename__:true,__constructs__:null
	,TNull: {_hx_name:"TNull",_hx_index:0,__enum__:"ValueType",toString:$estr}
	,TInt: {_hx_name:"TInt",_hx_index:1,__enum__:"ValueType",toString:$estr}
	,TFloat: {_hx_name:"TFloat",_hx_index:2,__enum__:"ValueType",toString:$estr}
	,TBool: {_hx_name:"TBool",_hx_index:3,__enum__:"ValueType",toString:$estr}
	,TObject: {_hx_name:"TObject",_hx_index:4,__enum__:"ValueType",toString:$estr}
	,TFunction: {_hx_name:"TFunction",_hx_index:5,__enum__:"ValueType",toString:$estr}
	,TClass: ($_=function(c) { return {_hx_index:6,c:c,__enum__:"ValueType",toString:$estr}; },$_._hx_name="TClass",$_.__params__ = ["c"],$_)
	,TEnum: ($_=function(e) { return {_hx_index:7,e:e,__enum__:"ValueType",toString:$estr}; },$_._hx_name="TEnum",$_.__params__ = ["e"],$_)
	,TUnknown: {_hx_name:"TUnknown",_hx_index:8,__enum__:"ValueType",toString:$estr}
};
ValueType.__constructs__ = [ValueType.TNull,ValueType.TInt,ValueType.TFloat,ValueType.TBool,ValueType.TObject,ValueType.TFunction,ValueType.TClass,ValueType.TEnum,ValueType.TUnknown];
var Type = function() { };
Type.__name__ = "Type";
Type.createInstance = function(cl,args) {
	var ctor = Function.prototype.bind.apply(cl,[null].concat(args));
	return new (ctor);
};
Type.getInstanceFields = function(c) {
	var a = [];
	for(var i in c.prototype) a.push(i);
	HxOverrides.remove(a,"__class__");
	HxOverrides.remove(a,"__properties__");
	return a;
};
Type.typeof = function(v) {
	switch(typeof(v)) {
	case "boolean":
		return ValueType.TBool;
	case "function":
		if(v.__name__ || v.__ename__) {
			return ValueType.TObject;
		}
		return ValueType.TFunction;
	case "number":
		if(Math.ceil(v) == v % 2147483648.0) {
			return ValueType.TInt;
		}
		return ValueType.TFloat;
	case "object":
		if(v == null) {
			return ValueType.TNull;
		}
		var e = v.__enum__;
		if(e != null) {
			return ValueType.TEnum($hxEnums[e]);
		}
		var c = js_Boot.getClass(v);
		if(c != null) {
			return ValueType.TClass(c);
		}
		return ValueType.TObject;
	case "string":
		return ValueType.TClass(String);
	case "undefined":
		return ValueType.TNull;
	default:
		return ValueType.TUnknown;
	}
};
var auction_Server = function() { };
auction_Server.__name__ = "auction.Server";
var auction_server_GolgiExpressPath = {};
auction_server_GolgiExpressPath._new = function(self) {
	var this1 = self;
	return this1;
};
auction_server_GolgiExpressPath.fromRequest = function(self) {
	var arr = self.path.split("/");
	arr.shift();
	return auction_server_GolgiExpressPath._new(arr);
};
var auction_server_HandlerLift = function() { };
auction_server_HandlerLift.__name__ = "auction.server.HandlerLift";
auction_server_HandlerLift.apply = function(router,req,res,next) {
	var path = auction_server_GolgiExpressPath.fromRequest(req);
	try {
		var operation = router.route(path,null,req);
		if(operation._hx_index == 2) {
			var _g = operation.result;
			var home = "" + process.cwd() + "/templates/home.html";
			haxe_Log.trace(home,{ fileName : "src/main/haxe/auction/server/Handler.hx", lineNumber : 20, className : "auction.server.HandlerLift", methodName : "apply"});
			res.sendFile(home);
		} else {
			next();
		}
	} catch( _g ) {
		haxe_NativeStackTrace.lastError = _g;
		var _g1 = haxe_Exception.caught(_g).unwrap();
		if(js_Boot.__instanceof(_g1,golgi_Error)) {
			var e = _g1;
			next(e);
		} else {
			throw _g;
		}
	}
};
var auction_server_Handler = {};
auction_server_Handler._new = function(router) {
	var router1 = router;
	var this1 = function(req,res,next) {
		auction_server_Handler._.apply(router1,req,res,next);
	};
	return this1;
};
var auction_server_Module = function() { };
auction_server_Module.__name__ = "auction.server.Module";
auction_server_Module.router = function() {
	var root = new auction_server_router_Routes();
	return new auction_server_router_Golgi(root);
};
var auction_server_api_ApiApi = function() { };
auction_server_api_ApiApi.__name__ = "auction.server.api.ApiApi";
auction_server_api_ApiApi.__isInterface__ = true;
auction_server_api_ApiApi.prototype = {
	user: null
	,session: null
	,auction: null
	,saleable: null
	,bid: null
	,__class__: auction_server_api_ApiApi
};
var auction_server_api_ApiCls = function(user,session,auction,saleable,bid) {
	this.user = user;
	this.session = session;
	this.auction = auction;
	this.saleable = saleable;
	this.bid = bid;
};
auction_server_api_ApiCls.__name__ = "auction.server.api.ApiCls";
auction_server_api_ApiCls.__interfaces__ = [auction_server_api_ApiApi];
auction_server_api_ApiCls.prototype = {
	user: null
	,session: null
	,auction: null
	,saleable: null
	,bid: null
	,__class__: auction_server_api_ApiCls
};
var auction_server_store_VO = function() { };
auction_server_store_VO.__name__ = "auction.server.store.VO";
auction_server_store_VO.prototype = {
	uid: null
	,get_uid: null
	,__class__: auction_server_store_VO
	,__properties__: {get_uid:"get_uid"}
};
var auction_server_auction_Auction = function(saleable,duration,start_time,bids,id) {
	this.saleable = auction_server_saleable_SaleableId.toInt(saleable);
	this.duration = duration;
	this.start_time = start_time;
	this.bids = bids;
	this.id = id;
};
auction_server_auction_Auction.__name__ = "auction.server.auction.Auction";
auction_server_auction_Auction.make = function(saleable,duration,start_time,bids,id) {
	return new auction_server_auction_Auction(saleable,duration,start_time,bids,id);
};
auction_server_auction_Auction.__super__ = auction_server_store_VO;
auction_server_auction_Auction.prototype = $extend(auction_server_store_VO.prototype,{
	clone: function() {
		return new cloner_Cloner().clone(this);
	}
	,stamp: function() {
		if(this.start_time > 0) {
			var this1 = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "src/main/haxe/auction/server/auction/Auction.hx", lineNumber : 18, className : "auction.server.auction.Auction", methodName : "stamp"});
			return stx_nano_Pledge.make(stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,new stx_nano_Err(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,stx_nano_FailureSum.ERR_OF(stx_fail_AuctionFailure.E_AuctionFailed("already started"))),haxe_ds_Option.None,this1)));
		} else {
			var that = this.clone();
			var hrtime = process.hrtime();
			that.start_time = hrtime[0] + hrtime[1] / 1e9;
			return stx_nano_Pledge.make(stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,that));
		}
	}
	,end_time: null
	,get_end_time: function() {
		var _gthis = this;
		return stx_pico_OptionLift.map(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,this.start_time),function(f) {
			return f + _gthis.duration;
		});
	}
	,has_ended: function() {
		var self = this.get_end_time();
		switch(self._hx_index) {
		case 0:
			var t = self.v;
			var hrtime = process.hrtime();
			return hrtime[0] + hrtime[1] / 1e9 > t;
		case 1:
			return false;
		}
	}
	,remaining_time: function() {
		return stx_pico_OptionLift.map(this.get_end_time(),function(ok) {
			var hrtime = process.hrtime();
			return ok - (hrtime[0] + hrtime[1] / 1e9);
		});
	}
	,saleable: null
	,duration: null
	,start_time: null
	,bids: null
	,id: null
	,get_uid: function() {
		return this.id;
	}
	,__class__: auction_server_auction_Auction
	,__properties__: $extend(auction_server_store_VO.prototype.__properties__,{get_end_time:"get_end_time"})
});
var auction_server_auction_AuctionId = {};
auction_server_auction_AuctionId.toInt = function(this1) {
	return this1;
};
auction_server_auction_AuctionId.toIntKey = function(this1) {
	var _e = this1;
	return { toInt : function() {
		return auction_server_auction_AuctionId.toInt(_e);
	}};
};
var stx_pico_Clazz = $hx_exports["stx"]["Clazz"] = function() {
};
stx_pico_Clazz.__name__ = "stx.pico.Clazz";
stx_pico_Clazz.prototype = {
	definition: function() {
		return js_Boot.getClass(this);
	}
	,identifier: function() {
		var c = js_Boot.getClass(this);
		return stx_pico_Identifier._new(c.__name__);
	}
	,__class__: stx_pico_Clazz
};
var auction_server_store_StoreApi = function() { };
auction_server_store_StoreApi.__name__ = "auction.server.store.StoreApi";
auction_server_store_StoreApi.__isInterface__ = true;
auction_server_store_StoreApi.prototype = {
	insert: null
	,update: null
	,'delete': null
	,locate: null
	,values: null
	,__class__: auction_server_store_StoreApi
};
var auction_server_store_MemoryStore = function() {
	stx_pico_Clazz.call(this);
	this.data = [];
};
auction_server_store_MemoryStore.__name__ = "auction.server.store.MemoryStore";
auction_server_store_MemoryStore.__interfaces__ = [auction_server_store_StoreApi];
auction_server_store_MemoryStore.__super__ = stx_pico_Clazz;
auction_server_store_MemoryStore.prototype = $extend(stx_pico_Clazz.prototype,{
	data: null
	,insert: function(v) {
		this.data.push(v);
		return stx_nano_Pledge.make(stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,null));
	}
	,'delete': function(i) {
		var value = stx_lift_ArrayLift.search(this.data,function(x) {
			return x.id == i;
		});
		var removed = false;
		var v = $iterator(stx_pico_OptionLift)(value);
		while(v.hasNext()) {
			var v1 = v.next();
			removed = HxOverrides.remove(this.data,v1);
		}
		return stx_nano_Pledge.make(stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,removed));
	}
	,update: function(v) {
		var self = this.data;
		var index = 0;
		var ok = false;
		var _g = 0;
		while(_g < self.length) {
			var e = self[_g];
			++_g;
			if(e.id == v.id) {
				ok = true;
				break;
			}
			++index;
		}
		var index1 = ok ? index : -1;
		if(index1 != -1) {
			this.data[index1] = v;
		}
		return stx_nano_Pledge.make(stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,null));
	}
	,locate: function(i) {
		return stx_nano_Pledge.make(stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,stx_lift_ArrayLift.search(this.data,function(x) {
			return x.id == i;
		})));
	}
	,values: function() {
		var _this = this.data;
		var result = new Array(_this.length);
		var _g = 0;
		var _g1 = _this.length;
		while(_g < _g1) {
			var i = _g++;
			result[i] = _this[i].id;
		}
		return stx_nano_Pledge.make(stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,result));
	}
	,toString: function() {
		var c = js_Boot.getClass(this);
		var name = stx_pico_Identifier.get_name(stx_pico_Identifier._new(c.__name__));
		var _this = this.data;
		var result = new Array(_this.length);
		var _g = 0;
		var _g1 = _this.length;
		while(_g < _g1) {
			var i = _g++;
			result[i] = Std.string(_this[i]);
		}
		var data = result.join(", ");
		return "" + name + "(" + data + ")";
	}
	,__class__: auction_server_store_MemoryStore
});
var auction_server_auction_AuctionModelApi = function() { };
auction_server_auction_AuctionModelApi.__name__ = "auction.server.auction.AuctionModelApi";
auction_server_auction_AuctionModelApi.__isInterface__ = true;
auction_server_auction_AuctionModelApi.__interfaces__ = [auction_server_store_StoreApi];
auction_server_auction_AuctionModelApi.prototype = {
	start: null
	,place_bid: null
	,__class__: auction_server_auction_AuctionModelApi
};
var auction_server_auction_AuctionMemoryModel = function(bids) {
	auction_server_store_MemoryStore.call(this);
	this.bids = bids;
};
auction_server_auction_AuctionMemoryModel.__name__ = "auction.server.auction.AuctionMemoryModel";
auction_server_auction_AuctionMemoryModel.__interfaces__ = [auction_server_auction_AuctionModelApi];
auction_server_auction_AuctionMemoryModel.make = function(bids) {
	return new auction_server_auction_AuctionMemoryModel(bids);
};
auction_server_auction_AuctionMemoryModel.__super__ = auction_server_store_MemoryStore;
auction_server_auction_AuctionMemoryModel.prototype = $extend(auction_server_store_MemoryStore.prototype,{
	bids: null
	,start: function(id) {
		var _gthis = this;
		return stx_nano_Pledge.flat_map(this.locate(auction_server_auction_AuctionId.toInt(id)),function(auction) {
			var tmp;
			switch(auction._hx_index) {
			case 0:
				var t = auction.v;
				tmp = stx_nano_Pledge.flat_map(t.stamp(),function(auction) {
					return _gthis.update(auction);
				});
				break;
			case 1:
				tmp = stx_nano_Pledge.make(stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,null));
				break;
			}
			return tmp;
		});
	}
	,place_bid: function(id,bid) {
		var _gthis = this;
		return stx_nano_Pledge.flat_map(this.locate(auction_server_auction_AuctionId.toInt(id)),function(auction) {
			var tmp;
			switch(auction._hx_index) {
			case 0:
				var t = auction.v;
				var ok = t;
				tmp = stx_nano_Pledge.flat_map(_gthis.bids.insert(bid),function(_) {
					var next = new cloner_Cloner().clone(ok);
					next.bids.push(bid.get_uid());
					return _gthis.update(next);
				});
				break;
			case 1:
				var this1 = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "src/main/haxe/auction/server/auction/AuctionMemoryModel.hx", lineNumber : 35, className : "auction.server.auction.AuctionMemoryModel", methodName : "place_bid"});
				tmp = stx_nano_Pledge.make(stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,new stx_nano_Err(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,stx_nano_FailureSum.ERR_OF(stx_fail_AuctionFailure.E_NoSuchAuction)),haxe_ds_Option.None,this1)));
				break;
			}
			return tmp;
		});
	}
	,__class__: auction_server_auction_AuctionMemoryModel
});
var auction_server_auction_AuctionSchema = function() {
	stx_pico_Clazz.call(this);
};
auction_server_auction_AuctionSchema.__name__ = "auction.server.auction.AuctionSchema";
auction_server_auction_AuctionSchema.__super__ = stx_pico_Clazz;
auction_server_auction_AuctionSchema.prototype = $extend(stx_pico_Clazz.prototype,{
	__class__: auction_server_auction_AuctionSchema
});
var auction_server_bid_Bid = function(user,item,bid,time,id) {
	this.user = user;
	this.item = item;
	this.bid = bid;
	this.time = time;
	this.id = id;
};
auction_server_bid_Bid.__name__ = "auction.server.bid.Bid";
auction_server_bid_Bid.__super__ = auction_server_store_VO;
auction_server_bid_Bid.prototype = $extend(auction_server_store_VO.prototype,{
	user: null
	,item: null
	,bid: null
	,time: null
	,id: null
	,get_uid: function() {
		return this.id;
	}
	,__class__: auction_server_bid_Bid
});
var auction_server_bid_BidId = {};
auction_server_bid_BidId.toInt = function(this1) {
	return this1;
};
auction_server_bid_BidId.toIntKey = function(this1) {
	var _e = this1;
	return { toInt : function() {
		return auction_server_bid_BidId.toInt(_e);
	}};
};
var auction_server_bid_BidModelApi = function() { };
auction_server_bid_BidModelApi.__name__ = "auction.server.bid.BidModelApi";
auction_server_bid_BidModelApi.__isInterface__ = true;
auction_server_bid_BidModelApi.__interfaces__ = [auction_server_store_StoreApi];
var auction_server_bid_BidMemoryModel = function() {
	auction_server_store_MemoryStore.call(this);
};
auction_server_bid_BidMemoryModel.__name__ = "auction.server.bid.BidMemoryModel";
auction_server_bid_BidMemoryModel.__interfaces__ = [auction_server_bid_BidModelApi];
auction_server_bid_BidMemoryModel.__super__ = auction_server_store_MemoryStore;
auction_server_bid_BidMemoryModel.prototype = $extend(auction_server_store_MemoryStore.prototype,{
	__class__: auction_server_bid_BidMemoryModel
});
var auction_server_pack_Counter = function() {
	this.value = 0;
};
auction_server_pack_Counter.__name__ = "auction.server.pack.Counter";
auction_server_pack_Counter.prototype = {
	value: null
	,next: function() {
		var result = this.value;
		this.value += 1;
		return result;
	}
	,portion: function(length) {
		var _gthis = this;
		return { iterator : { next : function() {
			length -= 1;
			return _gthis.next();
		}, hasNext : function() {
			return length > 0;
		}}};
	}
	,__class__: auction_server_pack_Counter
};
var auction_server_bid_BidSchema = function() {
	stx_pico_Clazz.call(this);
};
auction_server_bid_BidSchema.__name__ = "auction.server.bid.BidSchema";
auction_server_bid_BidSchema.__super__ = stx_pico_Clazz;
auction_server_bid_BidSchema.prototype = $extend(stx_pico_Clazz.prototype,{
	make: function(user,item,bid,time,id) {
		var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,id);
		var tmp;
		if(self._hx_index == 0) {
			var v = self.v;
			tmp = v;
		} else {
			tmp = auction_server_bid_BidSchema.counter.next();
		}
		return new auction_server_bid_Bid(user,item,bid,time,tmp);
	}
	,__class__: auction_server_bid_BidSchema
});
var auction_server_context_ContextApi = function() { };
auction_server_context_ContextApi.__name__ = "auction.server.context.ContextApi";
auction_server_context_ContextApi.__isInterface__ = true;
auction_server_context_ContextApi.prototype = {
	api: null
	,__class__: auction_server_context_ContextApi
};
var auction_server_context_ContextCls = function(api) {
	this.api = api;
};
auction_server_context_ContextCls.__name__ = "auction.server.context.ContextCls";
auction_server_context_ContextCls.__interfaces__ = [auction_server_context_ContextApi];
auction_server_context_ContextCls.prototype = {
	api: null
	,__class__: auction_server_context_ContextCls
};
var auction_server_context_ContextSchema = function() {
	stx_pico_Clazz.call(this);
};
auction_server_context_ContextSchema.__name__ = "auction.server.context.ContextSchema";
auction_server_context_ContextSchema.__super__ = stx_pico_Clazz;
auction_server_context_ContextSchema.prototype = $extend(stx_pico_Clazz.prototype,{
	mock: function() {
		var bid = new auction_server_bid_BidMemoryModel();
		var session = new auction_server_session_SessionMemoryModel();
		var user = new auction_server_user_UserSchema().pull(session);
		var saleable = auction_server_saleable_SaleableMockMemoryModel.pull();
		var auction = auction_server_auction_AuctionMemoryModel.make(bid);
		var pull = function(user,saleable) {
			return new auction_server_context_ContextCls(new auction_server_api_ApiCls(user,session,auction,saleable,bid));
		};
		var context = stx_nano_Pledge.map(stx_nano_PledgeLift.zip(user,saleable),stx_nano_lift_LiftNano.decouple(stx_nano_Wildcard.__,pull));
		return context;
	}
	,__class__: auction_server_context_ContextSchema
});
var golgi_Golgi = function(api,meta) {
	this.api = api;
	this.meta = meta != null ? meta : new golgi_MetaGolgi();
	this.dict = new haxe_ds_StringMap();
	this.__init();
};
golgi_Golgi.__name__ = "golgi.Golgi";
golgi_Golgi.prototype = {
	api: null
	,meta: null
	,dict: null
	,__init: function() {
	}
	,route: function(parts,params,request) {
		var path = parts.length > 0 ? parts[0] : "";
		if(Object.prototype.hasOwnProperty.call(this.dict.h,path)) {
			return this.dict.h[path](parts,params,request);
		} else {
			throw haxe_Exception.thrown(golgi_Error.NotFound(parts[0]));
		}
	}
	,__class__: golgi_Golgi
};
var auction_server_router_Golgi = function(api,meta) {
	golgi_Golgi.call(this,api,meta);
};
auction_server_router_Golgi.__name__ = "auction.server.router.Golgi";
auction_server_router_Golgi.__super__ = golgi_Golgi;
auction_server_router_Golgi.prototype = $extend(golgi_Golgi.prototype,{
	__init: function() {
		var _gthis = this;
		this.dict.h["api"] = function(parts,params,request) {
			return auction_server_router_Operation.Api(_gthis.api.api(request,new golgi_Subroute(parts.slice(1),params,request)));
		};
		this.dict.h["_404"] = function(parts,params,request) {
			if(parts.length > 1) {
				throw haxe_Exception.thrown(golgi_Error.TooManyValues);
			}
			return auction_server_router_Operation._404(_gthis.api._404());
		};
		this.dict.h[""] = function(parts,params,request) {
			if(parts.length > 1) {
				throw haxe_Exception.thrown(golgi_Error.TooManyValues);
			}
			return auction_server_router_Operation.Home(_gthis.api.home());
		};
	}
	,__class__: auction_server_router_Golgi
});
var auction_server_router_Operation = $hxEnums["auction.server.router.Operation"] = { __ename__:true,__constructs__:null
	,Api: ($_=function(result) { return {_hx_index:0,result:result,__enum__:"auction.server.router.Operation",toString:$estr}; },$_._hx_name="Api",$_.__params__ = ["result"],$_)
	,_404: ($_=function(result) { return {_hx_index:1,result:result,__enum__:"auction.server.router.Operation",toString:$estr}; },$_._hx_name="_404",$_.__params__ = ["result"],$_)
	,Home: ($_=function(result) { return {_hx_index:2,result:result,__enum__:"auction.server.router.Operation",toString:$estr}; },$_._hx_name="Home",$_.__params__ = ["result"],$_)
};
auction_server_router_Operation.__constructs__ = [auction_server_router_Operation.Api,auction_server_router_Operation._404,auction_server_router_Operation.Home];
auction_server_router_Operation.__meta__ = { obj : { _golgi_api : ["Routes"]}};
var golgi_Api = function() {
};
golgi_Api.__name__ = "golgi.Api";
golgi_Api.prototype = {
	__class__: golgi_Api
};
var auction_server_router_Routes = function() {
	golgi_Api.call(this);
};
auction_server_router_Routes.__name__ = "auction.server.router.Routes";
auction_server_router_Routes.__super__ = golgi_Api;
auction_server_router_Routes.prototype = $extend(golgi_Api.prototype,{
	api: function(request,subroute) {
		var sub_api = new auction_server_router_api_Routes();
		var sub_glg = new auction_server_router_api_Golgi(sub_api);
		var res = sub_glg.route(subroute.parts,subroute.params,subroute.request);
		return res;
	}
	,_404: function() {
		return null;
	}
	,home: function() {
		return null;
	}
	,__class__: auction_server_router_Routes
});
var auction_server_router_api_Golgi = function(api,meta) {
	golgi_Golgi.call(this,api,meta);
};
auction_server_router_api_Golgi.__name__ = "auction.server.router.api.Golgi";
auction_server_router_api_Golgi.__super__ = golgi_Golgi;
auction_server_router_api_Golgi.prototype = $extend(golgi_Golgi.prototype,{
	__init: function() {
		var _gthis = this;
		this.dict.h["saleable"] = function(parts,params,request) {
			return auction_server_router_api_Operation.Saleable(_gthis.api.saleable(request,new golgi_Subroute(parts.slice(1),params,request)));
		};
		this.dict.h["bid"] = function(parts,params,request) {
			return auction_server_router_api_Operation.Bid(_gthis.api.bid(request,new golgi_Subroute(parts.slice(1),params,request)));
		};
		this.dict.h["auction"] = function(parts,params,request) {
			return auction_server_router_api_Operation.Auction(_gthis.api.auction(request,new golgi_Subroute(parts.slice(1),params,request)));
		};
		this.dict.h["user"] = function(parts,params,request) {
			return auction_server_router_api_Operation.User(_gthis.api.user(request,new golgi_Subroute(parts.slice(1),params,request)));
		};
		this.dict.h["session"] = function(parts,params,request) {
			return auction_server_router_api_Operation.Session(_gthis.api.session(request,new golgi_Subroute(parts.slice(1),params,request)));
		};
	}
	,__class__: auction_server_router_api_Golgi
});
var auction_server_router_api_Operation = $hxEnums["auction.server.router.api.Operation"] = { __ename__:true,__constructs__:null
	,Saleable: ($_=function(result) { return {_hx_index:0,result:result,__enum__:"auction.server.router.api.Operation",toString:$estr}; },$_._hx_name="Saleable",$_.__params__ = ["result"],$_)
	,Bid: ($_=function(result) { return {_hx_index:1,result:result,__enum__:"auction.server.router.api.Operation",toString:$estr}; },$_._hx_name="Bid",$_.__params__ = ["result"],$_)
	,Auction: ($_=function(result) { return {_hx_index:2,result:result,__enum__:"auction.server.router.api.Operation",toString:$estr}; },$_._hx_name="Auction",$_.__params__ = ["result"],$_)
	,User: ($_=function(result) { return {_hx_index:3,result:result,__enum__:"auction.server.router.api.Operation",toString:$estr}; },$_._hx_name="User",$_.__params__ = ["result"],$_)
	,Session: ($_=function(result) { return {_hx_index:4,result:result,__enum__:"auction.server.router.api.Operation",toString:$estr}; },$_._hx_name="Session",$_.__params__ = ["result"],$_)
};
auction_server_router_api_Operation.__constructs__ = [auction_server_router_api_Operation.Saleable,auction_server_router_api_Operation.Bid,auction_server_router_api_Operation.Auction,auction_server_router_api_Operation.User,auction_server_router_api_Operation.Session];
auction_server_router_api_Operation.__meta__ = { obj : { _golgi_api : ["Routes"]}};
var auction_server_router_api_Routes = function() {
	golgi_Api.call(this);
};
auction_server_router_api_Routes.__name__ = "auction.server.router.api.Routes";
auction_server_router_api_Routes.__super__ = golgi_Api;
auction_server_router_api_Routes.prototype = $extend(golgi_Api.prototype,{
	saleable: function(request,subroute) {
		var sub_api = new auction_server_router_api_saleable_Routes();
		var sub_glg = new auction_server_router_api_saleable_Golgi(sub_api);
		var res = sub_glg.route(subroute.parts,subroute.params,subroute.request);
		return res;
	}
	,bid: function(request,subroute) {
		var sub_api = new auction_server_router_api_bid_Routes();
		var sub_glg = new auction_server_router_api_bid_Golgi(sub_api);
		var res = sub_glg.route(subroute.parts,subroute.params,subroute.request);
		return res;
	}
	,auction: function(request,subroute) {
		var sub_api = new auction_server_router_api_auction_Routes();
		var sub_glg = new auction_server_router_api_auction_Golgi(sub_api);
		var res = sub_glg.route(subroute.parts,subroute.params,subroute.request);
		return res;
	}
	,user: function(request,subroute) {
		var sub_api = new auction_server_router_api_user_Routes();
		var sub_glg = new auction_server_router_api_user_Golgi(sub_api);
		var res = sub_glg.route(subroute.parts,subroute.params,subroute.request);
		return res;
	}
	,session: function(request,subroute) {
		var sub_api = new auction_server_router_api_session_Routes();
		var sub_glg = new auction_server_router_api_session_Golgi(sub_api);
		var res = sub_glg.route(subroute.parts,subroute.params,subroute.request);
		return res;
	}
	,__class__: auction_server_router_api_Routes
});
var auction_server_router_api_auction_Golgi = function(api,meta) {
	golgi_Golgi.call(this,api,meta);
};
auction_server_router_api_auction_Golgi.__name__ = "auction.server.router.api.auction.Golgi";
auction_server_router_api_auction_Golgi.__super__ = golgi_Golgi;
auction_server_router_api_auction_Golgi.prototype = $extend(golgi_Golgi.prototype,{
	__init: function() {
		var _gthis = this;
		this.dict.h["start"] = function(parts,params,request) {
			if(parts.length > 2) {
				throw haxe_Exception.thrown(golgi_Error.TooManyValues);
			}
			return auction_server_router_api_auction_Operation.Start(_gthis.api.start(request));
		};
	}
	,__class__: auction_server_router_api_auction_Golgi
});
var auction_server_router_api_auction_Operation = $hxEnums["auction.server.router.api.auction.Operation"] = { __ename__:true,__constructs__:null
	,Start: ($_=function(result) { return {_hx_index:0,result:result,__enum__:"auction.server.router.api.auction.Operation",toString:$estr}; },$_._hx_name="Start",$_.__params__ = ["result"],$_)
};
auction_server_router_api_auction_Operation.__constructs__ = [auction_server_router_api_auction_Operation.Start];
auction_server_router_api_auction_Operation.__meta__ = { obj : { _golgi_api : ["Routes"]}};
var auction_server_router_api_auction_Routes = function() {
	golgi_Api.call(this);
};
auction_server_router_api_auction_Routes.__name__ = "auction.server.router.api.auction.Routes";
auction_server_router_api_auction_Routes.__super__ = golgi_Api;
auction_server_router_api_auction_Routes.prototype = $extend(golgi_Api.prototype,{
	start: function(request) {
		haxe_Log.trace(request,{ fileName : "src/main/haxe/auction/server/router/api/auction/Routes.hx", lineNumber : 6, className : "auction.server.router.api.auction.Routes", methodName : "start"});
		return 0;
	}
	,__class__: auction_server_router_api_auction_Routes
});
var auction_server_router_api_bid_Golgi = function(api,meta) {
	golgi_Golgi.call(this,api,meta);
};
auction_server_router_api_bid_Golgi.__name__ = "auction.server.router.api.bid.Golgi";
auction_server_router_api_bid_Golgi.__super__ = golgi_Golgi;
auction_server_router_api_bid_Golgi.prototype = $extend(golgi_Golgi.prototype,{
	__init: function() {
	}
	,__class__: auction_server_router_api_bid_Golgi
});
var auction_server_router_api_bid_Operation = $hxEnums["auction.server.router.api.bid.Operation"] = { __ename__:true,__constructs__:null
};
auction_server_router_api_bid_Operation.__constructs__ = [];
auction_server_router_api_bid_Operation.__meta__ = { obj : { _golgi_api : ["Routes"]}};
var auction_server_router_api_bid_Routes = function() {
	golgi_Api.call(this);
};
auction_server_router_api_bid_Routes.__name__ = "auction.server.router.api.bid.Routes";
auction_server_router_api_bid_Routes.__super__ = golgi_Api;
auction_server_router_api_bid_Routes.prototype = $extend(golgi_Api.prototype,{
	__class__: auction_server_router_api_bid_Routes
});
var auction_server_router_api_saleable_Golgi = function(api,meta) {
	golgi_Golgi.call(this,api,meta);
};
auction_server_router_api_saleable_Golgi.__name__ = "auction.server.router.api.saleable.Golgi";
auction_server_router_api_saleable_Golgi.__super__ = golgi_Golgi;
auction_server_router_api_saleable_Golgi.prototype = $extend(golgi_Golgi.prototype,{
	__init: function() {
	}
	,__class__: auction_server_router_api_saleable_Golgi
});
var auction_server_router_api_saleable_Operation = $hxEnums["auction.server.router.api.saleable.Operation"] = { __ename__:true,__constructs__:null
};
auction_server_router_api_saleable_Operation.__constructs__ = [];
auction_server_router_api_saleable_Operation.__meta__ = { obj : { _golgi_api : ["Routes"]}};
var auction_server_router_api_saleable_Routes = function() {
	golgi_Api.call(this);
};
auction_server_router_api_saleable_Routes.__name__ = "auction.server.router.api.saleable.Routes";
auction_server_router_api_saleable_Routes.__super__ = golgi_Api;
auction_server_router_api_saleable_Routes.prototype = $extend(golgi_Api.prototype,{
	__class__: auction_server_router_api_saleable_Routes
});
var auction_server_router_api_session_Golgi = function(api,meta) {
	golgi_Golgi.call(this,api,meta);
};
auction_server_router_api_session_Golgi.__name__ = "auction.server.router.api.session.Golgi";
auction_server_router_api_session_Golgi.__super__ = golgi_Golgi;
auction_server_router_api_session_Golgi.prototype = $extend(golgi_Golgi.prototype,{
	__init: function() {
	}
	,__class__: auction_server_router_api_session_Golgi
});
var auction_server_router_api_session_Operation = $hxEnums["auction.server.router.api.session.Operation"] = { __ename__:true,__constructs__:null
};
auction_server_router_api_session_Operation.__constructs__ = [];
auction_server_router_api_session_Operation.__meta__ = { obj : { _golgi_api : ["Routes"]}};
var auction_server_router_api_session_Routes = function() {
	golgi_Api.call(this);
};
auction_server_router_api_session_Routes.__name__ = "auction.server.router.api.session.Routes";
auction_server_router_api_session_Routes.__super__ = golgi_Api;
auction_server_router_api_session_Routes.prototype = $extend(golgi_Api.prototype,{
	__class__: auction_server_router_api_session_Routes
});
var auction_server_router_api_user_Golgi = function(api,meta) {
	golgi_Golgi.call(this,api,meta);
};
auction_server_router_api_user_Golgi.__name__ = "auction.server.router.api.user.Golgi";
auction_server_router_api_user_Golgi.__super__ = golgi_Golgi;
auction_server_router_api_user_Golgi.prototype = $extend(golgi_Golgi.prototype,{
	__init: function() {
	}
	,__class__: auction_server_router_api_user_Golgi
});
var auction_server_router_api_user_Operation = $hxEnums["auction.server.router.api.user.Operation"] = { __ename__:true,__constructs__:null
};
auction_server_router_api_user_Operation.__constructs__ = [];
auction_server_router_api_user_Operation.__meta__ = { obj : { _golgi_api : ["Routes"]}};
var auction_server_router_api_user_Routes = function() {
	golgi_Api.call(this);
};
auction_server_router_api_user_Routes.__name__ = "auction.server.router.api.user.Routes";
auction_server_router_api_user_Routes.__super__ = golgi_Api;
auction_server_router_api_user_Routes.prototype = $extend(golgi_Api.prototype,{
	__class__: auction_server_router_api_user_Routes
});
var auction_server_saleable_Saleable = function(name,description,img,id) {
	this.name = name;
	this.description = description;
	this.img = img;
	this.id = id;
};
auction_server_saleable_Saleable.__name__ = "auction.server.saleable.Saleable";
auction_server_saleable_Saleable.make = function(name,description,img,id) {
	return new auction_server_saleable_Saleable(name,description,img,id);
};
auction_server_saleable_Saleable.__super__ = auction_server_store_VO;
auction_server_saleable_Saleable.prototype = $extend(auction_server_store_VO.prototype,{
	name: null
	,description: null
	,img: null
	,id: null
	,get_uid: function() {
		return this.id;
	}
	,__class__: auction_server_saleable_Saleable
});
var auction_server_saleable_SaleableId = {};
auction_server_saleable_SaleableId.toInt = function(this1) {
	return this1;
};
auction_server_saleable_SaleableId.toIntKey = function(this1) {
	var _e = this1;
	return { toInt : function() {
		return auction_server_saleable_SaleableId.toInt(_e);
	}};
};
var auction_server_saleable_SaleableModelApi = function() { };
auction_server_saleable_SaleableModelApi.__name__ = "auction.server.saleable.SaleableModelApi";
auction_server_saleable_SaleableModelApi.__isInterface__ = true;
auction_server_saleable_SaleableModelApi.__interfaces__ = [auction_server_store_StoreApi];
var auction_server_saleable_SaleableMemoryModel = function() {
	auction_server_store_MemoryStore.call(this);
};
auction_server_saleable_SaleableMemoryModel.__name__ = "auction.server.saleable.SaleableMemoryModel";
auction_server_saleable_SaleableMemoryModel.__interfaces__ = [auction_server_saleable_SaleableModelApi];
auction_server_saleable_SaleableMemoryModel.__super__ = auction_server_store_MemoryStore;
auction_server_saleable_SaleableMemoryModel.prototype = $extend(auction_server_store_MemoryStore.prototype,{
	__class__: auction_server_saleable_SaleableMemoryModel
});
var auction_server_saleable_SaleableMockMemoryModel = function() {
	auction_server_saleable_SaleableMemoryModel.call(this);
};
auction_server_saleable_SaleableMockMemoryModel.__name__ = "auction.server.saleable.SaleableMockMemoryModel";
auction_server_saleable_SaleableMockMemoryModel.pull = function() {
	var model = new auction_server_saleable_SaleableMockMemoryModel();
	if(!stx_nano_Resource.exists("saleables")) {
		var this1 = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "src/main/haxe/auction/server/saleable/SaleableMockMemoryModel.hx", lineNumber : 8, className : "auction.server.saleable.SaleableMockMemoryModel", methodName : "pull"});
		throw haxe_Exception.thrown(new stx_nano_Err(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,stx_nano_FailureSum.ERR_OF("E_ResourceNotFound")),haxe_ds_Option.None,this1));
	}
	var this1 = "saleables";
	var resource = JSON.parse(stx_nano_Resource.string(this1));
	var data = [];
	var _g = 0;
	var _g1 = resource.data;
	while(_g < _g1.length) {
		var item = _g1[_g];
		++_g;
		var next = auction_server_saleable_Saleable.make(item.name,item.description,item.img,item.id);
		data.push(next);
	}
	var fn = function(next,memo) {
		return stx_nano_Pledge.map(model.insert(next),function(_) {
			return memo;
		});
	};
	return stx_nano_Pledge.bind_fold(data,fn,model);
};
auction_server_saleable_SaleableMockMemoryModel.__super__ = auction_server_saleable_SaleableMemoryModel;
auction_server_saleable_SaleableMockMemoryModel.prototype = $extend(auction_server_saleable_SaleableMemoryModel.prototype,{
	__class__: auction_server_saleable_SaleableMockMemoryModel
});
var auction_server_session_Session = function(id,start_time,user) {
	this.id = auction_server_session_SessionId.toInt(id);
	this.start_time = start_time;
	this.user = auction_server_user_UserId.toInt(user);
};
auction_server_session_Session.__name__ = "auction.server.session.Session";
auction_server_session_Session.pure = function(id) {
	var tmp = auction_server_session_Session.counter.next();
	var hrtime = process.hrtime();
	return new auction_server_session_Session(tmp,hrtime[0] + hrtime[1] / 1e9,id);
};
auction_server_session_Session.__super__ = auction_server_store_VO;
auction_server_session_Session.prototype = $extend(auction_server_store_VO.prototype,{
	id: null
	,get_uid: function() {
		return this.id;
	}
	,user: null
	,start_time: null
	,__class__: auction_server_session_Session
});
var auction_server_session_SessionId = {};
auction_server_session_SessionId.toInt = function(this1) {
	return this1;
};
auction_server_session_SessionId.toIntKey = function(this1) {
	var _e = this1;
	return { toInt : function() {
		return auction_server_session_SessionId.toInt(_e);
	}};
};
var auction_server_session_SessionModelApi = function() { };
auction_server_session_SessionModelApi.__name__ = "auction.server.session.SessionModelApi";
auction_server_session_SessionModelApi.__isInterface__ = true;
auction_server_session_SessionModelApi.__interfaces__ = [auction_server_store_StoreApi];
var auction_server_session_SessionMemoryModel = function() {
	auction_server_store_MemoryStore.call(this);
};
auction_server_session_SessionMemoryModel.__name__ = "auction.server.session.SessionMemoryModel";
auction_server_session_SessionMemoryModel.__interfaces__ = [auction_server_session_SessionModelApi];
auction_server_session_SessionMemoryModel.__super__ = auction_server_store_MemoryStore;
auction_server_session_SessionMemoryModel.prototype = $extend(auction_server_store_MemoryStore.prototype,{
	__class__: auction_server_session_SessionMemoryModel
});
var auction_server_session_SessionSchema = function() {
	stx_pico_Clazz.call(this);
};
auction_server_session_SessionSchema.__name__ = "auction.server.session.SessionSchema";
auction_server_session_SessionSchema.__super__ = stx_pico_Clazz;
auction_server_session_SessionSchema.prototype = $extend(stx_pico_Clazz.prototype,{
	mock_memory: function() {
		return new auction_server_session_SessionMemoryModel();
	}
	,create: function(user) {
		var tmp = auction_server_session_SessionSchema.counter.next();
		var hrtime = process.hrtime();
		return new auction_server_session_Session(tmp,hrtime[0] + hrtime[1] / 1e9,user);
	}
	,__class__: auction_server_session_SessionSchema
});
var auction_server_user_User = function(name,pass,id,role,bids,sessions) {
	this.name = name;
	this.pass = pass;
	this.role = role;
	this.id = id;
	var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,bids);
	var tmp;
	if(self._hx_index == 0) {
		var v = self.v;
		tmp = v;
	} else {
		tmp = [];
	}
	this.bids = tmp;
	var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,sessions);
	var tmp;
	if(self._hx_index == 0) {
		var v = self.v;
		tmp = v;
	} else {
		tmp = [];
	}
	this.sessions = tmp;
};
auction_server_user_User.__name__ = "auction.server.user.User";
auction_server_user_User.__super__ = auction_server_store_VO;
auction_server_user_User.prototype = $extend(auction_server_store_VO.prototype,{
	clone: function() {
		return new cloner_Cloner().clone(this);
	}
	,id: null
	,name: null
	,pass: null
	,bids: null
	,sessions: null
	,role: null
	,get_uid: function() {
		return this.id;
	}
	,__class__: auction_server_user_User
});
var auction_server_user_UserId = {};
auction_server_user_UserId.toInt = function(this1) {
	return this1;
};
auction_server_user_UserId.toIntKey = function(this1) {
	var _e = this1;
	return { toInt : function() {
		return auction_server_user_UserId.toInt(_e);
	}};
};
var auction_server_user_UserModelApi = function() { };
auction_server_user_UserModelApi.__name__ = "auction.server.user.UserModelApi";
auction_server_user_UserModelApi.__isInterface__ = true;
auction_server_user_UserModelApi.__interfaces__ = [auction_server_store_StoreApi];
auction_server_user_UserModelApi.prototype = {
	sign_in: null
	,__class__: auction_server_user_UserModelApi
};
var auction_server_user_UserMockMemoryModel = function(session) {
	auction_server_store_MemoryStore.call(this);
	this.session = session;
};
auction_server_user_UserMockMemoryModel.__name__ = "auction.server.user.UserMockMemoryModel";
auction_server_user_UserMockMemoryModel.__interfaces__ = [auction_server_user_UserModelApi];
auction_server_user_UserMockMemoryModel.__super__ = auction_server_store_MemoryStore;
auction_server_user_UserMockMemoryModel.prototype = $extend(auction_server_store_MemoryStore.prototype,{
	session: null
	,sign_in: function(credentials) {
		var _gthis = this;
		var user = stx_lift_ArrayLift.search(this.data,function(user) {
			return user.name == credentials.name;
		});
		var pass;
		switch(user._hx_index) {
		case 0:
			var t = user.v;
			pass = t.pass == credentials.pass;
			break;
		case 1:
			pass = false;
			break;
		}
		return stx_nano_lift_LiftNano.if_else(pass,function() {
			var u = stx_pico_OptionLift.fudge(user);
			var s = auction_server_session_Session.pure(u.get_uid());
			return stx_nano_Pledge.flat_map(_gthis.session.insert(s),function(_) {
				var next = u.clone();
				next.sessions.push(s.get_uid());
				return stx_nano_Pledge.map(_gthis.update(u),function(_) {
					return true;
				});
			});
		},function() {
			return stx_nano_Pledge.make(stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,false));
		});
	}
	,__class__: auction_server_user_UserMockMemoryModel
});
var auction_server_user_UserSchema = function() {
	stx_pico_Clazz.call(this);
};
auction_server_user_UserSchema.__name__ = "auction.server.user.UserSchema";
auction_server_user_UserSchema.__super__ = stx_pico_Clazz;
auction_server_user_UserSchema.prototype = $extend(stx_pico_Clazz.prototype,{
	make: function(name,pass,id,role,bids,sessions) {
		return new auction_server_user_User(name,pass,id,role,bids,sessions);
	}
	,mock: function() {
		var users = [];
		if(!stx_nano_Resource.exists("users")) {
			var this1 = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "src/main/haxe/auction/server/user/UserSchema.hx", lineNumber : 9, className : "auction.server.user.UserSchema", methodName : "mock"});
			throw haxe_Exception.thrown(new stx_nano_Err(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,stx_nano_FailureSum.ERR_OF("E_ResourceNotFound")),haxe_ds_Option.None,this1));
		}
		var this1 = "users";
		var input = JSON.parse(stx_nano_Resource.string(this1)).data;
		var _g = 0;
		while(_g < input.length) {
			var x = input[_g];
			++_g;
			var data = new auction_server_user_User(x.name,x.pass,x.id,x.role,[],[]);
			users.push(data);
		}
		return users;
	}
	,pull: function(session) {
		var users = this.mock();
		var collection = new auction_server_user_UserMockMemoryModel(session);
		return stx_nano_Pledge.bind_fold(users,function(next,memo) {
			return stx_nano_Pledge.map(collection.insert(next),function(_) {
				return collection;
			});
		},collection);
	}
	,__class__: auction_server_user_UserSchema
});
var auction_server_ws_HandlerLift = function() { };
auction_server_ws_HandlerLift.__name__ = "auction.server.ws.HandlerLift";
var auction_server_ws_Handler = {};
auction_server_ws_Handler._new = function(router) {
	var this1 = function(ws,req,next) {
		haxe_Log.trace(req,{ fileName : "src/main/haxe/auction/server/ws/Handler.hx", lineNumber : 9, className : "auction.server.ws._Handler.Handler_Impl_", methodName : "_new"});
		var path = auction_server_GolgiExpressPath.fromRequest(req);
		try {
			var operation = router.route(path,null,req);
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			var _g1 = haxe_Exception.caught(_g).unwrap();
			if(js_Boot.__instanceof(_g1,golgi_Error)) {
				var e = _g1;
				next(e);
			} else {
				throw _g;
			}
		}
	};
	return this1;
};
auction_server_ws_Handler.toWebsocketRequestHandler = function(this1) {
	return this1;
};
var auction_server_ws_Module = function() { };
auction_server_ws_Module.__name__ = "auction.server.ws.Module";
auction_server_ws_Module.router = function() {
	var root = new auction_server_router_api_Routes();
	return new auction_server_router_api_Golgi(root);
};
var cloner_Cloner = function() {
	this.stringMapCloner = new cloner_MapCloner(this,haxe_ds_StringMap);
	this.intMapCloner = new cloner_MapCloner(this,haxe_ds_IntMap);
	this.classHandles = new haxe_ds_StringMap();
	this.classHandles.h["String"] = $bind(this,this.returnString);
	this.classHandles.h["Array"] = $bind(this,this.cloneArray);
	this.classHandles.h["haxe.ds.StringMap"] = ($_=this.stringMapCloner,$bind($_,$_.clone));
	this.classHandles.h["haxe.ds.IntMap"] = ($_=this.intMapCloner,$bind($_,$_.clone));
};
cloner_Cloner.__name__ = "cloner.Cloner";
cloner_Cloner.prototype = {
	cache: null
	,classHandles: null
	,stringMapCloner: null
	,intMapCloner: null
	,returnString: function(v) {
		return v;
	}
	,clone: function(v) {
		this.cache = new haxe_ds_ObjectMap();
		var outcome = this._clone(v);
		this.cache = null;
		return outcome;
	}
	,_clone: function(v) {
		if(typeof(v) == "string") {
			return v;
		}
		if(v.__name__ != null) {
			return v;
		}
		var _g = Type.typeof(v);
		switch(_g._hx_index) {
		case 0:
			return null;
		case 1:
			return v;
		case 2:
			return v;
		case 3:
			return v;
		case 4:
			return this.handleAnonymous(v);
		case 5:
			return null;
		case 6:
			var c = _g.c;
			if(this.cache.h.__keys__[v.__id__] == null) {
				this.cache.set(v,this.handleClass(c,v));
			}
			return this.cache.h[v.__id__];
		case 7:
			var e = _g.e;
			return v;
		case 8:
			return null;
		}
	}
	,handleAnonymous: function(v) {
		var properties = Reflect.fields(v);
		var anonymous = { };
		var _g = 0;
		var _g1 = properties.length;
		while(_g < _g1) {
			var i = _g++;
			var property = properties[i];
			anonymous[property] = this._clone(Reflect.getProperty(v,property));
		}
		return anonymous;
	}
	,handleClass: function(c,inValue) {
		var this1 = this.classHandles;
		var key = c.__name__;
		var handle = this1.h[key];
		if(handle == null) {
			handle = $bind(this,this.cloneClass);
		}
		return handle(inValue);
	}
	,cloneArray: function(inValue) {
		var array = inValue.slice();
		var _g = 0;
		var _g1 = array.length;
		while(_g < _g1) {
			var i = _g++;
			array[i] = this._clone(array[i]);
		}
		return array;
	}
	,cloneClass: function(inValue) {
		var outValue = Object.create(js_Boot.getClass(inValue).prototype);
		var fields = Reflect.fields(inValue);
		var _g = 0;
		var _g1 = fields.length;
		while(_g < _g1) {
			var i = _g++;
			var field = fields[i];
			var property = Reflect.getProperty(inValue,field);
			outValue[field] = this._clone(property);
		}
		return outValue;
	}
	,__class__: cloner_Cloner
};
var cloner_MapCloner = function(cloner,type) {
	this.cloner = cloner;
	this.type = type;
	this.noArgs = [];
};
cloner_MapCloner.__name__ = "cloner.MapCloner";
cloner_MapCloner.prototype = {
	cloner: null
	,type: null
	,noArgs: null
	,clone: function(inValue) {
		var inMap = inValue;
		var map = Type.createInstance(this.type,this.noArgs);
		var key = inMap.keys();
		while(key.hasNext()) {
			var key1 = key.next();
			map.set(key1,this.cloner._clone(inMap.get(key1)));
		}
		return map;
	}
	,__class__: cloner_MapCloner
};
var golgi_Error = $hxEnums["golgi.Error"] = { __ename__:true,__constructs__:null
	,NotFound: ($_=function(path) { return {_hx_index:0,path:path,__enum__:"golgi.Error",toString:$estr}; },$_._hx_name="NotFound",$_.__params__ = ["path"],$_)
	,InvalidValue: ($_=function(name) { return {_hx_index:1,name:name,__enum__:"golgi.Error",toString:$estr}; },$_._hx_name="InvalidValue",$_.__params__ = ["name"],$_)
	,InvalidValueParam: ($_=function(name) { return {_hx_index:2,name:name,__enum__:"golgi.Error",toString:$estr}; },$_._hx_name="InvalidValueParam",$_.__params__ = ["name"],$_)
	,Missing: ($_=function(name) { return {_hx_index:3,name:name,__enum__:"golgi.Error",toString:$estr}; },$_._hx_name="Missing",$_.__params__ = ["name"],$_)
	,MissingParam: ($_=function(name) { return {_hx_index:4,name:name,__enum__:"golgi.Error",toString:$estr}; },$_._hx_name="MissingParam",$_.__params__ = ["name"],$_)
	,TooManyValues: {_hx_name:"TooManyValues",_hx_index:5,__enum__:"golgi.Error",toString:$estr}
};
golgi_Error.__constructs__ = [golgi_Error.NotFound,golgi_Error.InvalidValue,golgi_Error.InvalidValueParam,golgi_Error.Missing,golgi_Error.MissingParam,golgi_Error.TooManyValues];
var golgi_MetaGolgi = function() {
};
golgi_MetaGolgi.__name__ = "golgi.MetaGolgi";
golgi_MetaGolgi.prototype = {
	req: null
	,ret: null
	,_golgi_pass: function(req,next) {
		return next(req);
	}
	,__class__: golgi_MetaGolgi
};
var golgi_Subroute = function(parts,params,request) {
	this.parts = parts;
	this.params = params;
	this.request = request;
};
golgi_Subroute.__name__ = "golgi.Subroute";
golgi_Subroute.prototype = {
	parts: null
	,params: null
	,request: null
	,mapRequest: function(ctxf) {
		return new golgi_Subroute(this.parts,this.params,ctxf(this.request));
	}
	,route: function(router) {
		return router.route(this.parts,this.params,this.request);
	}
	,__class__: golgi_Subroute
};
var haxe_StackItem = $hxEnums["haxe.StackItem"] = { __ename__:true,__constructs__:null
	,CFunction: {_hx_name:"CFunction",_hx_index:0,__enum__:"haxe.StackItem",toString:$estr}
	,Module: ($_=function(m) { return {_hx_index:1,m:m,__enum__:"haxe.StackItem",toString:$estr}; },$_._hx_name="Module",$_.__params__ = ["m"],$_)
	,FilePos: ($_=function(s,file,line,column) { return {_hx_index:2,s:s,file:file,line:line,column:column,__enum__:"haxe.StackItem",toString:$estr}; },$_._hx_name="FilePos",$_.__params__ = ["s","file","line","column"],$_)
	,Method: ($_=function(classname,method) { return {_hx_index:3,classname:classname,method:method,__enum__:"haxe.StackItem",toString:$estr}; },$_._hx_name="Method",$_.__params__ = ["classname","method"],$_)
	,LocalFunction: ($_=function(v) { return {_hx_index:4,v:v,__enum__:"haxe.StackItem",toString:$estr}; },$_._hx_name="LocalFunction",$_.__params__ = ["v"],$_)
};
haxe_StackItem.__constructs__ = [haxe_StackItem.CFunction,haxe_StackItem.Module,haxe_StackItem.FilePos,haxe_StackItem.Method,haxe_StackItem.LocalFunction];
var haxe_CallStack = {};
haxe_CallStack.callStack = function() {
	return haxe_NativeStackTrace.toHaxe(haxe_NativeStackTrace.callStack());
};
haxe_CallStack.exceptionStack = function(fullStack) {
	if(fullStack == null) {
		fullStack = false;
	}
	var eStack = haxe_NativeStackTrace.toHaxe(haxe_NativeStackTrace.exceptionStack());
	return fullStack ? eStack : haxe_CallStack.subtract(eStack,haxe_CallStack.callStack());
};
haxe_CallStack.toString = function(stack) {
	var b = new StringBuf();
	var _g = 0;
	var _g1 = stack;
	while(_g < _g1.length) {
		var s = _g1[_g];
		++_g;
		b.b += "\nCalled from ";
		haxe_CallStack.itemToString(b,s);
	}
	return b.b;
};
haxe_CallStack.subtract = function(this1,stack) {
	var startIndex = -1;
	var i = -1;
	while(++i < this1.length) {
		var _g = 0;
		var _g1 = stack.length;
		while(_g < _g1) {
			var j = _g++;
			if(haxe_CallStack.equalItems(this1[i],stack[j])) {
				if(startIndex < 0) {
					startIndex = i;
				}
				++i;
				if(i >= this1.length) {
					break;
				}
			} else {
				startIndex = -1;
			}
		}
		if(startIndex >= 0) {
			break;
		}
	}
	if(startIndex >= 0) {
		return this1.slice(0,startIndex);
	} else {
		return this1;
	}
};
haxe_CallStack.equalItems = function(item1,item2) {
	if(item1 == null) {
		if(item2 == null) {
			return true;
		} else {
			return false;
		}
	} else {
		switch(item1._hx_index) {
		case 0:
			if(item2 == null) {
				return false;
			} else if(item2._hx_index == 0) {
				return true;
			} else {
				return false;
			}
			break;
		case 1:
			if(item2 == null) {
				return false;
			} else if(item2._hx_index == 1) {
				var m2 = item2.m;
				var m1 = item1.m;
				return m1 == m2;
			} else {
				return false;
			}
			break;
		case 2:
			if(item2 == null) {
				return false;
			} else if(item2._hx_index == 2) {
				var item21 = item2.s;
				var file2 = item2.file;
				var line2 = item2.line;
				var col2 = item2.column;
				var col1 = item1.column;
				var line1 = item1.line;
				var file1 = item1.file;
				var item11 = item1.s;
				if(file1 == file2 && line1 == line2 && col1 == col2) {
					return haxe_CallStack.equalItems(item11,item21);
				} else {
					return false;
				}
			} else {
				return false;
			}
			break;
		case 3:
			if(item2 == null) {
				return false;
			} else if(item2._hx_index == 3) {
				var class2 = item2.classname;
				var method2 = item2.method;
				var method1 = item1.method;
				var class1 = item1.classname;
				if(class1 == class2) {
					return method1 == method2;
				} else {
					return false;
				}
			} else {
				return false;
			}
			break;
		case 4:
			if(item2 == null) {
				return false;
			} else if(item2._hx_index == 4) {
				var v2 = item2.v;
				var v1 = item1.v;
				return v1 == v2;
			} else {
				return false;
			}
			break;
		}
	}
};
haxe_CallStack.itemToString = function(b,s) {
	switch(s._hx_index) {
	case 0:
		b.b += "a C function";
		break;
	case 1:
		var m = s.m;
		b.b += "module ";
		b.b += m == null ? "null" : "" + m;
		break;
	case 2:
		var s1 = s.s;
		var file = s.file;
		var line = s.line;
		var col = s.column;
		if(s1 != null) {
			haxe_CallStack.itemToString(b,s1);
			b.b += " (";
		}
		b.b += file == null ? "null" : "" + file;
		b.b += " line ";
		b.b += line == null ? "null" : "" + line;
		if(col != null) {
			b.b += " column ";
			b.b += col == null ? "null" : "" + col;
		}
		if(s1 != null) {
			b.b += ")";
		}
		break;
	case 3:
		var cname = s.classname;
		var meth = s.method;
		b.b += Std.string(cname == null ? "<unknown>" : cname);
		b.b += ".";
		b.b += meth == null ? "null" : "" + meth;
		break;
	case 4:
		var n = s.v;
		b.b += "local function #";
		b.b += n == null ? "null" : "" + n;
		break;
	}
};
var haxe_IMap = function() { };
haxe_IMap.__name__ = "haxe.IMap";
haxe_IMap.__isInterface__ = true;
haxe_IMap.prototype = {
	get: null
	,set: null
	,keys: null
	,__class__: haxe_IMap
};
var haxe_Exception = function(message,previous,native) {
	Error.call(this,message);
	this.message = message;
	this.__previousException = previous;
	this.__nativeException = native != null ? native : this;
	this.__skipStack = 0;
	var old = Error.prepareStackTrace;
	Error.prepareStackTrace = function(e) { return e.stack; }
	if(((native) instanceof Error)) {
		this.stack = native.stack;
	} else {
		var e = null;
		if(Error.captureStackTrace) {
			Error.captureStackTrace(this,haxe_Exception);
			e = this;
		} else {
			e = new Error();
			if(typeof(e.stack) == "undefined") {
				try { throw e; } catch(_) {}
				this.__skipStack++;
			}
		}
		this.stack = e.stack;
	}
	Error.prepareStackTrace = old;
};
haxe_Exception.__name__ = "haxe.Exception";
haxe_Exception.caught = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value;
	} else if(((value) instanceof Error)) {
		return new haxe_Exception(value.message,null,value);
	} else {
		return new haxe_ValueException(value,null,value);
	}
};
haxe_Exception.thrown = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value.get_native();
	} else if(((value) instanceof Error)) {
		return value;
	} else {
		var e = new haxe_ValueException(value);
		e.__skipStack++;
		return e;
	}
};
haxe_Exception.__super__ = Error;
haxe_Exception.prototype = $extend(Error.prototype,{
	__skipStack: null
	,__nativeException: null
	,__previousException: null
	,unwrap: function() {
		return this.__nativeException;
	}
	,__shiftStack: function() {
		this.__skipStack++;
	}
	,get_native: function() {
		return this.__nativeException;
	}
	,get_stack: function() {
		var _g = this.__exceptionStack;
		if(_g == null) {
			var value = haxe_NativeStackTrace.toHaxe(haxe_NativeStackTrace.normalize(this.stack),this.__skipStack);
			this.setProperty("__exceptionStack",value);
			return value;
		} else {
			var s = _g;
			return s;
		}
	}
	,setProperty: function(name,value) {
		try {
			Object.defineProperty(this,name,{ value : value});
		} catch( _g ) {
			this[name] = value;
		}
	}
	,__class__: haxe_Exception
	,__properties__: {get_native:"get_native",get_stack:"get_stack"}
});
var haxe_Log = function() { };
haxe_Log.__name__ = "haxe.Log";
haxe_Log.formatOutput = function(v,infos) {
	var str = Std.string(v);
	if(infos == null) {
		return str;
	}
	var pstr = infos.fileName + ":" + infos.lineNumber;
	if(infos.customParams != null) {
		var _g = 0;
		var _g1 = infos.customParams;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			str += ", " + Std.string(v);
		}
	}
	return pstr + ": " + str;
};
haxe_Log.trace = function(v,infos) {
	var str = haxe_Log.formatOutput(v,infos);
	if(typeof(console) != "undefined" && console.log != null) {
		console.log(str);
	}
};
var haxe_NativeStackTrace = function() { };
haxe_NativeStackTrace.__name__ = "haxe.NativeStackTrace";
haxe_NativeStackTrace.saveStack = function(e) {
	haxe_NativeStackTrace.lastError = e;
};
haxe_NativeStackTrace.callStack = function() {
	var e = new Error("");
	var stack = haxe_NativeStackTrace.tryHaxeStack(e);
	if(typeof(stack) == "undefined") {
		try {
			throw e;
		} catch( _g ) {
		}
		stack = e.stack;
	}
	return haxe_NativeStackTrace.normalize(stack,2);
};
haxe_NativeStackTrace.exceptionStack = function() {
	return haxe_NativeStackTrace.normalize(haxe_NativeStackTrace.tryHaxeStack(haxe_NativeStackTrace.lastError));
};
haxe_NativeStackTrace.toHaxe = function(s,skip) {
	if(skip == null) {
		skip = 0;
	}
	if(s == null) {
		return [];
	} else if(typeof(s) == "string") {
		var stack = s.split("\n");
		if(stack[0] == "Error") {
			stack.shift();
		}
		var m = [];
		var _g = 0;
		var _g1 = stack.length;
		while(_g < _g1) {
			var i = _g++;
			if(skip > i) {
				continue;
			}
			var line = stack[i];
			var matched = line.match(/^    at ([A-Za-z0-9_. ]+) \(([^)]+):([0-9]+):([0-9]+)\)$/);
			if(matched != null) {
				var path = matched[1].split(".");
				if(path[0] == "$hxClasses") {
					path.shift();
				}
				var meth = path.pop();
				var file = matched[2];
				var line1 = Std.parseInt(matched[3]);
				var column = Std.parseInt(matched[4]);
				m.push(haxe_StackItem.FilePos(meth == "Anonymous function" ? haxe_StackItem.LocalFunction() : meth == "Global code" ? null : haxe_StackItem.Method(path.join("."),meth),file,line1,column));
			} else {
				m.push(haxe_StackItem.Module(StringTools.trim(line)));
			}
		}
		return m;
	} else if(skip > 0 && Array.isArray(s)) {
		return s.slice(skip);
	} else {
		return s;
	}
};
haxe_NativeStackTrace.tryHaxeStack = function(e) {
	if(e == null) {
		return [];
	}
	var oldValue = Error.prepareStackTrace;
	Error.prepareStackTrace = haxe_NativeStackTrace.prepareHxStackTrace;
	var stack = e.stack;
	Error.prepareStackTrace = oldValue;
	return stack;
};
haxe_NativeStackTrace.prepareHxStackTrace = function(e,callsites) {
	var stack = [];
	var _g = 0;
	while(_g < callsites.length) {
		var site = callsites[_g];
		++_g;
		if(haxe_NativeStackTrace.wrapCallSite != null) {
			site = haxe_NativeStackTrace.wrapCallSite(site);
		}
		var method = null;
		var fullName = site.getFunctionName();
		if(fullName != null) {
			var idx = fullName.lastIndexOf(".");
			if(idx >= 0) {
				var className = fullName.substring(0,idx);
				var methodName = fullName.substring(idx + 1);
				method = haxe_StackItem.Method(className,methodName);
			} else {
				method = haxe_StackItem.Method(null,fullName);
			}
		}
		var fileName = site.getFileName();
		var fileAddr = fileName == null ? -1 : fileName.indexOf("file:");
		if(haxe_NativeStackTrace.wrapCallSite != null && fileAddr > 0) {
			fileName = fileName.substring(fileAddr + 6);
		}
		stack.push(haxe_StackItem.FilePos(method,fileName,site.getLineNumber(),site.getColumnNumber()));
	}
	return stack;
};
haxe_NativeStackTrace.normalize = function(stack,skipItems) {
	if(skipItems == null) {
		skipItems = 0;
	}
	if(Array.isArray(stack) && skipItems > 0) {
		return stack.slice(skipItems);
	} else if(typeof(stack) == "string") {
		switch(stack.substring(0,6)) {
		case "Error\n":case "Error:":
			++skipItems;
			break;
		default:
		}
		return haxe_NativeStackTrace.skipLines(stack,skipItems);
	} else {
		return stack;
	}
};
haxe_NativeStackTrace.skipLines = function(stack,skip,pos) {
	if(pos == null) {
		pos = 0;
	}
	if(skip > 0) {
		pos = stack.indexOf("\n",pos);
		if(pos < 0) {
			return "";
		} else {
			return haxe_NativeStackTrace.skipLines(stack,--skip,pos + 1);
		}
	} else {
		return stack.substring(pos);
	}
};
var haxe_Resource = function() { };
haxe_Resource.__name__ = "haxe.Resource";
haxe_Resource.listNames = function() {
	var _g = [];
	var _g1 = 0;
	var _g2 = haxe_Resource.content;
	while(_g1 < _g2.length) {
		var x = _g2[_g1];
		++_g1;
		_g.push(x.name);
	}
	return _g;
};
haxe_Resource.getString = function(name) {
	var _g = 0;
	var _g1 = haxe_Resource.content;
	while(_g < _g1.length) {
		var x = _g1[_g];
		++_g;
		if(x.name == name) {
			if(x.str != null) {
				return x.str;
			}
			var b = haxe_crypto_Base64.decode(x.data);
			return b.toString();
		}
	}
	return null;
};
haxe_Resource.getBytes = function(name) {
	var _g = 0;
	var _g1 = haxe_Resource.content;
	while(_g < _g1.length) {
		var x = _g1[_g];
		++_g;
		if(x.name == name) {
			if(x.str != null) {
				return haxe_io_Bytes.ofString(x.str);
			}
			return haxe_crypto_Base64.decode(x.data);
		}
	}
	return null;
};
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
haxe_Timer.__name__ = "haxe.Timer";
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.prototype = {
	id: null
	,stop: function() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe_Timer
};
var haxe_ValueException = function(value,previous,native) {
	haxe_Exception.call(this,String(value),previous,native);
	this.value = value;
	this.__skipStack++;
};
haxe_ValueException.__name__ = "haxe.ValueException";
haxe_ValueException.__super__ = haxe_Exception;
haxe_ValueException.prototype = $extend(haxe_Exception.prototype,{
	value: null
	,unwrap: function() {
		return this.value;
	}
	,__class__: haxe_ValueException
});
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
haxe_io_Bytes.__name__ = "haxe.io.Bytes";
haxe_io_Bytes.ofString = function(s,encoding) {
	if(encoding == haxe_io_Encoding.RawNative) {
		var buf = new Uint8Array(s.length << 1);
		var _g = 0;
		var _g1 = s.length;
		while(_g < _g1) {
			var i = _g++;
			var c = s.charCodeAt(i);
			buf[i << 1] = c & 255;
			buf[i << 1 | 1] = c >> 8;
		}
		return new haxe_io_Bytes(buf.buffer);
	}
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = s.charCodeAt(i++);
		if(55296 <= c && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(i++) & 1023;
		}
		if(c <= 127) {
			a.push(c);
		} else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.prototype = {
	length: null
	,b: null
	,getString: function(pos,len,encoding) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(encoding == null) {
			encoding = haxe_io_Encoding.UTF8;
		}
		var s = "";
		var b = this.b;
		var i = pos;
		var max = pos + len;
		switch(encoding._hx_index) {
		case 0:
			var debug = pos > 0;
			while(i < max) {
				var c = b[i++];
				if(c < 128) {
					if(c == 0) {
						break;
					}
					s += String.fromCodePoint(c);
				} else if(c < 224) {
					var code = (c & 63) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code);
				} else if(c < 240) {
					var c2 = b[i++];
					var code1 = (c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code1);
				} else {
					var c21 = b[i++];
					var c3 = b[i++];
					var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(u);
				}
			}
			break;
		case 1:
			while(i < max) {
				var c = b[i++] | b[i++] << 8;
				s += String.fromCodePoint(c);
			}
			break;
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,__class__: haxe_io_Bytes
};
var haxe_io_Encoding = $hxEnums["haxe.io.Encoding"] = { __ename__:true,__constructs__:null
	,UTF8: {_hx_name:"UTF8",_hx_index:0,__enum__:"haxe.io.Encoding",toString:$estr}
	,RawNative: {_hx_name:"RawNative",_hx_index:1,__enum__:"haxe.io.Encoding",toString:$estr}
};
haxe_io_Encoding.__constructs__ = [haxe_io_Encoding.UTF8,haxe_io_Encoding.RawNative];
var haxe_crypto_Base64 = function() { };
haxe_crypto_Base64.__name__ = "haxe.crypto.Base64";
haxe_crypto_Base64.decode = function(str,complement) {
	if(complement == null) {
		complement = true;
	}
	if(complement) {
		while(HxOverrides.cca(str,str.length - 1) == 61) str = HxOverrides.substr(str,0,-1);
	}
	return new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).decodeBytes(haxe_io_Bytes.ofString(str));
};
var haxe_crypto_BaseCode = function(base) {
	var len = base.length;
	var nbits = 1;
	while(len > 1 << nbits) ++nbits;
	if(nbits > 8 || len != 1 << nbits) {
		throw haxe_Exception.thrown("BaseCode : base length must be a power of two.");
	}
	this.base = base;
	this.nbits = nbits;
};
haxe_crypto_BaseCode.__name__ = "haxe.crypto.BaseCode";
haxe_crypto_BaseCode.prototype = {
	base: null
	,nbits: null
	,tbl: null
	,initTable: function() {
		var tbl = [];
		var _g = 0;
		while(_g < 256) {
			var i = _g++;
			tbl[i] = -1;
		}
		var _g = 0;
		var _g1 = this.base.length;
		while(_g < _g1) {
			var i = _g++;
			tbl[this.base.b[i]] = i;
		}
		this.tbl = tbl;
	}
	,decodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		if(this.tbl == null) {
			this.initTable();
		}
		var tbl = this.tbl;
		var size = b.length * nbits >> 3;
		var out = new haxe_io_Bytes(new ArrayBuffer(size));
		var buf = 0;
		var curbits = 0;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < 8) {
				curbits += nbits;
				buf <<= nbits;
				var i = tbl[b.b[pin++]];
				if(i == -1) {
					throw haxe_Exception.thrown("BaseCode : invalid encoded char");
				}
				buf |= i;
			}
			curbits -= 8;
			out.b[pout++] = buf >> curbits & 255;
		}
		return out;
	}
	,__class__: haxe_crypto_BaseCode
};
var haxe_ds_Either = $hxEnums["haxe.ds.Either"] = { __ename__:true,__constructs__:null
	,Left: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"haxe.ds.Either",toString:$estr}; },$_._hx_name="Left",$_.__params__ = ["v"],$_)
	,Right: ($_=function(v) { return {_hx_index:1,v:v,__enum__:"haxe.ds.Either",toString:$estr}; },$_._hx_name="Right",$_.__params__ = ["v"],$_)
};
haxe_ds_Either.__constructs__ = [haxe_ds_Either.Left,haxe_ds_Either.Right];
var haxe_ds_IntMap = function() {
	this.h = { };
};
haxe_ds_IntMap.__name__ = "haxe.ds.IntMap";
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	h: null
	,set: function(key,value) {
		this.h[key] = value;
	}
	,get: function(key) {
		return this.h[key];
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) if(this.h.hasOwnProperty(key)) a.push(key | 0);
		return new haxe_iterators_ArrayIterator(a);
	}
	,__class__: haxe_ds_IntMap
};
var haxe_ds_List = function() {
	this.length = 0;
};
haxe_ds_List.__name__ = "haxe.ds.List";
haxe_ds_List.prototype = {
	h: null
	,q: null
	,length: null
	,add: function(item) {
		var x = new haxe_ds__$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,iterator: function() {
		return new haxe_ds__$List_ListIterator(this.h);
	}
	,__class__: haxe_ds_List
};
var haxe_ds__$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
haxe_ds__$List_ListNode.__name__ = "haxe.ds._List.ListNode";
haxe_ds__$List_ListNode.prototype = {
	item: null
	,next: null
	,__class__: haxe_ds__$List_ListNode
};
var haxe_ds__$List_ListIterator = function(head) {
	this.head = head;
};
haxe_ds__$List_ListIterator.__name__ = "haxe.ds._List.ListIterator";
haxe_ds__$List_ListIterator.prototype = {
	head: null
	,hasNext: function() {
		return this.head != null;
	}
	,next: function() {
		var val = this.head.item;
		this.head = this.head.next;
		return val;
	}
	,__class__: haxe_ds__$List_ListIterator
};
var haxe_ds_ObjectMap = function() {
	this.h = { __keys__ : { }};
};
haxe_ds_ObjectMap.__name__ = "haxe.ds.ObjectMap";
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.prototype = {
	h: null
	,set: function(key,value) {
		var id = key.__id__;
		if(id == null) {
			id = (key.__id__ = $global.$haxeUID++);
		}
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,get: function(key) {
		return this.h[key.__id__];
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) {
			a.push(this.h.__keys__[key]);
		}
		}
		return new haxe_iterators_ArrayIterator(a);
	}
	,__class__: haxe_ds_ObjectMap
};
var haxe_ds_Option = $hxEnums["haxe.ds.Option"] = { __ename__:true,__constructs__:null
	,Some: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"haxe.ds.Option",toString:$estr}; },$_._hx_name="Some",$_.__params__ = ["v"],$_)
	,None: {_hx_name:"None",_hx_index:1,__enum__:"haxe.ds.Option",toString:$estr}
};
haxe_ds_Option.__constructs__ = [haxe_ds_Option.Some,haxe_ds_Option.None];
var haxe_ds_StringMap = function() {
	this.h = Object.create(null);
};
haxe_ds_StringMap.__name__ = "haxe.ds.StringMap";
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	h: null
	,get: function(key) {
		return this.h[key];
	}
	,set: function(key,value) {
		this.h[key] = value;
	}
	,keys: function() {
		return new haxe_ds__$StringMap_StringMapKeyIterator(this.h);
	}
	,__class__: haxe_ds_StringMap
};
var haxe_ds__$StringMap_StringMapKeyIterator = function(h) {
	this.h = h;
	this.keys = Object.keys(h);
	this.length = this.keys.length;
	this.current = 0;
};
haxe_ds__$StringMap_StringMapKeyIterator.__name__ = "haxe.ds._StringMap.StringMapKeyIterator";
haxe_ds__$StringMap_StringMapKeyIterator.prototype = {
	h: null
	,keys: null
	,length: null
	,current: null
	,hasNext: function() {
		return this.current < this.length;
	}
	,next: function() {
		return this.keys[this.current++];
	}
	,__class__: haxe_ds__$StringMap_StringMapKeyIterator
};
var haxe_io_Error = $hxEnums["haxe.io.Error"] = { __ename__:true,__constructs__:null
	,Blocked: {_hx_name:"Blocked",_hx_index:0,__enum__:"haxe.io.Error",toString:$estr}
	,Overflow: {_hx_name:"Overflow",_hx_index:1,__enum__:"haxe.io.Error",toString:$estr}
	,OutsideBounds: {_hx_name:"OutsideBounds",_hx_index:2,__enum__:"haxe.io.Error",toString:$estr}
	,Custom: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"haxe.io.Error",toString:$estr}; },$_._hx_name="Custom",$_.__params__ = ["e"],$_)
};
haxe_io_Error.__constructs__ = [haxe_io_Error.Blocked,haxe_io_Error.Overflow,haxe_io_Error.OutsideBounds,haxe_io_Error.Custom];
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
haxe_iterators_ArrayIterator.__name__ = "haxe.iterators.ArrayIterator";
haxe_iterators_ArrayIterator.prototype = {
	array: null
	,current: null
	,hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
	,__class__: haxe_iterators_ArrayIterator
};
var haxe_unit_TestCase = function() {
};
haxe_unit_TestCase.__name__ = "haxe.unit.TestCase";
haxe_unit_TestCase.prototype = {
	currentTest: null
	,setup: function() {
	}
	,tearDown: function() {
	}
	,print: function(v) {
		haxe_unit_TestRunner.print(v);
	}
	,assertTrue: function(b,c) {
		this.currentTest.done = true;
		if(b != true) {
			this.currentTest.success = false;
			this.currentTest.error = "expected true but was false";
			this.currentTest.posInfos = c;
			throw haxe_Exception.thrown(this.currentTest);
		}
	}
	,assertFalse: function(b,c) {
		this.currentTest.done = true;
		if(b == true) {
			this.currentTest.success = false;
			this.currentTest.error = "expected false but was true";
			this.currentTest.posInfos = c;
			throw haxe_Exception.thrown(this.currentTest);
		}
	}
	,assertEquals: function(expected,actual,c) {
		this.currentTest.done = true;
		if(actual != expected) {
			this.currentTest.success = false;
			this.currentTest.error = "expected '" + Std.string(expected) + "' but was '" + Std.string(actual) + "'";
			this.currentTest.posInfos = c;
			throw haxe_Exception.thrown(this.currentTest);
		}
	}
	,__class__: haxe_unit_TestCase
};
var haxe_unit_TestResult = function() {
	this.m_tests = new haxe_ds_List();
	this.success = true;
};
haxe_unit_TestResult.__name__ = "haxe.unit.TestResult";
haxe_unit_TestResult.prototype = {
	m_tests: null
	,success: null
	,add: function(t) {
		this.m_tests.add(t);
		if(!t.success) {
			this.success = false;
		}
	}
	,toString: function() {
		var buf_b = "";
		var failures = 0;
		var _g_head = this.m_tests.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var test = val;
			if(test.success == false) {
				buf_b += "* ";
				buf_b += Std.string(test.classname);
				buf_b += "::";
				buf_b += Std.string(test.method);
				buf_b += "()";
				buf_b += "\n";
				buf_b += "ERR: ";
				if(test.posInfos != null) {
					buf_b += Std.string(test.posInfos.fileName);
					buf_b += ":";
					buf_b += Std.string(test.posInfos.lineNumber);
					buf_b += "(";
					buf_b += Std.string(test.posInfos.className);
					buf_b += ".";
					buf_b += Std.string(test.posInfos.methodName);
					buf_b += ") - ";
				}
				buf_b += Std.string(test.error);
				buf_b += "\n";
				if(test.backtrace != null) {
					buf_b += Std.string(test.backtrace);
					buf_b += "\n";
				}
				buf_b += "\n";
				++failures;
			}
		}
		buf_b += "\n";
		if(failures == 0) {
			buf_b += "OK ";
		} else {
			buf_b += "FAILED ";
		}
		buf_b += Std.string(this.m_tests.length);
		buf_b += " tests, ";
		buf_b += failures == null ? "null" : "" + failures;
		buf_b += " failed, ";
		buf_b += Std.string(this.m_tests.length - failures);
		buf_b += " success";
		buf_b += "\n";
		return buf_b;
	}
	,__class__: haxe_unit_TestResult
};
var haxe_unit_TestRunner = function() {
	this.result = new haxe_unit_TestResult();
	this.cases = new haxe_ds_List();
};
haxe_unit_TestRunner.__name__ = "haxe.unit.TestRunner";
haxe_unit_TestRunner.print = function(v) {
	var msg = js_Boot.__string_rec(v,"");
	var d;
	var tmp;
	if(typeof(document) != "undefined") {
		d = document.getElementById("haxe:trace");
		tmp = d != null;
	} else {
		tmp = false;
	}
	if(tmp) {
		msg = StringTools.htmlEscape(msg).split("\n").join("<br/>");
		d.innerHTML += msg + "<br/>";
	} else if(typeof process != "undefined" && process.stdout != null && process.stdout.write != null) {
		process.stdout.write(msg);
	} else if(typeof console != "undefined" && console.log != null) {
		console.log(msg);
	}
};
haxe_unit_TestRunner.customTrace = function(v,p) {
	haxe_unit_TestRunner.print(p.fileName + ":" + p.lineNumber + ": " + Std.string(v) + "\n");
};
haxe_unit_TestRunner.prototype = {
	result: null
	,cases: null
	,add: function(c) {
		this.cases.add(c);
	}
	,run: function() {
		this.result = new haxe_unit_TestResult();
		var _g_head = this.cases.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var c = val;
			this.runCase(c);
		}
		haxe_unit_TestRunner.print(this.result.toString());
		return this.result.success;
	}
	,runCase: function(t) {
		var old = haxe_Log.trace;
		haxe_Log.trace = haxe_unit_TestRunner.customTrace;
		var cl = js_Boot.getClass(t);
		var fields = Type.getInstanceFields(cl);
		haxe_unit_TestRunner.print("Class: " + cl.__name__ + " ");
		var _g = 0;
		while(_g < fields.length) {
			var f = fields[_g];
			++_g;
			var fname = f;
			var field = Reflect.field(t,f);
			if(StringTools.startsWith(fname,"test") && Reflect.isFunction(field)) {
				t.currentTest = new haxe_unit_TestStatus();
				t.currentTest.classname = cl.__name__;
				t.currentTest.method = fname;
				t.setup();
				try {
					field.apply(t,[]);
					if(t.currentTest.done) {
						t.currentTest.success = true;
						haxe_unit_TestRunner.print(".");
					} else {
						t.currentTest.success = false;
						t.currentTest.error = "(warning) no assert";
						haxe_unit_TestRunner.print("W");
					}
				} catch( _g1 ) {
					haxe_NativeStackTrace.lastError = _g1;
					var _g2 = haxe_Exception.caught(_g1).unwrap();
					if(((_g2) instanceof haxe_unit_TestStatus)) {
						haxe_unit_TestRunner.print("F");
						var tmp = haxe_CallStack.exceptionStack();
						t.currentTest.backtrace = haxe_CallStack.toString(tmp);
					} else {
						var e = _g2;
						haxe_unit_TestRunner.print("E");
						if(e.message != null) {
							t.currentTest.error = "exception thrown : " + Std.string(e) + " [" + Std.string(e.message) + "]";
						} else {
							t.currentTest.error = "exception thrown : " + Std.string(e);
						}
						var tmp1 = haxe_CallStack.exceptionStack();
						t.currentTest.backtrace = haxe_CallStack.toString(tmp1);
					}
				}
				this.result.add(t.currentTest);
				t.tearDown();
			}
		}
		haxe_unit_TestRunner.print("\n");
		haxe_Log.trace = old;
	}
	,__class__: haxe_unit_TestRunner
};
var haxe_unit_TestStatus = function() {
	this.done = false;
	this.success = false;
};
haxe_unit_TestStatus.__name__ = "haxe.unit.TestStatus";
haxe_unit_TestStatus.prototype = {
	done: null
	,success: null
	,error: null
	,method: null
	,classname: null
	,posInfos: null
	,backtrace: null
	,__class__: haxe_unit_TestStatus
};
var js_Boot = function() { };
js_Boot.__name__ = "js.Boot";
js_Boot.getClass = function(o) {
	if(o == null) {
		return null;
	} else if(((o) instanceof Array)) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var con = e.__constructs__[o._hx_index];
			var n = con._hx_name;
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g = 0;
		var _g1 = intf.length;
		while(_g < _g1) {
			var i = _g++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		return ((o) instanceof Array);
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return o != null;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return ((o | 0) === o);
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(js_Boot.__downcastCheck(o,cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(((o) instanceof cl)) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ != null ? $hxEnums[o.__enum__] == cl : false;
	}
};
js_Boot.__downcastCheck = function(o,cl) {
	if(!((o) instanceof cl)) {
		if(cl.__isInterface__) {
			return js_Boot.__interfLoop(js_Boot.getClass(o),cl);
		} else {
			return false;
		}
	} else {
		return true;
	}
};
js_Boot.__implements = function(o,iface) {
	return js_Boot.__interfLoop(js_Boot.getClass(o),iface);
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_node_stream_WritableNewOptionsAdapter = {};
js_node_stream_WritableNewOptionsAdapter.from = function(options) {
	if(!Object.prototype.hasOwnProperty.call(options,"final")) {
		Object.defineProperty(options,"final",{ get : function() {
			return options.final_;
		}});
	}
	return options;
};
var js_node_url_URLSearchParamsEntry = {};
js_node_url_URLSearchParamsEntry.__properties__ = {get_value:"get_value",get_name:"get_name"};
js_node_url_URLSearchParamsEntry._new = function(name,value) {
	var this1 = [name,value];
	return this1;
};
js_node_url_URLSearchParamsEntry.get_name = function(this1) {
	return this1[0];
};
js_node_url_URLSearchParamsEntry.get_value = function(this1) {
	return this1[1];
};
var stx_Tup2 = $hxEnums["stx.Tup2"] = { __ename__:true,__constructs__:null
	,tuple2: ($_=function(l,r) { return {_hx_index:0,l:l,r:r,__enum__:"stx.Tup2",toString:$estr}; },$_._hx_name="tuple2",$_.__params__ = ["l","r"],$_)
};
stx_Tup2.__constructs__ = [stx_Tup2.tuple2];
var stx_Tup3 = $hxEnums["stx.Tup3"] = { __ename__:true,__constructs__:null
	,tuple3: ($_=function(tI,tII,tIII) { return {_hx_index:0,tI:tI,tII:tII,tIII:tIII,__enum__:"stx.Tup3",toString:$estr}; },$_._hx_name="tuple3",$_.__params__ = ["tI","tII","tIII"],$_)
};
stx_Tup3.__constructs__ = [stx_Tup3.tuple3];
var stx_LiftPos = function() { };
stx_LiftPos.__name__ = "stx.LiftPos";
stx_LiftPos.lift = function(pos) {
	return stx_nano_Position._new(pos);
};
var stx_LiftFutureToSlot = function() { };
stx_LiftFutureToSlot.__name__ = "stx.LiftFutureToSlot";
stx_LiftFutureToSlot.toSlot = function(ft,pos) {
	return stx_nano_Slot.Guard(ft,pos);
};
var stx_LiftLazyFutureToSlot = function() { };
stx_LiftLazyFutureToSlot.__name__ = "stx.LiftLazyFutureToSlot";
stx_LiftLazyFutureToSlot.toSlot = function(fn) {
	return stx_nano_Slot.Guard(fn(),{ fileName : "stx/Nano.hx", lineNumber : 89, className : "stx.LiftLazyFutureToSlot", methodName : "toSlot"});
};
var stx_fail_AuctionFailure = $hxEnums["stx.fail.AuctionFailure"] = { __ename__:true,__constructs__:null
	,E_AuctionFailed: ($_=function(str) { return {_hx_index:0,str:str,__enum__:"stx.fail.AuctionFailure",toString:$estr}; },$_._hx_name="E_AuctionFailed",$_.__params__ = ["str"],$_)
	,E_AuctionEnded: {_hx_name:"E_AuctionEnded",_hx_index:1,__enum__:"stx.fail.AuctionFailure",toString:$estr}
	,E_NoSuchAuction: {_hx_name:"E_NoSuchAuction",_hx_index:2,__enum__:"stx.fail.AuctionFailure",toString:$estr}
	,E_Golgi_Error: ($_=function(error) { return {_hx_index:3,error:error,__enum__:"stx.fail.AuctionFailure",toString:$estr}; },$_._hx_name="E_Golgi_Error",$_.__params__ = ["error"],$_)
};
stx_fail_AuctionFailure.__constructs__ = [stx_fail_AuctionFailure.E_AuctionFailed,stx_fail_AuctionFailure.E_AuctionEnded,stx_fail_AuctionFailure.E_NoSuchAuction,stx_fail_AuctionFailure.E_Golgi_Error];
var stx_lift_ArrayLift = function() { };
stx_lift_ArrayLift.__name__ = "stx.lift.ArrayLift";
stx_lift_ArrayLift.flatten = function(arrs) {
	var res = [];
	var _g = 0;
	while(_g < arrs.length) {
		var arr = arrs[_g];
		++_g;
		var _g1 = 0;
		while(_g1 < arr.length) {
			var e = arr[_g1];
			++_g1;
			res.push(e);
		}
	}
	return res;
};
stx_lift_ArrayLift.interleave = function(alls) {
	var res = [];
	if(alls.length > 0) {
		var minLength = alls[0].length;
		var _g = 0;
		while(_g < alls.length) {
			var e = alls[_g];
			++_g;
			minLength = Math.min(minLength,e.length) | 0;
		}
		var length = minLength;
		var i = 0;
		while(i < length) {
			var _g = 0;
			while(_g < alls.length) {
				var arr = alls[_g];
				++_g;
				res.push(arr[i]);
			}
			++i;
		}
	}
	return res;
};
stx_lift_ArrayLift.is_defined = function(self) {
	return self.length > 0;
};
stx_lift_ArrayLift.cons = function(self,t) {
	var copy = stx_lift_ArrayLift.copy(self);
	copy.unshift(t);
	return copy;
};
stx_lift_ArrayLift.snoc = function(self,t) {
	var copy = stx_lift_ArrayLift.copy(self);
	copy.push(t);
	return copy;
};
stx_lift_ArrayLift.set = function(self,i,v) {
	var arr0 = self.slice();
	arr0[i] = v;
	return arr0;
};
stx_lift_ArrayLift.get = function(self,i) {
	return self[i];
};
stx_lift_ArrayLift.head = function(self) {
	if(self.length == 0) {
		return haxe_ds_Option.None;
	} else if(self[0] == null) {
		return haxe_ds_Option.None;
	} else {
		return haxe_ds_Option.Some(self[0]);
	}
};
stx_lift_ArrayLift.tail = function(self) {
	return self.slice(1);
};
stx_lift_ArrayLift.last = function(self) {
	var v = self[self.length > 0 ? self.length - 1 : 0];
	if(v == null) {
		return haxe_ds_Option.None;
	} else {
		return haxe_ds_Option.Some(v);
	}
};
stx_lift_ArrayLift.copy = function(self) {
	return [].concat(self);
};
stx_lift_ArrayLift.concat = function(self,that) {
	var acc = stx_lift_ArrayLift.copy(self);
	var _g = 0;
	while(_g < self.length) {
		var e = self[_g];
		++_g;
		acc.push(e);
	}
	return acc;
};
stx_lift_ArrayLift.bind_fold = function(self,pure,init,bind,fold) {
	return stx_lift_ArrayLift.lfold(self,function(next,memo) {
		return bind(memo,function(b) {
			return pure(fold(next,b));
		});
	},pure(init));
};
stx_lift_ArrayLift.reduce = function(self,unit,pure,plus) {
	return stx_lift_ArrayLift.lfold(self,function(next,memo) {
		return plus(memo,pure(next));
	},unit());
};
stx_lift_ArrayLift.map = function(self,fn) {
	var n = [];
	var _g = 0;
	while(_g < self.length) {
		var e = self[_g];
		++_g;
		n.push(fn(e));
	}
	return n;
};
stx_lift_ArrayLift.mapi = function(self,fn) {
	var n = [];
	var e = null;
	var _g = 0;
	var _g1 = self.length;
	while(_g < _g1) {
		var i = _g++;
		e = self[i];
		n.push(fn(i,e));
	}
	return n;
};
stx_lift_ArrayLift.flat_map = function(self,fn) {
	var n = [];
	var _g = 0;
	while(_g < self.length) {
		var e1 = self[_g];
		++_g;
		var e2 = $getIterator(fn(e1));
		while(e2.hasNext()) {
			var e21 = e2.next();
			n.push(e21);
		}
	}
	return n;
};
stx_lift_ArrayLift.lfold = function(self,fn,memo) {
	var r = memo;
	var _g = 0;
	while(_g < self.length) {
		var e = self[_g];
		++_g;
		r = fn(e,r);
	}
	return r;
};
stx_lift_ArrayLift.lfold1 = function(self,fn) {
	var folded = stx_lift_ArrayLift.head(self);
	var tail = stx_lift_ArrayLift.tail(self);
	return stx_pico_OptionLift.map(folded,function(memo) {
		var _g = 0;
		while(_g < tail.length) {
			var item = tail[_g];
			++_g;
			memo = fn(memo,item);
		}
		return memo;
	});
};
stx_lift_ArrayLift.rfold = function(self,fn,z) {
	var r = z;
	var _g = 0;
	var _g1 = self.length;
	while(_g < _g1) {
		var i = _g++;
		var e = self[self.length - 1 - i];
		r = fn(e,r);
	}
	return r;
};
stx_lift_ArrayLift.rfold1 = function(self,fn) {
	return stx_lift_ArrayLift.lfold1(stx_lift_ArrayLift.lfold(self,function(b,a) {
		a.unshift(b);
		return a;
	},[]),fn);
};
stx_lift_ArrayLift.lscan = function(self,f,init) {
	var accum = init;
	var result = [init];
	var _g = 0;
	while(_g < self.length) {
		var e = self[_g];
		++_g;
		result.push(f(e,accum));
	}
	return result;
};
stx_lift_ArrayLift.lscan1 = function(self,f) {
	var result = [];
	if(0 == self.length) {
		return result;
	}
	var accum = self[0];
	result.push(accum);
	var _g = 1;
	var _g1 = self.length;
	while(_g < _g1) {
		var i = _g++;
		result.push(f(self[i],accum));
	}
	return result;
};
stx_lift_ArrayLift.rscan = function(self,init,f) {
	var a = self.slice();
	a.reverse();
	return stx_lift_ArrayLift.lscan(a,f,init);
};
stx_lift_ArrayLift.rscan1 = function(self,f) {
	var a = self.slice();
	a.reverse();
	return stx_lift_ArrayLift.lscan1(a,f);
};
stx_lift_ArrayLift.filter = function(self,fn) {
	var n = [];
	var _g = 0;
	while(_g < self.length) {
		var e = self[_g];
		++_g;
		if(fn(e)) {
			n.push(e);
		}
	}
	return n;
};
stx_lift_ArrayLift.map_filter = function(self,fn) {
	return stx_lift_ArrayLift.lfold(self,function(next,memo) {
		var _g = fn(next);
		if(_g._hx_index == 0) {
			var v = _g.v;
			return stx_lift_ArrayLift.snoc(memo,v);
		} else {
			return memo;
		}
	},[]);
};
stx_lift_ArrayLift.whilst = function(self,fn) {
	var r = [];
	var _g = 0;
	while(_g < self.length) {
		var e = self[_g];
		++_g;
		if(fn(e)) {
			r.push(e);
		} else {
			break;
		}
	}
	return r;
};
stx_lift_ArrayLift.ltaken = function(self,n) {
	return self.slice(0,Math.min(n,self.length) | 0);
};
stx_lift_ArrayLift.ldropn = function(self,n) {
	if(n >= self.length) {
		return [];
	} else {
		return self.slice(n);
	}
};
stx_lift_ArrayLift.rdropn = function(self,n) {
	if(self != null && n >= self.length) {
		return [];
	} else {
		return self.splice(0,self.length - n);
	}
};
stx_lift_ArrayLift.ldrop = function(self,p) {
	var r = [].concat(self);
	var _g = 0;
	while(_g < self.length) {
		var e = self[_g];
		++_g;
		if(p(e)) {
			r.shift();
		} else {
			break;
		}
	}
	return r;
};
stx_lift_ArrayLift.search = function(self,fn) {
	var out = haxe_ds_Option.None;
	var _g = 0;
	while(_g < self.length) {
		var el = self[_g];
		++_g;
		if(fn(el)) {
			out = haxe_ds_Option.Some(el);
			break;
		}
	}
	return out;
};
stx_lift_ArrayLift.all = function(self,fn) {
	return stx_lift_ArrayLift.lfold(self,function(b,a) {
		if(a) {
			return fn(b);
		} else {
			return false;
		}
	},true);
};
stx_lift_ArrayLift.any = function(self,fn) {
	return stx_lift_ArrayLift.lfold(self,function(b,a) {
		if(a) {
			return true;
		} else {
			return fn(b);
		}
	},false);
};
stx_lift_ArrayLift.zip_with = function(self,that,fn) {
	var next = [];
	var lower = Math.min(self.length,that.length) | 0;
	var _g = 0;
	var _g1 = lower;
	while(_g < _g1) {
		var i = _g++;
		next.push(fn(self[i],that[i]));
	}
	return next;
};
stx_lift_ArrayLift.cross_with = function(self,that,fn) {
	var r = [];
	var _g = 0;
	while(_g < self.length) {
		var va = self[_g];
		++_g;
		var _g1 = 0;
		while(_g1 < that.length) {
			var vb = that[_g1];
			++_g1;
			r.push(fn(va,vb));
		}
	}
	return r;
};
stx_lift_ArrayLift.difference_with = function(self,that,eq) {
	var res = [];
	var _g = 0;
	while(_g < self.length) {
		var e = [self[_g]];
		++_g;
		if(!stx_lift_ArrayLift.any(that,(function(e) {
			return function(x) {
				return eq(x,e[0]);
			};
		})(e))) {
			res.push(e[0]);
		}
	}
	return res;
};
stx_lift_ArrayLift.union_with = function(self,that,eq) {
	var res = [];
	var _g = 0;
	while(_g < self.length) {
		var e = self[_g];
		++_g;
		res.push(e);
	}
	var _g = 0;
	while(_g < that.length) {
		var e = [that[_g]];
		++_g;
		if(!stx_lift_ArrayLift.any(res,(function(e) {
			return function(x) {
				return eq(x,e[0]);
			};
		})(e))) {
			res.push(e[0]);
		}
	}
	return res;
};
stx_lift_ArrayLift.unique_with = function(self,eq) {
	var r = [];
	var _g = 0;
	while(_g < self.length) {
		var e = self[_g];
		++_g;
		var exists = stx_lift_ArrayLift.any(r,(function(_g,a1) {
			return function(a2) {
				return _g[0](a1[0],a2);
			};
		})([eq],[e]));
		var val = stx_lift_ArrayLift.search(r,(function(_g,a1) {
			return function(a2) {
				return _g[0](a1[0],a2);
			};
		})([eq],[e]));
		if(!exists) {
			r.push(e);
		}
	}
	return r;
};
stx_lift_ArrayLift.nub_with = function(self,f) {
	return stx_lift_ArrayLift.lfold(self,function(b,a) {
		var _g = f;
		var a1 = b;
		if(stx_lift_ArrayLift.any(a,function(a2) {
			return _g(a1,a2);
		})) {
			return a;
		} else {
			return stx_lift_ArrayLift.snoc(a,b);
		}
	},[]);
};
stx_lift_ArrayLift.intersect_with = function(self,that,f) {
	return stx_lift_ArrayLift.lfold(self,function(next,memo) {
		var _g = f;
		var a1 = next;
		var _g1 = function(a2) {
			return _g(a1,a2);
		};
		if(stx_lift_ArrayLift.any(that,_g1) == true) {
			return stx_lift_ArrayLift.snoc(memo,next);
		} else {
			return memo;
		}
	},[]);
};
stx_lift_ArrayLift.reversed = function(self) {
	return stx_lift_ArrayLift.lfold(self,function(b,a) {
		a.unshift(b);
		return a;
	},[]);
};
stx_lift_ArrayLift.count = function(self,f) {
	return stx_lift_ArrayLift.lfold(self,function(b,a) {
		return a + (f(b) ? 1 : 0);
	},0);
};
stx_lift_ArrayLift.size = function(self) {
	return self.length;
};
stx_lift_ArrayLift.index_of = function(self,t) {
	var index = 0;
	var ok = false;
	var _g = 0;
	while(_g < self.length) {
		var e = self[_g];
		++_g;
		if(t(e)) {
			ok = true;
			break;
		}
		++index;
	}
	if(ok) {
		return index;
	} else {
		return -1;
	}
};
stx_lift_ArrayLift.has = function(self,obj) {
	var index = self.indexOf(obj);
	if(index == -1) {
		return haxe_ds_Option.None;
	} else {
		return haxe_ds_Option.Some(index);
	}
};
stx_lift_ArrayLift.partition = function(self,f) {
	return stx_lift_ArrayLift.lfold(self,function(next,memo) {
		if(f(next)) {
			memo.a.push(next);
		} else {
			memo.b.push(next);
		}
		return memo;
	},{ a : [], b : []});
};
stx_lift_ArrayLift.chunk = function(self,size) {
	var slices = [];
	var rest = 0;
	var _g = 0;
	while(_g < size.length) {
		var n = size[_g];
		++_g;
		var next = rest + n;
		var slice = self.slice(rest,next);
		slices.push(slice);
		rest = next;
	}
	return slices;
};
stx_lift_ArrayLift.pad = function(self,len,val) {
	var len0 = len - self.length;
	var arr0 = [];
	var _g = 0;
	var _g1 = len0;
	while(_g < _g1) {
		var i = _g++;
		arr0.push(val);
	}
	return self.concat(arr0);
};
stx_lift_ArrayLift.fill = function(self,def) {
	var result = new Array(self.length);
	var _g = 0;
	var _g1 = self.length;
	while(_g < _g1) {
		var i = _g++;
		var x = self[i];
		result[i] = x == null ? def : x;
	}
	return result;
};
stx_lift_ArrayLift.toIterable = function(self) {
	return self;
};
stx_lift_ArrayLift.toMap = function(self) {
	var mp = new haxe_ds_StringMap();
	var _g = 0;
	while(_g < self.length) {
		var tp = self[_g];
		++_g;
		var val = tp();
		mp.h[val.a] = val.b;
	}
	return mp;
};
stx_lift_ArrayLift.random = function(self) {
	var len = self.length;
	var ind = Math.round(Math.random() * (len - 1));
	return self[ind];
};
stx_lift_ArrayLift.shuffle = function(self) {
	var res = [];
	var cp = self.slice();
	while(cp.length > 0) {
		var randArray = Math.floor(Math.random() * cp.length);
		res.push(cp.splice(randArray,1)[0]);
	}
	return res;
};
stx_lift_ArrayLift.and_with = function(self,that,eq) {
	return stx_lift_ArrayLift.lfold(stx_lift_ArrayLift.zip_with(self,that,function(l,r) {
		return { a : l, b : r};
	}),function(next,memo) {
		if(memo) {
			if(eq(next.a,next.b)) {
				return eq(next.a,next.b);
			} else {
				return false;
			}
		} else {
			return memo;
		}
	},true);
};
stx_lift_ArrayLift.rotate = function(self,num) {
	num %= self.length;
	var l = stx_lift_ArrayLift.ltaken(self,num);
	var r = stx_lift_ArrayLift.ldropn(self,num);
	if(num < 0) {
		return stx_lift_ArrayLift.concat(l,r);
	} else if(num > 1) {
		return stx_lift_ArrayLift.concat(l,r);
	} else {
		return self;
	}
};
stx_lift_ArrayLift.iterator = function(self) {
	return new haxe_iterators_ArrayIterator(self);
};
stx_lift_ArrayLift.elide = function(self) {
	return stx_lift_ArrayLift.map(self,function(v) {
		return v;
	});
};
stx_lift_ArrayLift.prj = function(self) {
	return self;
};
var stx_nano_CoupleLift = function() { };
stx_nano_CoupleLift.__name__ = "stx.nano.CoupleLift";
stx_nano_CoupleLift.map = function(self,fn) {
	return function(tp) {
		self(function(ti,tii) {
			tp(ti,fn(tii));
		});
	};
};
stx_nano_CoupleLift.mapl = function(self,fn) {
	return function(tp) {
		self(function(ti,tii) {
			tp(fn(ti),tii);
		});
	};
};
stx_nano_CoupleLift.mapr = function(self,fn) {
	return stx_nano_CoupleLift.map(self,fn);
};
stx_nano_CoupleLift.fst = function(self) {
	return stx_nano_CoupleLift.decouple(self,function(tI,_) {
		return tI;
	});
};
stx_nano_CoupleLift.snd = function(self) {
	return stx_nano_CoupleLift.decouple(self,function(_,tII) {
		return tII;
	});
};
stx_nano_CoupleLift.swap = function(self) {
	return function(tp) {
		self(function(ti,tii) {
			tp(tii,ti);
		});
	};
};
stx_nano_CoupleLift.equals = function(lhs,rhs) {
	return stx_nano_CoupleLift.decouple(lhs,function(t0l,t0r) {
		return stx_nano_CoupleLift.decouple(rhs,function(t1l,t1r) {
			if(t0l == t1l) {
				return t0r == t1r;
			} else {
				return false;
			}
		});
	});
};
stx_nano_CoupleLift.reduce = function(self,flhs,frhs,plus) {
	return stx_nano_CoupleLift.decouple(self,function(tI,tII) {
		return plus(flhs(tI),frhs(tII));
	});
};
stx_nano_CoupleLift.decouple = function(self,fn) {
	var out = null;
	self(function(ti,tii) {
		out = fn(ti,tii);
	});
	return out;
};
stx_nano_CoupleLift.cat = function(self) {
	return stx_nano_CoupleLift.decouple(self,function(l,r) {
		return [haxe_ds_Either.Left(l),haxe_ds_Either.Right(r)];
	});
};
stx_nano_CoupleLift.tup = function(self) {
	return stx_nano_CoupleLift.decouple(self,stx_Tup2.tuple2);
};
stx_nano_CoupleLift.toString = function(self) {
	return stx_nano_CoupleLift.decouple(self,function(l,r) {
		return "(" + Std.string(l) + " " + Std.string(r) + ")";
	});
};
var stx_nano_Couple = {};
stx_nano_Couple.toString = function(this1) {
	return stx_nano_CoupleLift.toString(this1);
};
var stx_nano_Defect = {};
stx_nano_Defect.unit = function() {
	return [];
};
stx_nano_Defect.pure = function(e) {
	return [e];
};
stx_nano_Defect.toErr = function(this1) {
	return stx_nano_Err.grow(this1,{ fileName : "stx/nano/Defect.hx", lineNumber : 11, className : "stx.nano._Defect.Defect_Impl_", methodName : "toErr"});
};
stx_nano_Defect.elide = function(this1) {
	return this1;
};
stx_nano_Defect.entype = function(this1) {
	return this1;
};
stx_nano_Defect.concat = function(this1,that) {
	return this1.concat(that);
};
var stx_nano_Err = function(data,prev,pos) {
	this.data = data;
	var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,prev);
	var tmp;
	if(self._hx_index == 0) {
		var v = self.v;
		tmp = v;
	} else {
		tmp = haxe_ds_Option.None;
	}
	this.prev = tmp;
	this.pos = pos;
};
stx_nano_Err.__name__ = "stx.nano.Err";
stx_nano_Err.fromTinkError = function(err) {
	return new stx_nano_Err(stx_pico_Option.fromNullT(stx_nano_FailureSum.ERR(stx_nano_FailCode.fromString(err.message))),null,err.pos);
};
stx_nano_Err.grow = function(arr,pos) {
	return stx_lift_ArrayLift.lfold(stx_lift_ArrayLift.tail(arr),function(next,memo) {
		return new stx_nano_Err(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,stx_nano_FailureSum.ERR_OF(next)),haxe_ds_Option.Some(memo),pos);
	},new stx_nano_Err(stx_pico_OptionLift.map(stx_lift_ArrayLift.head(arr),stx_nano_FailureSum.ERR_OF),haxe_ds_Option.None,pos));
};
stx_nano_Err.prototype = {
	uuid: null
	,get_uuid: function() {
		return stx_nano_Err.UUID;
	}
	,prev: null
	,data: null
	,pos: null
	,errate: function(fn) {
		return this.map(fn);
	}
	,map: function(fn) {
		var next_data = stx_pico_OptionLift.map(this.data,function(t) {
			switch(t._hx_index) {
			case 0:
				var t1 = t.v;
				return stx_nano_FailureSum.ERR_OF(fn(t1));
			case 1:
				var spec = t.spec;
				return stx_nano_FailureSum.ERR(spec);
			}
		});
		var next_prev;
		var _g = this.prev;
		if(_g == null) {
			next_prev = haxe_ds_Option.None;
		} else if(_g._hx_index == 0) {
			var err = _g.v;
			next_prev = haxe_ds_Option.Some(err.map(fn));
		} else {
			next_prev = haxe_ds_Option.None;
		}
		return new stx_nano_Err(next_data,next_prev,this.pos);
	}
	,copy: function(data,prev,pos) {
		var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,data);
		var tmp;
		if(self._hx_index == 0) {
			var v = self.v;
			tmp = v;
		} else {
			tmp = this.data;
		}
		var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,prev);
		var tmp1;
		if(self._hx_index == 0) {
			var v = self.v;
			tmp1 = v;
		} else {
			tmp1 = this.prev;
		}
		var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,pos);
		var tmp2;
		if(self._hx_index == 0) {
			var v = self.v;
			tmp2 = v;
		} else {
			tmp2 = this.pos;
		}
		return new stx_nano_Err(tmp,tmp1,tmp2);
	}
	,last: function() {
		var self = this;
		while(self.prev != haxe_ds_Option.None) {
			var _g = self.prev;
			if(_g._hx_index == 0) {
				var last = _g.v;
				self = last;
			} else {
				break;
			}
		}
		return self;
	}
	,next: function(that) {
		var last = that.copy(null,null,{ fileName : "stx/nano/Err.hx", lineNumber : 60, className : "stx.nano.Err", methodName : "next"});
		var stack = [];
		while(stx_pico_OptionLift.is_defined(last.prev)) {
			stack.push(stx_pico_OptionLift.fudge(last.prev));
			last = stx_pico_OptionLift.fudge(last.prev);
		}
		var next = Lambda.fold(stack,function(next,memo) {
			return next.copy(null,stx_pico_Option.fromNullT(memo),{ fileName : "stx/nano/Err.hx", lineNumber : 67, className : "stx.nano.Err", methodName : "next"});
		},this);
		return next;
	}
	,head: function() {
		var _g = this.data;
		if(_g._hx_index == 0) {
			var _g1 = _g.v;
			if(_g1._hx_index == 0) {
				var v = _g1.v;
				return haxe_ds_Option.Some(v);
			} else {
				return haxe_ds_Option.None;
			}
		} else {
			return haxe_ds_Option.None;
		}
	}
	,fault: function() {
		return this.pos;
	}
	,toString: function() {
		var p = stx_nano_PositionLift.toStringClassMethodLine(stx_nano_Position.fromPos(this.pos));
		var e = stx_pico_Option.toString(this.data);
		return "" + e + " at (" + p + ")";
	}
	,iterator: function() {
		var cursor = haxe_ds_Option.Some(this);
		return { hasNext : function() {
			return stx_pico_OptionLift.is_defined(cursor);
		}, next : function() {
			var value = stx_nano_lift_LiftOptionNano.fudge(cursor);
			cursor = value.prev;
			return value;
		}};
	}
	,value: function() {
		return stx_pico_OptionLift.flat_map(this.data,function(f) {
			return stx_nano_FailureLift.fold(f,haxe_ds_Option.Some,function(_) {
				return haxe_ds_Option.None;
			});
		});
	}
	,elide: function() {
		return this.map(function(v) {
			return v;
		});
	}
	,__class__: stx_nano_Err
	,__properties__: {get_uuid:"get_uuid"}
};
var stx_nano_FailCode = {};
stx_nano_FailCode._new = function(self) {
	var this1 = self;
	return this1;
};
stx_nano_FailCode.fromString = function(str) {
	return stx_nano_FailCode._new(str);
};
stx_nano_FailCode.toString = function(this1) {
	return this1;
};
var stx_nano_FailureSum = $hxEnums["stx.nano.FailureSum"] = { __ename__:true,__constructs__:null
	,ERR_OF: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"stx.nano.FailureSum",toString:$estr}; },$_._hx_name="ERR_OF",$_.__params__ = ["v"],$_)
	,ERR: ($_=function(spec) { return {_hx_index:1,spec:spec,__enum__:"stx.nano.FailureSum",toString:$estr}; },$_._hx_name="ERR",$_.__params__ = ["spec"],$_)
};
stx_nano_FailureSum.__constructs__ = [stx_nano_FailureSum.ERR_OF,stx_nano_FailureSum.ERR];
var stx_nano_FailureLift = function() { };
stx_nano_FailureLift.__name__ = "stx.nano.FailureLift";
stx_nano_FailureLift.fold = function(self,val,def) {
	switch(self._hx_index) {
	case 0:
		var v = self.v;
		return val(v);
	case 1:
		var e = self.spec;
		return def(e);
	}
};
stx_nano_FailureLift.value = function(self) {
	return stx_nano_FailureLift.fold(self,haxe_ds_Option.Some,function(_) {
		return haxe_ds_Option.None;
	});
};
stx_nano_FailureLift.toString = function(self) {
	return stx_nano_FailureLift.fold(self,function(v) {
		return Std.string(v);
	},function(n) {
		return stx_nano_FailCode.toString(n);
	});
};
var stx_nano_Failure = {};
stx_nano_Failure.__properties__ = {get_self:"get_self"};
stx_nano_Failure._new = function(self) {
	var this1 = self;
	return this1;
};
stx_nano_Failure.lift = function(self) {
	return stx_nano_Failure._new(self);
};
stx_nano_Failure.prj = function(this1) {
	return this1;
};
stx_nano_Failure.get_self = function(this1) {
	return stx_nano_Failure._new(this1);
};
var stx_nano_Fault = {};
stx_nano_Fault._new = function(self) {
	var this1 = self;
	return this1;
};
stx_nano_Fault.of = function(this1,data,code) {
	return new stx_nano_Err(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,stx_nano_FailureSum.ERR_OF(data)),haxe_ds_Option.None,this1);
};
stx_nano_Fault.empty = function(this1) {
	return new stx_nano_Err(haxe_ds_Option.None,haxe_ds_Option.None,this1);
};
stx_nano_Fault.any = function(this1,msg) {
	return new stx_nano_Err(stx_pico_Option.fromNullT(stx_nano_FailureSum.ERR(stx_nano_FailCode.fromString(msg))),null,this1);
};
stx_nano_Fault.failure = function(this1,failure) {
	return new stx_nano_Err(haxe_ds_Option.Some(failure),null,this1);
};
stx_nano_Fault.err = function(this1,code) {
	return new stx_nano_Err(haxe_ds_Option.Some(stx_nano_FailureSum.ERR(code)),null,this1);
};
var stx_nano_IterLift = function() { };
stx_nano_IterLift.__name__ = "stx.nano.IterLift";
stx_nano_IterLift.cross = function(self,that) {
	return { iterator : function() {
		var l_it = $getIterator(self);
		var r_it = $getIterator(that);
		var l_val = null;
		var rec = null;
		rec = function() {
			if(l_val != null && l_it.hasNext()) {
				l_val = l_it.next();
			}
			if(r_it.hasNext()) {
				return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,l_val,r_it.next());
			} else {
				if(l_it.hasNext()) {
					r_it = $getIterator(that);
				}
				l_val = null;
				return rec();
			}
		};
		return { next : rec, hasNext : function() {
			if(!l_it.hasNext()) {
				return r_it.hasNext();
			} else {
				return false;
			}
		}};
	}};
};
stx_nano_IterLift.zip = function(l,r) {
	return { iterator : function() {
		var lit = $getIterator(l);
		var rit = $getIterator(r);
		return { next : function() {
			return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,lit.next(),rit.next());
		}, hasNext : function() {
			if(lit.hasNext()) {
				return rit.hasNext();
			} else {
				return false;
			}
		}};
	}};
};
stx_nano_IterLift.ldrop = function(it,n) {
	return { iterator : function() {
		var iter = $getIterator(it);
		while(n > 0) {
			iter.next();
			n -= 1;
		}
		return iter;
	}};
};
stx_nano_IterLift.toMap = function(iter,fn,map) {
	var i = $getIterator(iter);
	while(i.hasNext()) {
		var i1 = i.next();
		var kv = fn(i1);
		stx_nano_CoupleLift.decouple(kv,$bind(map,map.set));
	}
	return map;
};
stx_nano_IterLift.map = function(iter,fn) {
	return { iterator : function() {
		var i = $getIterator(iter);
		return { next : function() {
			return fn(i.next());
		}, hasNext : function() {
			return i.hasNext();
		}};
	}};
};
stx_nano_IterLift.head = function(iter) {
	var it = $getIterator(iter);
	if(it.hasNext()) {
		return haxe_ds_Option.Some(it.next());
	} else {
		return haxe_ds_Option.None;
	}
};
stx_nano_IterLift.tail = function(iter) {
	return { iterator : function() {
		var it = $getIterator(iter);
		it.next();
		return { next : $bind(it,it.next), hasNext : $bind(it,it.hasNext)};
	}};
};
stx_nano_IterLift.lfold = function(iter,mapper,seed) {
	var folded = seed;
	var e = $getIterator(iter);
	while(e.hasNext()) {
		var e1 = e.next();
		folded = mapper(e1,folded);
	}
	return folded;
};
stx_nano_IterLift.lfold1 = function(iter,mapper) {
	return stx_pico_OptionLift.map(stx_nano_IterLift.head(iter),function(seed) {
		return stx_nano_IterLift.lfold(stx_nano_IterLift.tail(iter),mapper,seed);
	});
};
stx_nano_IterLift.toGenerator = function(self) {
	var iter = haxe_ds_Option.None;
	return function() {
		if(iter == haxe_ds_Option.None) {
			iter = haxe_ds_Option.Some($getIterator(self));
		}
		return stx_pico_OptionLift.flat_map(iter,function(x) {
			if(x.hasNext()) {
				return haxe_ds_Option.Some(x.next());
			} else {
				return haxe_ds_Option.None;
			}
		});
	};
};
stx_nano_IterLift.toArray = function(self) {
	var arr = [];
	var v = $getIterator(self);
	while(v.hasNext()) {
		var v1 = v.next();
		arr.push(v1);
	}
	return arr;
};
stx_nano_IterLift.foldr = function(iter,fn,init) {
	var data = init;
	var iterator = $getIterator(iter);
	var eff = null;
	eff = function() {
		if(iterator.hasNext()) {
			var next = iterator.next();
			eff();
			data = fn(next,data);
		}
	};
	eff();
	return data;
};
stx_nano_IterLift.foldl = function(iter,fn,init) {
	var data = init;
	var iterator = $getIterator(iter);
	var eff = null;
	eff = function() {
		if(iterator.hasNext()) {
			var next = iterator.next();
			data = fn(next,data);
			eff();
		}
	};
	eff();
	return data;
};
var stx_nano_Iter = {};
stx_nano_Iter._new = function(self) {
	var this1 = self;
	return this1;
};
stx_nano_Iter.prj = function(this1) {
	return this1;
};
var stx_nano_KV = {};
stx_nano_KV._new = function(self) {
	var this1 = self;
	return this1;
};
stx_nano_KV.map = function(this1,fn) {
	return stx_nano_KV.fromObj({ key : this1.key, val : fn(this1.val)});
};
stx_nano_KV.fromObj = function(v) {
	return stx_nano_KV._new(v);
};
stx_nano_KV.fromTup = function(tp) {
	return stx_nano_KV._new({ key : stx_nano_CoupleLift.fst(tp), val : stx_nano_CoupleLift.snd(tp)});
};
stx_nano_KV.fst = function(this1) {
	return this1.key;
};
stx_nano_KV.snd = function(this1) {
	return this1.val;
};
stx_nano_KV.into = function(this1,fn) {
	return fn(this1.key,this1.val);
};
stx_nano_KV.decouple = function(this1,fn) {
	return fn(this1.key,this1.val);
};
var stx_nano_Module = function() {
	stx_pico_Clazz.call(this);
};
stx_nano_Module.__name__ = "stx.nano.Module";
stx_nano_Module.__super__ = stx_pico_Clazz;
stx_nano_Module.prototype = $extend(stx_pico_Clazz.prototype,{
	Ft: function() {
		return new stx_nano__$Module_Ft();
	}
	,__class__: stx_nano_Module
});
var stx_nano__$Module_Ft = function() {
	stx_pico_Clazz.call(this);
};
stx_nano__$Module_Ft.__name__ = "stx.nano._Module.Ft";
stx_nano__$Module_Ft.__super__ = stx_pico_Clazz;
stx_nano__$Module_Ft.prototype = $extend(stx_pico_Clazz.prototype,{
	bind_fold: function(arr,fn,init) {
		return stx_lift_ArrayLift.lfold(arr,function(next,memo) {
			return tink_core_Future.flatMap(memo,function(tt) {
				return fn(next,tt);
			});
		},new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(init)));
	}
	,zip: function(self,that) {
		var left = haxe_ds_Option.None;
		var right = haxe_ds_Option.None;
		var trigger = new tink_core_FutureTrigger();
		var on_done = function() {
			if(left._hx_index == 0) {
				if(right._hx_index == 0) {
					var r = right.v;
					var l = left.v;
					trigger.trigger(stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,l,r));
				}
			}
		};
		var l_handler = function(l) {
			left = haxe_ds_Option.Some(l);
			on_done();
		};
		var r_handler = function(r) {
			right = haxe_ds_Option.Some(r);
			on_done();
		};
		self.handle(l_handler);
		that.handle(r_handler);
		return trigger;
	}
	,tryAndThenCancelIfNotAvailable: function(ft) {
		var output = haxe_ds_Option.None;
		var canceller = ft.handle(function(x) {
			output = haxe_ds_Option.Some(x);
		});
		if(!stx_pico_OptionLift.is_defined(output)) {
			if(canceller != null) {
				canceller.cancel();
			}
		}
		return output;
	}
	,__class__: stx_nano__$Module_Ft
});
var stx_nano_PledgeLift = function() { };
stx_nano_PledgeLift.__name__ = "stx.nano.PledgeLift";
stx_nano_PledgeLift.lift = function(self) {
	return stx_nano_Pledge.lift(self);
};
stx_nano_PledgeLift.zip = function(self,that) {
	var out = tink_core_Future.map(stx_nano_lift_LiftNano.nano(stx_nano_Wildcard.__).Ft().zip(stx_nano_Pledge.prj(self),stx_nano_Pledge.prj(that)),function(tp) {
		var self = stx_nano_CoupleLift.fst(tp);
		var that = stx_nano_CoupleLift.snd(tp);
		switch(self._hx_index) {
		case 0:
			var _g = self.t;
			switch(that._hx_index) {
			case 0:
				var tt = that.t;
				var t = _g;
				return stx_nano_ResSum.Accept(stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,t,tt));
			case 1:
				var e = that.e;
				return stx_nano_ResSum.Reject(e);
			}
			break;
		case 1:
			var _g = self.e;
			if(that._hx_index == 1) {
				var ee = that.e;
				var e = _g;
				return stx_nano_ResSum.Reject(e.next(ee));
			} else {
				var e = _g;
				return stx_nano_ResSum.Reject(e);
			}
			break;
		}
	});
	return out;
};
stx_nano_PledgeLift.map = function(self,fn) {
	return stx_nano_PledgeLift.lift(tink_core_Future.map(stx_nano_Pledge.prj(self),function(x) {
		var tmp;
		switch(x._hx_index) {
		case 0:
			var t = x.t;
			tmp = stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,fn(t));
			break;
		case 1:
			var e = x.e;
			tmp = stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,e);
			break;
		}
		return tmp;
	}));
};
stx_nano_PledgeLift.flat_map = function(self,fn) {
	var ft = stx_nano_Pledge.prj(self);
	return tink_core_Future.flatMap(ft,function(x) {
		switch(x._hx_index) {
		case 0:
			var t = x.t;
			return stx_nano_Pledge.prj(fn(t));
		case 1:
			var e = x.e;
			return stx_nano_Pledge.prj(stx_nano_Pledge.fromRes(stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,e)));
		}
	});
};
stx_nano_PledgeLift.fold = function(self,val,ers) {
	var fn = val;
	var er = ers;
	var tmp = function(self) {
		switch(self._hx_index) {
		case 0:
			var t = self.t;
			return fn(t);
		case 1:
			var e = self.e;
			return er(e);
		}
	};
	return tink_core_Future.map(stx_nano_Pledge.prj(self),tmp);
};
stx_nano_PledgeLift.recover = function(self,fn) {
	return stx_nano_PledgeLift.lift(stx_nano_PledgeLift.fold(self,function(x) {
		return stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,x);
	},function(e) {
		return fn(e);
	}));
};
stx_nano_PledgeLift.attempt = function(self,fn) {
	return stx_nano_PledgeLift.lift(stx_nano_PledgeLift.fold(self,function(x) {
		return fn(x);
	},function(v) {
		return stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,v);
	}));
};
stx_nano_PledgeLift.receive = function(self,fn) {
	return tink_core_Future.map(stx_nano_Pledge.prj(self),function(res) {
		var tmp;
		switch(res._hx_index) {
		case 0:
			var t = res.t;
			fn(t);
			tmp = haxe_ds_Option.None;
			break;
		case 1:
			var e = res.e;
			tmp = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,e);
			break;
		}
		return tmp;
	});
};
stx_nano_PledgeLift.fudge = function(self) {
	var out = null;
	stx_nano_Pledge.prj(self).handle(function(v) {
		out = v;
	});
	if(out == null) {
		throw haxe_Exception.thrown(new stx_nano_Err(haxe_ds_Option.Some(stx_nano_FailureSum.ERR("E_ValueNotReady")),null,stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/nano/Pledge.hx", lineNumber : 158, className : "stx.nano.PledgeLift", methodName : "fudge"})));
	}
	return out;
};
stx_nano_PledgeLift.errata = function(fn,self) {
	return tink_core_Future.map(stx_nano_Pledge.prj(self),function(chk) {
		var self;
		switch(chk._hx_index) {
		case 0:
			var t = chk.t;
			self = stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,t);
			break;
		case 1:
			var e = chk.e;
			self = stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,fn(e));
			break;
		}
		return stx_nano_Res._new(self);
	});
};
var stx_nano_Pledge = {};
stx_nano_Pledge.__properties__ = {get_self:"get_self"};
stx_nano_Pledge._new = function(self) {
	var this1 = self;
	return this1;
};
stx_nano_Pledge.lift = function(self) {
	return stx_nano_Pledge._new(self);
};
stx_nano_Pledge.make = function(ch) {
	var this1 = new tink_core__$Future_SuspendableFuture(function(f) {
		f(ch);
		return null;
	});
	return this1;
};
stx_nano_Pledge.accept = function(ch) {
	return stx_nano_Pledge.make(stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,ch));
};
stx_nano_Pledge.reject = function(e) {
	return stx_nano_Pledge.make(stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,e));
};
stx_nano_Pledge.bind_fold = function(it,fm,start) {
	return stx_nano_Pledge._new(stx_nano_lift_LiftNano.nano(stx_nano_Wildcard.__).Ft().bind_fold(it,function(next,memo) {
		switch(memo._hx_index) {
		case 0:
			var t = memo.t;
			return stx_nano_Pledge.prj(fm(next,t));
		case 1:
			var e = memo.e;
			return stx_nano_Pledge.make(stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,e));
		}
	},stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,start)));
};
stx_nano_Pledge.lazy = function(fn) {
	return stx_nano_Pledge.lift(tink_core_Future.irreversible(function(f) {
		f(stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,fn()));
	}));
};
stx_nano_Pledge.fromLazyError = function(fn) {
	return stx_nano_Pledge.fromLazyRes(function() {
		return stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,fn());
	});
};
stx_nano_Pledge.fromTinkPromise = function(promise) {
	return stx_nano_Pledge.lift(tink_core_Future.map(promise,function(outcome) {
		switch(outcome._hx_index) {
		case 0:
			var s = outcome.data;
			return stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,s);
		case 1:
			var f = outcome.failure;
			return stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_Err.fromTinkError(f));
		}
	}));
};
stx_nano_Pledge.fromLazyRes = function(fn) {
	return tink_core_Future.irreversible(function(f) {
		f(fn());
	});
};
stx_nano_Pledge.err = function(e) {
	return stx_nano_Pledge.make(stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,e));
};
stx_nano_Pledge.fromRes = function(chk) {
	return tink_core_Future.irreversible(function(cb) {
		cb(chk);
	});
};
stx_nano_Pledge.fromOption = function(m) {
	var val;
	switch(m._hx_index) {
	case 0:
		var t = m.v;
		val = stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,t);
		break;
	case 1:
		val = stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,new stx_nano_Err(haxe_ds_Option.Some(stx_nano_FailureSum.ERR("E_UnexpectedNullValueEncountered")),null,stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/nano/Pledge.hx", lineNumber : 73, className : "stx.nano._Pledge.Pledge_Impl_", methodName : "fromOption"})));
		break;
	}
	var val1 = val;
	return stx_nano_Pledge.fromRes(val1);
};
stx_nano_Pledge.prj = function(this1) {
	return this1;
};
stx_nano_Pledge.get_self = function(this1) {
	return stx_nano_Pledge.lift(this1);
};
stx_nano_Pledge.map = function(this1,fn) {
	return stx_nano_Pledge._.map(this1,fn);
};
stx_nano_Pledge.flat_map = function(this1,fn) {
	return stx_nano_Pledge._.flat_map(this1,fn);
};
var stx_nano_PositionLift = function() { };
stx_nano_PositionLift.__name__ = "stx.nano.PositionLift";
stx_nano_PositionLift.toString = function(pos) {
	if(pos == null) {
		return ":pos ()";
	}
	var f = pos.fileName;
	var cls = pos.className;
	var fn = pos.methodName;
	var ln = pos.lineNumber;
	return ":pos (object :file_name " + fn + " :class_name " + cls + " :method_name " + fn + "  :line_number " + ln + ")";
};
stx_nano_PositionLift.clone = function(p) {
	return stx_nano_Position.make(p.fileName,p.className,p.methodName,p.lineNumber,p.customParams);
};
stx_nano_PositionLift.withFragmentName = function(pos) {
	var f = pos.fileName;
	var cls = pos.className;
	var fn = pos.methodName;
	var ln = pos.lineNumber;
	return "" + cls + "." + fn;
};
stx_nano_PositionLift.toStringClassMethodLine = function(pos) {
	var f = pos.fileName;
	var cls = pos.className;
	var fn = pos.methodName;
	var ln = pos.lineNumber;
	var class_method = stx_nano_PositionLift.withFragmentName(pos);
	return "(" + class_method + "@" + pos.lineNumber + ")";
};
stx_nano_PositionLift.to_vscode_clickable_link = function(pos) {
	var f = pos.fileName;
	var cls = pos.className;
	var fn = pos.methodName;
	var ln = pos.lineNumber;
	var class_method = stx_nano_PositionLift.withFragmentName(pos);
	return "" + f + ":" + ln;
};
stx_nano_PositionLift.toString_name_method_line = function(pos) {
	var name = stx_pico_Identifier.get_name(stx_nano_PositionLift.identifier(stx_LiftPos.lift(pos)));
	var method = pos.methodName;
	var line = pos.lineNumber;
	return "" + name + "." + method + "@" + line;
};
stx_nano_PositionLift.withCustomParams = function(p,v) {
	p = stx_nano_PositionLift.clone(p);
	if(p.customParams == null) {
		p.customParams = [];
	}
	p.customParams.push(v);
	return p;
};
stx_nano_PositionLift.identifier = function(self) {
	var valid = stx_nano_Position.get_fileName(stx_nano_lift_LiftNano.toPosition(self)).split(".")[0].split(stx_nano_lift_LiftNano.sep(stx_nano_Wildcard.__)).join(".");
	return stx_pico_Identifier._new(valid);
};
var stx_nano_Position = {};
stx_nano_Position.__properties__ = {get_customParams:"get_customParams",get_lineNummber:"get_lineNummber",get_methodName:"get_methodName",get_className:"get_className",get_fileName:"get_fileName"};
stx_nano_Position._new = function(self) {
	var this1 = self;
	return this1;
};
stx_nano_Position.lift = function(pos) {
	return stx_nano_Position.fromPos(pos);
};
stx_nano_Position.make = function(fileName,className,methodName,lineNumber,customParams) {
	return { fileName : fileName, className : className, methodName : methodName, lineNumber : lineNumber, customParams : customParams};
};
stx_nano_Position.fromPos = function(pos) {
	return stx_nano_Position._new(pos);
};
stx_nano_Position.toString = function(this1) {
	return stx_nano_Position._.toStringClassMethodLine(this1);
};
stx_nano_Position.here = function(pos) {
	return pos;
};
stx_nano_Position.get_fileName = function(this1) {
	return this1.fileName;
};
stx_nano_Position.get_className = function(this1) {
	return this1.className;
};
stx_nano_Position.get_methodName = function(this1) {
	return this1.methodName;
};
stx_nano_Position.get_lineNummber = function(this1) {
	return this1.lineNumber;
};
stx_nano_Position.get_customParams = function(this1) {
	return this1.customParams;
};
var stx_nano_PrimitiveDef = $hxEnums["stx.nano.PrimitiveDef"] = { __ename__:true,__constructs__:null
	,PNull: {_hx_name:"PNull",_hx_index:0,__enum__:"stx.nano.PrimitiveDef",toString:$estr}
	,PBool: ($_=function(b) { return {_hx_index:1,b:b,__enum__:"stx.nano.PrimitiveDef",toString:$estr}; },$_._hx_name="PBool",$_.__params__ = ["b"],$_)
	,PInt: ($_=function(int) { return {_hx_index:2,int:int,__enum__:"stx.nano.PrimitiveDef",toString:$estr}; },$_._hx_name="PInt",$_.__params__ = ["int"],$_)
	,PFloat: ($_=function(fl) { return {_hx_index:3,fl:fl,__enum__:"stx.nano.PrimitiveDef",toString:$estr}; },$_._hx_name="PFloat",$_.__params__ = ["fl"],$_)
	,PString: ($_=function(str) { return {_hx_index:4,str:str,__enum__:"stx.nano.PrimitiveDef",toString:$estr}; },$_._hx_name="PString",$_.__params__ = ["str"],$_)
};
stx_nano_PrimitiveDef.__constructs__ = [stx_nano_PrimitiveDef.PNull,stx_nano_PrimitiveDef.PBool,stx_nano_PrimitiveDef.PInt,stx_nano_PrimitiveDef.PFloat,stx_nano_PrimitiveDef.PString];
var stx_nano_Primitive = {};
stx_nano_Primitive.fromInt = function(i) {
	return stx_nano_PrimitiveDef.PInt(i);
};
stx_nano_Primitive.fromFloat = function(i) {
	return stx_nano_PrimitiveDef.PFloat(i);
};
stx_nano_Primitive.fromBool = function(i) {
	return stx_nano_PrimitiveDef.PBool(i);
};
stx_nano_Primitive.fromString = function(i) {
	return stx_nano_PrimitiveDef.PString(i);
};
stx_nano_Primitive.toAny = function(this1) {
	switch(this1._hx_index) {
	case 0:
		return null;
	case 1:
		var b = this1.b;
		return b;
	case 2:
		var int = this1.int;
		return int;
	case 3:
		var fl = this1.fl;
		return fl;
	case 4:
		var str = this1.str;
		return str;
	}
};
stx_nano_Primitive.toString = function(this1) {
	switch(this1._hx_index) {
	case 0:
		return "null";
	case 1:
		var b = this1.b;
		return "" + (b == null ? "null" : "" + b);
	case 2:
		var int = this1.int;
		return "" + int;
	case 3:
		var fl = this1.fl;
		return "" + fl;
	case 4:
		var str = this1.str;
		return str;
	}
};
stx_nano_Primitive.prj = function(this1) {
	return this1;
};
stx_nano_Primitive.lt = function(l,r) {
	switch(l._hx_index) {
	case 1:
		if(l.b == false) {
			if(r._hx_index == 1) {
				if(r.b == true) {
					return true;
				} else {
					return false;
				}
			} else {
				var x = l;
				var y = r;
				return x._hx_index < y._hx_index;
			}
		} else if(r._hx_index == 1) {
			var _g = r.b;
			return false;
		} else {
			var x = l;
			var y = r;
			return x._hx_index < y._hx_index;
		}
		break;
	case 2:
		if(r._hx_index == 2) {
			var int0 = r.int;
			var int = l.int;
			return int < int0;
		} else {
			var x = l;
			var y = r;
			return x._hx_index < y._hx_index;
		}
		break;
	case 3:
		if(r._hx_index == 3) {
			var fl0 = r.fl;
			var fl = l.fl;
			return fl < fl0;
		} else {
			var x = l;
			var y = r;
			return x._hx_index < y._hx_index;
		}
		break;
	case 4:
		if(r._hx_index == 4) {
			var str0 = r.str;
			var str = l.str;
			return str < str0;
		} else {
			var x = l;
			var y = r;
			return x._hx_index < y._hx_index;
		}
		break;
	default:
		var x = l;
		var y = r;
		return x._hx_index < y._hx_index;
	}
};
stx_nano_Primitive.eq = function(l,r) {
	switch(l._hx_index) {
	case 0:
		if(r._hx_index == 0) {
			return true;
		} else {
			return false;
		}
		break;
	case 1:
		if(l.b) {
			if(r._hx_index == 1) {
				if(r.b == true) {
					return true;
				} else {
					return false;
				}
			} else {
				return false;
			}
		} else if(r._hx_index == 1) {
			if(r.b == false) {
				return true;
			} else {
				return false;
			}
		} else {
			return false;
		}
		break;
	case 2:
		if(r._hx_index == 2) {
			var int0 = r.int;
			var int = l.int;
			return int == int0;
		} else {
			return false;
		}
		break;
	case 3:
		if(r._hx_index == 3) {
			var fl0 = r.fl;
			var fl = l.fl;
			return fl == fl0;
		} else {
			return false;
		}
		break;
	case 4:
		if(r._hx_index == 4) {
			var str0 = r.str;
			var str = l.str;
			return str == str0;
		} else {
			return false;
		}
		break;
	}
};
var stx_nano_Report = {};
stx_nano_Report._new = function(self) {
	var this1 = self;
	return this1;
};
stx_nano_Report.lift = function(self) {
	return stx_nano_Report._new(self);
};
stx_nano_Report.make = function(data,pos) {
	var this1 = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,pos);
	return stx_nano_Report.pure(new stx_nano_Err(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,stx_nano_FailureSum.ERR_OF(data)),haxe_ds_Option.None,this1));
};
stx_nano_Report.unit = function() {
	return stx_nano_Report._new(haxe_ds_Option.None);
};
stx_nano_Report.conf = function(e) {
	return stx_nano_Report._new(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,e));
};
stx_nano_Report.pure = function(e) {
	return stx_nano_Report._new(haxe_ds_Option.Some(e));
};
stx_nano_Report.effects = function(this1,success,failure) {
	var tmp;
	switch(this1._hx_index) {
	case 0:
		var t = this1.v;
		failure();
		tmp = stx_nano_Report.pure(t);
		break;
	case 1:
		success();
		tmp = stx_nano_Report.unit();
		break;
	}
	return tmp;
};
stx_nano_Report.crunch = function(this1) {
	if(this1._hx_index == 0) {
		var e = this1.v;
		throw haxe_Exception.thrown(e);
	}
};
stx_nano_Report.fromStdOption = function(opt) {
	var opt1 = opt;
	return stx_nano_Report._new(opt1);
};
stx_nano_Report.prj = function(this1) {
	return this1;
};
stx_nano_Report.value = function(this1) {
	switch(this1._hx_index) {
	case 0:
		var t = this1.v;
		return t.value();
	case 1:
		return haxe_ds_Option.None;
	}
};
stx_nano_Report.defv = function(this1,error) {
	if(this1._hx_index == 0) {
		var v = this1.v;
		return v;
	} else {
		return error;
	}
};
stx_nano_Report.merge = function(this1,that) {
	return stx_nano_Report.fromStdOption(stx_pico_OptionLift.merge(this1,stx_nano_Report.prj(that),function(lhs,rhs) {
		return lhs.next(rhs);
	}));
};
stx_nano_Report.or = function(this1,that) {
	var tmp;
	switch(this1._hx_index) {
	case 0:
		var t = this1.v;
		tmp = stx_nano_Report.pure(t);
		break;
	case 1:
		tmp = that();
		break;
	}
	return tmp;
};
stx_nano_Report.errata = function(this1,fn) {
	var tmp;
	switch(this1._hx_index) {
	case 0:
		var v = this1.v;
		tmp = stx_pico_Option.fromNullT(fn(v));
		break;
	case 1:
		tmp = haxe_ds_Option.None;
		break;
	}
	return stx_nano_Report._new(tmp);
};
stx_nano_Report.ok = function(this1) {
	if(this1._hx_index == 1) {
		return true;
	} else {
		return false;
	}
};
stx_nano_Report.populate = function(this1,fn) {
	var tmp;
	switch(this1._hx_index) {
	case 0:
		var t = this1.v;
		tmp = stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,t);
		break;
	case 1:
		tmp = stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,fn());
		break;
	}
	return tmp;
};
var stx_nano_ResSum = $hxEnums["stx.nano.ResSum"] = { __ename__:true,__constructs__:null
	,Accept: ($_=function(t) { return {_hx_index:0,t:t,__enum__:"stx.nano.ResSum",toString:$estr}; },$_._hx_name="Accept",$_.__params__ = ["t"],$_)
	,Reject: ($_=function(e) { return {_hx_index:1,e:e,__enum__:"stx.nano.ResSum",toString:$estr}; },$_._hx_name="Reject",$_.__params__ = ["e"],$_)
};
stx_nano_ResSum.__constructs__ = [stx_nano_ResSum.Accept,stx_nano_ResSum.Reject];
var stx_nano_ResSumLift = function() { };
stx_nano_ResSumLift.__name__ = "stx.nano.ResSumLift";
stx_nano_ResSumLift.toString = function(self) {
	return stx_nano_Res._.toString(self);
};
var stx_nano_ResLift = function() { };
stx_nano_ResLift.__name__ = "stx.nano.ResLift";
stx_nano_ResLift.toString = function(self) {
	switch(self._hx_index) {
	case 0:
		var t = self.t;
		return "Accept(" + Std.string(t) + ")";
	case 1:
		var e = self.e;
		return "Reject(" + e.toString() + ")";
	}
};
stx_nano_ResLift.errata = function(self,fn) {
	var self1;
	switch(self._hx_index) {
	case 0:
		var t = self.t;
		self1 = stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,t);
		break;
	case 1:
		var e = self.e;
		self1 = stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,fn(e));
		break;
	}
	return stx_nano_Res._new(self1);
};
stx_nano_ResLift.errate = function(self,fn) {
	var self1;
	switch(self._hx_index) {
	case 0:
		var t = self.t;
		self1 = stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,t);
		break;
	case 1:
		var e = self.e;
		self1 = stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,e.map(fn));
		break;
	}
	return stx_nano_Res._new(self1);
};
stx_nano_ResLift.zip = function(self,that) {
	switch(self._hx_index) {
	case 0:
		var _g = self.t;
		switch(that._hx_index) {
		case 0:
			var tt = that.t;
			var t = _g;
			return stx_nano_ResSum.Accept(stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,t,tt));
		case 1:
			var e = that.e;
			return stx_nano_ResSum.Reject(e);
		}
		break;
	case 1:
		var _g = self.e;
		if(that._hx_index == 1) {
			var ee = that.e;
			var e = _g;
			return stx_nano_ResSum.Reject(e.next(ee));
		} else {
			var e = _g;
			return stx_nano_ResSum.Reject(e);
		}
		break;
	}
};
stx_nano_ResLift.map = function(self,fn) {
	var self1;
	switch(self._hx_index) {
	case 0:
		var t = self.t;
		self1 = stx_nano_ResSum.Accept(fn(t));
		break;
	case 1:
		var e = self.e;
		self1 = stx_nano_ResSum.Reject(e);
		break;
	}
	return stx_nano_Res._new(self1);
};
stx_nano_ResLift.flat_map = function(self,fn) {
	var self1;
	switch(self._hx_index) {
	case 0:
		var t = self.t;
		self1 = fn(t);
		break;
	case 1:
		var e = self.e;
		self1 = stx_nano_ResSum.Reject(e);
		break;
	}
	return stx_nano_Res._new(self1);
};
stx_nano_ResLift.fold = function(self,fn,er) {
	switch(self._hx_index) {
	case 0:
		var t = self.t;
		return fn(t);
	case 1:
		var e = self.e;
		return er(e);
	}
};
stx_nano_ResLift.fudge = function(self) {
	switch(self._hx_index) {
	case 0:
		var t = self.t;
		return t;
	case 1:
		var e = self.e;
		throw haxe_Exception.thrown(e);
	}
};
stx_nano_ResLift.elide = function(self) {
	var tmp;
	switch(self._hx_index) {
	case 0:
		var t = self.t;
		tmp = stx_nano_ResSum.Reject(t);
		break;
	case 1:
		var e = self.e;
		tmp = stx_nano_ResSum.Accept(e);
		break;
	}
	return tmp;
};
stx_nano_ResLift.value = function(self) {
	var tmp;
	switch(self._hx_index) {
	case 0:
		var t = self.t;
		tmp = haxe_ds_Option.Some(t);
		break;
	case 1:
		var e = self.e;
		tmp = haxe_ds_Option.None;
		break;
	}
	return tmp;
};
stx_nano_ResLift.report = function(self) {
	var tmp;
	switch(self._hx_index) {
	case 0:
		var t = self.t;
		tmp = stx_nano_Report.unit();
		break;
	case 1:
		var e = self.e;
		tmp = stx_nano_Report.pure(e);
		break;
	}
	return tmp;
};
stx_nano_ResLift.rectify = function(self,fn) {
	var tmp;
	switch(self._hx_index) {
	case 0:
		var t = self.t;
		tmp = stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,t);
		break;
	case 1:
		var e = self.e;
		tmp = fn(e);
		break;
	}
	return tmp;
};
stx_nano_ResLift.effects = function(self,success,failure) {
	var tmp;
	switch(self._hx_index) {
	case 0:
		var t = self.t;
		success(t);
		tmp = stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,t);
		break;
	case 1:
		var e = self.e;
		failure(e);
		tmp = stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,e);
		break;
	}
	return tmp;
};
stx_nano_ResLift.ok = function(self) {
	switch(self._hx_index) {
	case 0:
		var t = self.t;
		return true;
	case 1:
		var e = self.e;
		return false;
	}
};
var stx_nano_Res = {};
stx_nano_Res.__properties__ = {get_self:"get_self"};
stx_nano_Res._new = function(self) {
	var this1 = self;
	return this1;
};
stx_nano_Res.get_self = function(this1) {
	return stx_nano_Res._new(this1);
};
stx_nano_Res.lift = function(self) {
	return stx_nano_Res._new(self);
};
stx_nano_Res.accept = function(t) {
	return stx_nano_Res._new(stx_nano_ResSum.Accept(t));
};
stx_nano_Res.reject = function(e) {
	return stx_nano_Res._new(stx_nano_ResSum.Reject(e));
};
stx_nano_Res.fromReport = function(self) {
	var self1;
	switch(self._hx_index) {
	case 0:
		var t = self.v;
		self1 = stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,t);
		break;
	case 1:
		self1 = stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,null);
		break;
	}
	return stx_nano_Res._new(self1);
};
stx_nano_Res.prj = function(this1) {
	return this1;
};
stx_nano_Res.fromOutcome = function(self) {
	var ocd;
	switch(self._hx_index) {
	case 0:
		var ok = self.t;
		ocd = stx_nano_ResSum.Accept(ok);
		break;
	case 1:
		var no = self.e;
		ocd = stx_nano_ResSum.Reject(no);
		break;
	}
	return stx_nano_Res._new(ocd);
};
stx_nano_Res.toOutcome = function(this1) {
	switch(this1._hx_index) {
	case 0:
		var ok = this1.t;
		return stx_pico_OutcomeSum.Success(ok);
	case 1:
		var no = this1.e;
		return stx_pico_OutcomeSum.Failure(no);
	}
};
stx_nano_Res.bind_fold = function(arr,fn,init) {
	return stx_lift_ArrayLift.lfold(arr,function(next,memo) {
		switch(memo._hx_index) {
		case 0:
			var t = memo.t;
			return fn(next,t);
		case 1:
			var e = memo.e;
			return stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,e);
		}
	},stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,init));
};
stx_nano_Res.toStringable = function(this1) {
	var self = this1;
	return { toString : function() {
		return stx_nano_Res._.toString(self);
	}};
};
var stx_nano_Resource = {};
stx_nano_Resource.exists = function(str) {
	return stx_lift_ArrayLift.any(haxe_Resource.listNames(),function(x) {
		return x == str;
	});
};
stx_nano_Resource._new = function(str,pos) {
	if(!stx_nano_Resource.exists(str)) {
		var this1 = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,pos);
		throw haxe_Exception.thrown(new stx_nano_Err(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,stx_nano_FailureSum.ERR_OF("E_ResourceNotFound")),haxe_ds_Option.None,this1));
	}
	var this1 = str;
	return this1;
};
stx_nano_Resource.string = function(this1) {
	return haxe_Resource.getString(this1);
};
stx_nano_Resource.bytes = function(this1) {
	return haxe_Resource.getBytes(this1);
};
stx_nano_Resource.json = function(this1) {
	return JSON.parse(stx_nano_Resource.string(this1));
};
var stx_nano_SlotCls = function(data,guard,pos) {
	this.data = data;
	this.ready = true;
	this.pos = pos;
	if(guard != null) {
		this.ready = false;
		this.guard = guard;
		guard.handle($bind(this,this.handler));
	}
};
stx_nano_SlotCls.__name__ = "stx.nano.SlotCls";
stx_nano_SlotCls.prototype = {
	handler: function(data) {
		this.ready = true;
		this.data = data;
	}
	,data: null
	,guard: null
	,ready: null
	,pos: null
	,toString: function() {
		var p = stx_nano_PositionLift.to_vscode_clickable_link(stx_nano_Position.fromPos(this.pos));
		return "Slot(" + Std.string(this.ready) + " " + p + ")";
	}
	,step: function() {
		return -1;
	}
	,__class__: stx_nano_SlotCls
};
var stx_nano_SlotLift = function() { };
stx_nano_SlotLift.__name__ = "stx.nano.SlotLift";
stx_nano_SlotLift.map = function(self,fn) {
	if(self.ready) {
		return stx_nano_Slot.Ready(fn(self.data),self.pos);
	} else {
		return stx_nano_Slot.Guard(tink_core_Future.map(self.guard,function(t) {
			return fn(t);
		}),self.pos);
	}
};
stx_nano_SlotLift.flat_map = function(self,fn) {
	if(self.ready) {
		return fn(self.data);
	} else {
		return stx_nano_Slot.Guard(tink_core_Future.flatMap(self.guard,function(t) {
			var val = fn(t);
			if(val.ready) {
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyFunc(function() {
					return val.data;
				}));
			} else {
				return val.guard;
			}
		}),{ fileName : "stx/nano/Slot.hx", lineNumber : 80, className : "stx.nano.SlotLift", methodName : "flat_map"});
	}
};
stx_nano_SlotLift.value = function(self) {
	if(self.ready == true) {
		return haxe_ds_Option.Some(self.data);
	} else {
		return haxe_ds_Option.None;
	}
};
stx_nano_SlotLift.handle = function(self,fn) {
	if(self.ready) {
		fn(self.data);
	} else {
		self.guard.handle(fn);
	}
};
stx_nano_SlotLift.toFuture = function(self) {
	if(self.ready) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyFunc(function() {
			return self.data;
		}));
	} else {
		return self.guard;
	}
};
stx_nano_SlotLift.zip = function(self,that) {
	var _g = that.ready;
	if(self.ready) {
		if(_g) {
			return stx_nano_Slot.Ready(stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,self.data,that.data),{ fileName : "stx/nano/Slot.hx", lineNumber : 113, className : "stx.nano.SlotLift", methodName : "zip"});
		} else {
			var fn = function(rhs) {
				return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,self.data,rhs);
			};
			if(that.ready) {
				return stx_nano_Slot.Ready(fn(that.data),that.pos);
			} else {
				return stx_nano_Slot.Guard(tink_core_Future.map(that.guard,function(t) {
					return fn(t);
				}),that.pos);
			}
		}
	} else if(_g) {
		var fn1 = function(lhs) {
			return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,lhs,that.data);
		};
		if(self.ready) {
			return stx_nano_Slot.Ready(fn1(self.data),self.pos);
		} else {
			return stx_nano_Slot.Guard(tink_core_Future.map(self.guard,function(t) {
				return fn1(t);
			}),self.pos);
		}
	} else {
		return stx_nano_Slot.Guard(tink_core_Future.merge(self.guard,that.guard,function(tI,tII) {
			return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,tI,tII);
		}),{ fileName : "stx/nano/Slot.hx", lineNumber : 116, className : "stx.nano.SlotLift", methodName : "zip"});
	}
};
var stx_nano_Slot = {};
stx_nano_Slot.__properties__ = {get_self:"get_self"};
stx_nano_Slot._new = function(self) {
	var this1 = self;
	return this1;
};
stx_nano_Slot.lift = function(self) {
	return stx_nano_Slot._new(self);
};
stx_nano_Slot.prj = function(this1) {
	return this1;
};
stx_nano_Slot.get_self = function(this1) {
	return stx_nano_Slot._new(this1);
};
stx_nano_Slot.Ready = function(v,pos) {
	return new stx_nano_SlotCls(v,null,pos);
};
stx_nano_Slot.Guard = function(v,pos) {
	return new stx_nano_SlotCls(null,v,pos);
};
stx_nano_Slot.toSlot = function(ft) {
	return new stx_nano_SlotCls(null,ft,{ fileName : "stx/nano/Slot.hx", lineNumber : 53, className : "stx.nano._Slot.Slot_Impl_", methodName : "toSlot"});
};
stx_nano_Slot.fromFunSinkVoid = function(fn) {
	var v = haxe_ds_Option.None;
	var handler = function(h) {
		v = haxe_ds_Option.Some(h);
	};
	fn(handler);
	switch(v._hx_index) {
	case 0:
		var v1 = v.v;
		return stx_nano_Slot.Ready(v1,{ fileName : "stx/nano/Slot.hx", lineNumber : 62, className : "stx.nano._Slot.Slot_Impl_", methodName : "fromFunSinkVoid"});
	case 1:
		return stx_nano_Slot.Guard(tink_core_Future.irreversible(fn),{ fileName : "stx/nano/Slot.hx", lineNumber : 63, className : "stx.nano._Slot.Slot_Impl_", methodName : "fromFunSinkVoid"});
	}
};
var stx_nano_Stringable = {};
stx_nano_Stringable.lift = function(self) {
	return stx_nano_Stringable._new(self);
};
stx_nano_Stringable._new = function(self) {
	var this1 = self;
	return this1;
};
var stx_nano_TripleLift = function() { };
stx_nano_TripleLift.__name__ = "stx.nano.TripleLift";
stx_nano_TripleLift.map = function(self,fn) {
	return function(tp) {
		self(function(tI,tII,tIII) {
			tp(tI,tII,fn(tIII));
		});
	};
};
stx_nano_TripleLift.fst = function(self) {
	return stx_nano_TripleLift.detriple(self,function(tI,_,_1) {
		return tI;
	});
};
stx_nano_TripleLift.snd = function(self) {
	return stx_nano_TripleLift.detriple(self,function(_,tII,_1) {
		return tII;
	});
};
stx_nano_TripleLift.thd = function(self) {
	return stx_nano_TripleLift.detriple(self,function(_,_1,tIII) {
		return tIII;
	});
};
stx_nano_TripleLift.equals = function(lhs,rhs) {
	return stx_nano_TripleLift.detriple(lhs,function(t0I,t0II,t0III) {
		return stx_nano_TripleLift.detriple(rhs,function(t1I,t1II,t1III) {
			if(t0I == t1I && t0II == t1II) {
				return t0III == t1III;
			} else {
				return false;
			}
		});
	});
};
stx_nano_TripleLift.reduce = function(self,f_a,f_b,f_c,plus) {
	return stx_nano_TripleLift.detriple(self,function(tI,tII,tIII) {
		return plus(plus(f_a(tI),f_b(tII)),f_c(tIII));
	});
};
stx_nano_TripleLift.detriple = function(self,fn) {
	var out = null;
	self(function(tI,tII,tIII) {
		out = fn(tI,tII,tIII);
	});
	return out;
};
stx_nano_TripleLift.tup = function(self) {
	return stx_nano_TripleLift.detriple(self,stx_Tup3.tuple3);
};
stx_nano_TripleLift.toString = function(self) {
	return stx_nano_TripleLift.detriple(self,function(a,b,c) {
		return "(" + Std.string(a) + " " + Std.string(b) + " " + Std.string(c) + ")";
	});
};
var stx_nano_Triple = {};
stx_nano_Triple.toString = function(this1) {
	return stx_nano_TripleLift.toString(this1);
};
var stx_nano_Unique = {};
stx_nano_Unique.__properties__ = {get_self:"get_self"};
stx_nano_Unique._new = function(self) {
	var this1 = self;
	return this1;
};
stx_nano_Unique.lift = function(self) {
	return stx_nano_Unique._new(self);
};
stx_nano_Unique.pure = function(data) {
	return stx_nano_Unique.make(data,function() {
	});
};
stx_nano_Unique.make = function(data,rtid) {
	return stx_nano_Unique._new({ data : data, rtid : rtid});
};
stx_nano_Unique.prj = function(this1) {
	return this1;
};
stx_nano_Unique.get_self = function(this1) {
	return stx_nano_Unique._new(this1);
};
stx_nano_Unique.equals = function(this1,that) {
	return this1.rtid == that.rtid;
};
stx_nano_Unique.toT = function(this1) {
	return this1.data;
};
var stx_nano_VBlock = {};
stx_nano_VBlock.unit = function() {
	return function() {
	};
};
stx_nano_VBlock._new = function(self) {
	var this1 = self;
	return this1;
};
var stx_nano_Wildcard = $hxEnums["stx.nano.Wildcard"] = { __ename__:true,__constructs__:null
	,__: {_hx_name:"__",_hx_index:0,__enum__:"stx.nano.Wildcard",toString:$estr}
};
stx_nano_Wildcard.__constructs__ = [stx_nano_Wildcard.__];
var stx_nano_lift_LiftArrayNano = function() { };
stx_nano_lift_LiftArrayNano.__name__ = "stx.nano.lift.LiftArrayNano";
stx_nano_lift_LiftArrayNano.cross = function(self,that) {
	return stx_lift_ArrayLift.cross_with(self,that,function(tI,tII) {
		return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,tI,tII);
	});
};
stx_nano_lift_LiftArrayNano.zip = function(self,that) {
	return stx_lift_ArrayLift.zip_with(self,that,function(tI,tII) {
		return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,tI,tII);
	});
};
var stx_nano_lift_LiftNano = function() { };
stx_nano_lift_LiftNano.__name__ = "stx.nano.lift.LiftNano";
stx_nano_lift_LiftNano.nano = function(wildcard) {
	return new stx_nano_Module();
};
stx_nano_lift_LiftNano.arrd = function(wildcard,arr) {
	return arr;
};
stx_nano_lift_LiftNano.if_else = function(b,_if,_else) {
	if(b) {
		return _if();
	} else {
		return _else();
	}
};
stx_nano_lift_LiftNano.here = function(wildcard,pos) {
	return pos;
};
stx_nano_lift_LiftNano.test = function(wildcard,arr) {
	var runner = new haxe_unit_TestRunner();
	var t = $getIterator(arr);
	while(t.hasNext()) {
		var t1 = t.next();
		runner.add(t1);
	}
	runner.run();
};
stx_nano_lift_LiftNano.uuid = function(v,value) {
	if(value == null) {
		value = "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx";
	}
	var reg = new EReg("[xy]","g");
	return reg.map(value,function(reg) {
		var r = Math.random() * 16 | 0 | 0;
		var v = reg.matched(0) == "x" ? r : r & 3 | 8;
		return StringTools.hex(v);
	}).toLowerCase();
};
stx_nano_lift_LiftNano.sep = function(_) {
	var out = "/";
	return out;
};
stx_nano_lift_LiftNano.option = function(wildcard,v) {
	if(v == null) {
		return haxe_ds_Option.None;
	} else {
		return haxe_ds_Option.Some(v);
	}
};
stx_nano_lift_LiftNano.accept = function(wildcard,t) {
	return stx_nano_Res.accept(t);
};
stx_nano_lift_LiftNano.reject = function(wildcard,e) {
	return stx_nano_Res.reject(e);
};
stx_nano_lift_LiftNano.success = function(wildcard,t) {
	return stx_pico_Outcome.success(t);
};
stx_nano_lift_LiftNano.failure = function(wildcard,e) {
	return stx_pico_Outcome.failure(e);
};
stx_nano_lift_LiftNano.fault = function(wildcard,pos) {
	return stx_nano_Fault._new(pos);
};
stx_nano_lift_LiftNano.couple = function(wildcard,tI,tII) {
	return function(fn) {
		fn(tI,tII);
	};
};
stx_nano_lift_LiftNano.decouple = function(wildcard,fn) {
	return function(tp) {
		return stx_nano_CoupleLift.decouple(tp,fn);
	};
};
stx_nano_lift_LiftNano.triple = function(wildcard,tI,tII,tIII) {
	return function(fn) {
		fn(tI,tII,tIII);
	};
};
stx_nano_lift_LiftNano.detriple = function(wildcard,fn) {
	return function(tp) {
		return stx_nano_TripleLift.detriple(tp,fn);
	};
};
stx_nano_lift_LiftNano.toCouple = function(self) {
	return self;
};
stx_nano_lift_LiftNano.lbump = function(wildcard,tp) {
	return stx_nano_CoupleLift.decouple(tp,function(lhs,rhs) {
		var tmp;
		switch(lhs._hx_index) {
		case 0:
			var t = lhs.v;
			tmp = haxe_ds_Option.Some(stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,t,rhs));
			break;
		case 1:
			tmp = haxe_ds_Option.None;
			break;
		}
		return tmp;
	});
};
stx_nano_lift_LiftNano.rbump = function(wildcard,tp) {
	return stx_nano_CoupleLift.decouple(tp,function(lhs,rhs) {
		var tmp;
		switch(rhs._hx_index) {
		case 0:
			var t = rhs.v;
			tmp = haxe_ds_Option.Some(stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,lhs,t));
			break;
		case 1:
			tmp = haxe_ds_Option.None;
			break;
		}
		return tmp;
	});
};
stx_nano_lift_LiftNano.fromPos = function(pos) {
	return stx_nano_Position.fromPos(pos);
};
stx_nano_lift_LiftNano.future = function(wildcard) {
	var trigger = new tink_core_FutureTrigger();
	var future = trigger;
	return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,trigger,future);
};
stx_nano_lift_LiftNano.tracer = function(v,pos) {
	return function(t) {
		haxe_Log.trace(t,pos);
		return t;
	};
};
stx_nano_lift_LiftNano.traced = function(v,pos) {
	var infos = pos;
	return function(d) {
		haxe_Log.trace(d,infos);
	};
};
stx_nano_lift_LiftNano.through = function(__) {
	return function(v) {
		return v;
	};
};
stx_nano_lift_LiftNano.command = function(__,fn) {
	return function(v) {
		fn(v);
		return v;
	};
};
stx_nano_lift_LiftNano.perform = function(__,fn) {
	return function(v) {
		fn();
		return v;
	};
};
stx_nano_lift_LiftNano.execute = function(__,fn) {
	return function(v) {
		var _g = fn();
		if(_g._hx_index == 0) {
			var e = _g.v;
			return stx_nano_lift_LiftNano.reject(__,e);
		} else {
			return stx_nano_lift_LiftNano.accept(__,v);
		}
	};
};
stx_nano_lift_LiftNano.left = function(__,tI) {
	return haxe_ds_Either.Left(tI);
};
stx_nano_lift_LiftNano.right = function(__,tII) {
	return haxe_ds_Either.Right(tII);
};
stx_nano_lift_LiftNano.value = function(future) {
	var result = haxe_ds_Option.None;
	var cancelled = false;
	future.handle(function(x) {
		cancelled = true;
		result = haxe_ds_Option.Some(x);
	});
	return result;
};
stx_nano_lift_LiftNano.crack = function(wildcard,e) {
	throw haxe_Exception.thrown(e);
};
stx_nano_lift_LiftNano.report = function(wildcard,report) {
	if(report._hx_index == 0) {
		var e = report.v;
		throw haxe_Exception.thrown(e);
	}
};
stx_nano_lift_LiftNano.definition = function(wildcard,t) {
	return js_Boot.getClass(t);
};
stx_nano_lift_LiftNano.identifier = function(self) {
	return stx_pico_Identifier._new(self.__name__);
};
stx_nano_lift_LiftNano.vblock = function(wildcard,t) {
	return function() {
	};
};
stx_nano_lift_LiftNano.noop = function(wildcard) {
	return function(t) {
		return t;
	};
};
stx_nano_lift_LiftNano.nullify = function(wildcard) {
	return function(t) {
	};
};
stx_nano_lift_LiftNano.passthrough = function(wildcard,fn) {
	return function(t) {
		fn(t);
		return t;
	};
};
stx_nano_lift_LiftNano.not = function(bool) {
	return !bool;
};
stx_nano_lift_LiftNano.toPosition = function(pos) {
	return stx_nano_Position.fromPos(pos);
};
var stx_nano_lift_LiftOptionNano = function() { };
stx_nano_lift_LiftOptionNano.__name__ = "stx.nano.lift.LiftOptionNano";
stx_nano_lift_LiftOptionNano.zip = function(self,that) {
	if(self._hx_index == 0) {
		if(that._hx_index == 0) {
			var r = that.v;
			var l = self.v;
			return haxe_ds_Option.Some(stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,l,r));
		} else {
			return haxe_ds_Option.None;
		}
	} else {
		return haxe_ds_Option.None;
	}
};
stx_nano_lift_LiftOptionNano.fudge = function(self,err) {
	var self1 = stx_pico_Option.make(err);
	var v = new stx_nano_Err(haxe_ds_Option.Some(stx_nano_FailureSum.ERR("E_OptionForcedError")),null,stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/nano/lift/LiftOptionNano.hx", lineNumber : 11, className : "stx.nano.lift.LiftOptionNano", methodName : "fudge"}));
	if(self1._hx_index == 0) {
		var v1 = self1.v;
		err = v1;
	} else {
		err = v;
	}
	if(self == null) {
		throw haxe_Exception.thrown(err);
	} else {
		switch(self._hx_index) {
		case 0:
			var v = self.v;
			return v;
		case 1:
			throw haxe_Exception.thrown(err);
		}
	}
};
stx_nano_lift_LiftOptionNano.resolve = function(self,err,pos) {
	var tmp;
	switch(self._hx_index) {
	case 0:
		var t = self.v;
		tmp = stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,t);
		break;
	case 1:
		var this1 = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,pos);
		tmp = stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,new stx_nano_Err(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,stx_nano_FailureSum.ERR_OF(err)),haxe_ds_Option.None,this1));
		break;
	}
	return tmp;
};
var stx_nano_lift_LiftStringToResource = function() { };
stx_nano_lift_LiftStringToResource.__name__ = "stx.nano.lift.LiftStringToResource";
stx_nano_lift_LiftStringToResource.resource = function(stx,str,pos) {
	if(!stx_nano_Resource.exists(str)) {
		var this1 = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,pos);
		throw haxe_Exception.thrown(new stx_nano_Err(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,stx_nano_FailureSum.ERR_OF("E_ResourceNotFound")),haxe_ds_Option.None,this1));
	}
	var this1 = str;
	return this1;
};
var stx_pico_EitherLift = function() { };
stx_pico_EitherLift.__name__ = "stx.pico.EitherLift";
stx_pico_EitherLift.fold = function(self,lhs,rhs) {
	switch(self._hx_index) {
	case 0:
		var l = self.v;
		return lhs(l);
	case 1:
		var r = self.v;
		return rhs(r);
	}
};
stx_pico_EitherLift.map = function(self,fn) {
	return stx_pico_EitherLift.flat_map(self,function(x) {
		return haxe_ds_Either.Right(fn(x));
	});
};
stx_pico_EitherLift.flat_map = function(self,fn) {
	return stx_pico_EitherLift.fold(self,haxe_ds_Either.Left,function(r) {
		return fn(r);
	});
};
stx_pico_EitherLift.flip = function(self) {
	return stx_pico_EitherLift.fold(self,function(l) {
		return haxe_ds_Either.Right(l);
	},function(r) {
		return haxe_ds_Either.Left(r);
	});
};
stx_pico_EitherLift.get_data = function(self) {
	return stx_pico_EitherLift.fold(self,function(x) {
		return x;
	},function(x) {
		return x;
	});
};
stx_pico_EitherLift.is_left = function(self) {
	return stx_pico_EitherLift.fold(self,function(_) {
		return true;
	},function(_) {
		return false;
	});
};
stx_pico_EitherLift.is_right = function(self) {
	return stx_pico_EitherLift.fold(self,function(_) {
		return false;
	},function(_) {
		return true;
	});
};
var stx_pico_Either = {};
stx_pico_Either._new = function(self) {
	var this1 = self;
	return this1;
};
stx_pico_Either.lift = function(self) {
	return stx_pico_Either._new(self);
};
stx_pico_Either.left = function(tI) {
	return haxe_ds_Either.Left(tI);
};
stx_pico_Either.right = function(tII) {
	return haxe_ds_Either.Right(tII);
};
stx_pico_Either.prj = function(this1) {
	return this1;
};
var stx_pico_Identifier = {};
stx_pico_Identifier.__properties__ = {get_pack:"get_pack",get_name:"get_name"};
stx_pico_Identifier._new = function(self) {
	var this1 = self;
	return this1;
};
stx_pico_Identifier.get_name = function(this1) {
	var self = stx_lift_ArrayLift.last(this1.split("."));
	if(self._hx_index == 0) {
		var v = self.v;
		return v;
	} else {
		return "?";
	}
};
stx_pico_Identifier.get_pack = function(this1) {
	return stx_lift_ArrayLift.rdropn(this1.split("."),1);
};
var stx_pico_OptionLift = function() { };
stx_pico_OptionLift.__name__ = "stx.pico.OptionLift";
stx_pico_OptionLift.fold = function(self,ok,no) {
	switch(self._hx_index) {
	case 0:
		var t = self.v;
		return ok(t);
	case 1:
		return no();
	}
};
stx_pico_OptionLift.map = function(self,f) {
	var tmp;
	switch(self._hx_index) {
	case 0:
		var t = self.v;
		tmp = haxe_ds_Option.Some(f(t));
		break;
	case 1:
		tmp = haxe_ds_Option.None;
		break;
	}
	return tmp;
};
stx_pico_OptionLift.flat_map = function(self,f) {
	var out = stx_pico_OptionLift.map(self,f);
	return stx_pico_Option.flatten(out);
};
stx_pico_OptionLift.or = function(self,thunk) {
	var tmp;
	switch(self._hx_index) {
	case 0:
		var t = self.v;
		tmp = haxe_ds_Option.Some(t);
		break;
	case 1:
		tmp = thunk();
		break;
	}
	return tmp;
};
stx_pico_OptionLift.filter = function(self,fn) {
	return stx_pico_OptionLift.flat_map(self,function(v) {
		if(fn(v)) {
			return haxe_ds_Option.Some(v);
		} else {
			return haxe_ds_Option.None;
		}
	});
};
stx_pico_OptionLift.def = function(self,thunk) {
	if(self._hx_index == 0) {
		var v = self.v;
		return v;
	} else {
		return thunk();
	}
};
stx_pico_OptionLift.defv = function(self,v) {
	if(self._hx_index == 0) {
		var v1 = self.v;
		return v1;
	} else {
		return v;
	}
};
stx_pico_OptionLift.is_defined = function(self) {
	switch(self._hx_index) {
	case 0:
		var t = self.v;
		return true;
	case 1:
		return false;
	}
};
stx_pico_OptionLift.iterator = function(self) {
	var done = false;
	return { hasNext : function() {
		if(!done) {
			return stx_pico_OptionLift.is_defined(self);
		} else {
			return false;
		}
	}, next : function() {
		done = true;
		if(self._hx_index == 0) {
			var v = self.v;
			return v;
		} else {
			return null;
		}
	}};
};
stx_pico_OptionLift.merge = function(self,that,fn) {
	switch(self._hx_index) {
	case 0:
		var _g = self.v;
		switch(that._hx_index) {
		case 0:
			var r = that.v;
			var l = _g;
			return haxe_ds_Option.Some(fn(l,r));
		case 1:
			var l = _g;
			return haxe_ds_Option.Some(l);
		}
		break;
	case 1:
		if(that._hx_index == 0) {
			var r = that.v;
			return haxe_ds_Option.Some(r);
		} else {
			return haxe_ds_Option.None;
		}
		break;
	}
};
stx_pico_OptionLift.toArray = function(self) {
	switch(self._hx_index) {
	case 0:
		var v = self.v;
		return [v];
	case 1:
		return [];
	}
};
stx_pico_OptionLift.fudge = function(self) {
	switch(self._hx_index) {
	case 0:
		var t = self.v;
		return t;
	case 1:
		throw haxe_Exception.thrown("empty Option");
	}
};
stx_pico_OptionLift.toString = function(self) {
	switch(self._hx_index) {
	case 0:
		var t = self.v;
		return "" + Std.string(t);
	case 1:
		return "<undefined>";
	}
};
stx_pico_OptionLift.prj = function(self) {
	return self;
};
var stx_pico_Option = {};
stx_pico_Option._new = function(self) {
	var this1 = self;
	return this1;
};
stx_pico_Option.fromNullT = function(v) {
	return stx_pico_Option.make(v);
};
stx_pico_Option.unit = function() {
	return haxe_ds_Option.None;
};
stx_pico_Option.pure = function(t) {
	return haxe_ds_Option.Some(t);
};
stx_pico_Option.make = function(t) {
	if(t == null) {
		return haxe_ds_Option.None;
	} else {
		return haxe_ds_Option.Some(t);
	}
};
stx_pico_Option.flatten = function(self) {
	var _g = stx_pico_OptionLift.prj(self);
	switch(_g._hx_index) {
	case 0:
		var next = _g.v;
		return next;
	case 1:
		return haxe_ds_Option.None;
	}
};
stx_pico_Option.toString = function(this1) {
	return stx_pico_Option._.toString(this1);
};
var stx_pico_OutcomeSum = $hxEnums["stx.pico.OutcomeSum"] = { __ename__:true,__constructs__:null
	,Success: ($_=function(t) { return {_hx_index:0,t:t,__enum__:"stx.pico.OutcomeSum",toString:$estr}; },$_._hx_name="Success",$_.__params__ = ["t"],$_)
	,Failure: ($_=function(e) { return {_hx_index:1,e:e,__enum__:"stx.pico.OutcomeSum",toString:$estr}; },$_._hx_name="Failure",$_.__params__ = ["e"],$_)
};
stx_pico_OutcomeSum.__constructs__ = [stx_pico_OutcomeSum.Success,stx_pico_OutcomeSum.Failure];
var stx_pico_OutcomeLift = function() { };
stx_pico_OutcomeLift.__name__ = "stx.pico.OutcomeLift";
stx_pico_OutcomeLift.map = function(self,fn) {
	return stx_pico_OutcomeLift.flat_map(self,function(x) {
		return stx_pico_OutcomeSum.Success(fn(x));
	});
};
stx_pico_OutcomeLift.flat_map = function(self,fn) {
	var tmp;
	switch(self._hx_index) {
	case 0:
		var t = self.t;
		tmp = fn(t);
		break;
	case 1:
		var e = self.e;
		tmp = stx_pico_OutcomeSum.Failure(e);
		break;
	}
	return stx_pico_Outcome.lift(tmp);
};
stx_pico_OutcomeLift.fold = function(self,fn,er) {
	switch(self._hx_index) {
	case 0:
		var t = self.t;
		return fn(t);
	case 1:
		var e = self.e;
		return er(e);
	}
};
stx_pico_OutcomeLift.fudge = function(self) {
	switch(self._hx_index) {
	case 0:
		var t = self.t;
		return t;
	case 1:
		var e = self.e;
		throw haxe_Exception.thrown(e);
	}
};
stx_pico_OutcomeLift.elide = function(self) {
	var tmp;
	switch(self._hx_index) {
	case 0:
		var t = self.t;
		tmp = stx_pico_OutcomeSum.Failure(t);
		break;
	case 1:
		var e = self.e;
		tmp = stx_pico_OutcomeSum.Success(e);
		break;
	}
	return tmp;
};
stx_pico_OutcomeLift.value = function(self) {
	var tmp;
	switch(self._hx_index) {
	case 0:
		var t = self.t;
		tmp = stx_pico_Option.pure(t);
		break;
	case 1:
		var e = self.e;
		tmp = stx_pico_Option.unit();
		break;
	}
	return tmp;
};
stx_pico_OutcomeLift.error = function(self) {
	var tmp;
	switch(self._hx_index) {
	case 0:
		var t = self.t;
		tmp = stx_pico_Option.unit();
		break;
	case 1:
		var e = self.e;
		tmp = stx_pico_Option.pure(e);
		break;
	}
	return tmp;
};
var stx_pico_Outcome = {};
stx_pico_Outcome.__properties__ = {get_self:"get_self"};
stx_pico_Outcome._new = function(self) {
	var this1 = self;
	return this1;
};
stx_pico_Outcome.lift = function(self) {
	return stx_pico_Outcome._new(self);
};
stx_pico_Outcome.success = function(t) {
	return stx_pico_Outcome.lift(stx_pico_OutcomeSum.Success(t));
};
stx_pico_Outcome.failure = function(e) {
	return stx_pico_Outcome.lift(stx_pico_OutcomeSum.Failure(e));
};
stx_pico_Outcome.prj = function(this1) {
	return this1;
};
stx_pico_Outcome.get_self = function(this1) {
	return stx_pico_Outcome.lift(this1);
};
var tink_Clone = function() { };
tink_Clone.__name__ = "tink.Clone";
var tink_core_Annex = function(target) {
	this.target = target;
	this.registry = new haxe_ds_ObjectMap();
};
tink_core_Annex.__name__ = "tink.core.Annex";
tink_core_Annex.prototype = {
	target: null
	,registry: null
	,__class__: tink_core_Annex
};
var tink_core_Callback = {};
tink_core_Callback._new = function(f) {
	var this1 = f;
	return this1;
};
tink_core_Callback.toFunction = function(this1) {
	return this1;
};
tink_core_Callback.invoke = function(this1,data) {
	if(tink_core_Callback.depth < 500) {
		tink_core_Callback.depth++;
		this1(data);
		tink_core_Callback.depth--;
	} else {
		tink_core_Callback.defer(function() {
			this1(data);
		});
	}
};
tink_core_Callback.fromNiladic = function(f) {
	return f;
};
tink_core_Callback.fromMany = function(callbacks) {
	return function(v) {
		var _g = 0;
		while(_g < callbacks.length) {
			var callback = callbacks[_g];
			++_g;
			tink_core_Callback.invoke(callback,v);
		}
	};
};
tink_core_Callback.defer = function(f) {
	process.nextTick(f);
};
var tink_core_LinkObject = function() { };
tink_core_LinkObject.__name__ = "tink.core.LinkObject";
tink_core_LinkObject.__isInterface__ = true;
tink_core_LinkObject.prototype = {
	cancel: null
	,__class__: tink_core_LinkObject
};
var tink_core_CallbackLinkRef = function() {
};
tink_core_CallbackLinkRef.__name__ = "tink.core.CallbackLinkRef";
tink_core_CallbackLinkRef.__interfaces__ = [tink_core_LinkObject];
tink_core_CallbackLinkRef.prototype = {
	link: null
	,cancel: function() {
		var this1 = this.link;
		if(this1 != null) {
			this1.cancel();
		}
	}
	,__class__: tink_core_CallbackLinkRef
};
var tink_core_CallbackLink = {};
tink_core_CallbackLink._new = function(link) {
	var this1 = new tink_core_SimpleLink(link);
	return this1;
};
tink_core_CallbackLink.cancel = function(this1) {
	if(this1 != null) {
		this1.cancel();
	}
};
tink_core_CallbackLink.dissolve = function(this1) {
	if(this1 != null) {
		this1.cancel();
	}
};
tink_core_CallbackLink.noop = function() {
};
tink_core_CallbackLink.toFunction = function(this1) {
	if(this1 == null) {
		return tink_core_CallbackLink.noop;
	} else {
		return $bind(this1,this1.cancel);
	}
};
tink_core_CallbackLink.toCallback = function(this1) {
	if(this1 == null) {
		return tink_core_CallbackLink.noop;
	} else {
		return $bind(this1,this1.cancel);
	}
};
tink_core_CallbackLink.fromFunction = function(f) {
	var this1 = new tink_core_SimpleLink(f);
	return this1;
};
tink_core_CallbackLink.join = function(this1,b) {
	return new tink_core__$Callback_LinkPair(this1,b);
};
tink_core_CallbackLink.fromMany = function(callbacks) {
	var this1 = new tink_core_SimpleLink(function() {
		if(callbacks != null) {
			var _g = 0;
			while(_g < callbacks.length) {
				var cb = callbacks[_g];
				++_g;
				if(cb != null) {
					cb.cancel();
				}
			}
		} else {
			callbacks = null;
		}
	});
	return this1;
};
var tink_core_SimpleLink = function(f) {
	this.f = f;
};
tink_core_SimpleLink.__name__ = "tink.core.SimpleLink";
tink_core_SimpleLink.__interfaces__ = [tink_core_LinkObject];
tink_core_SimpleLink.prototype = {
	f: null
	,cancel: function() {
		if(this.f != null) {
			this.f();
			this.f = null;
		}
	}
	,__class__: tink_core_SimpleLink
};
var tink_core__$Callback_LinkPair = function(a,b) {
	this.dissolved = false;
	this.a = a;
	this.b = b;
};
tink_core__$Callback_LinkPair.__name__ = "tink.core._Callback.LinkPair";
tink_core__$Callback_LinkPair.__interfaces__ = [tink_core_LinkObject];
tink_core__$Callback_LinkPair.prototype = {
	a: null
	,b: null
	,dissolved: null
	,cancel: function() {
		if(!this.dissolved) {
			this.dissolved = true;
			var this1 = this.a;
			if(this1 != null) {
				this1.cancel();
			}
			var this1 = this.b;
			if(this1 != null) {
				this1.cancel();
			}
			this.a = null;
			this.b = null;
		}
	}
	,__class__: tink_core__$Callback_LinkPair
};
var tink_core__$Callback_ListCell = function(cb,list) {
	if(cb == null) {
		throw haxe_Exception.thrown("callback expected but null received");
	}
	this.cb = cb;
	this.list = list;
};
tink_core__$Callback_ListCell.__name__ = "tink.core._Callback.ListCell";
tink_core__$Callback_ListCell.__interfaces__ = [tink_core_LinkObject];
tink_core__$Callback_ListCell.prototype = {
	cb: null
	,list: null
	,invoke: function(data) {
		if(this.list != null) {
			this.cb(data);
		}
	}
	,clear: function() {
		this.cb = null;
		this.list = null;
	}
	,cancel: function() {
		if(this.list != null) {
			var list = this.list;
			this.cb = null;
			this.list = null;
			if(--list.used <= list.cells.length >> 1) {
				list.compact();
			}
		}
	}
	,__class__: tink_core__$Callback_ListCell
};
var tink_core_Disposable = function() { };
tink_core_Disposable.__name__ = "tink.core.Disposable";
tink_core_Disposable.__isInterface__ = true;
tink_core_Disposable.prototype = {
	get_disposed: null
	,ondispose: null
	,__class__: tink_core_Disposable
	,__properties__: {get_disposed:"get_disposed"}
};
var tink_core_OwnedDisposable = function() { };
tink_core_OwnedDisposable.__name__ = "tink.core.OwnedDisposable";
tink_core_OwnedDisposable.__isInterface__ = true;
tink_core_OwnedDisposable.__interfaces__ = [tink_core_Disposable];
tink_core_OwnedDisposable.prototype = {
	dispose: null
	,__class__: tink_core_OwnedDisposable
};
var tink_core_SimpleDisposable = function(dispose) {
	this.disposeHandlers = [];
	this.f = dispose;
};
tink_core_SimpleDisposable.__name__ = "tink.core.SimpleDisposable";
tink_core_SimpleDisposable.__interfaces__ = [tink_core_OwnedDisposable];
tink_core_SimpleDisposable.noop = function() {
};
tink_core_SimpleDisposable.prototype = {
	f: null
	,disposeHandlers: null
	,get_disposed: function() {
		return this.disposeHandlers == null;
	}
	,ondispose: function(d) {
		var _g = this.disposeHandlers;
		if(_g == null) {
			d();
		} else {
			var v = _g;
			v.push(d);
		}
	}
	,dispose: function() {
		var _g = this.disposeHandlers;
		if(_g != null) {
			var v = _g;
			this.disposeHandlers = null;
			var f = this.f;
			this.f = tink_core_SimpleDisposable.noop;
			f();
			var _g = 0;
			while(_g < v.length) {
				var h = v[_g];
				++_g;
				h();
			}
		}
	}
	,__class__: tink_core_SimpleDisposable
	,__properties__: {get_disposed:"get_disposed"}
};
var tink_core_CallbackList = function(destructive) {
	if(destructive == null) {
		destructive = false;
	}
	this.onfill = function() {
	};
	this.ondrain = function() {
	};
	this.busy = false;
	this.queue = [];
	this.used = 0;
	var _gthis = this;
	tink_core_SimpleDisposable.call(this,function() {
		if(!_gthis.busy) {
			_gthis.destroy();
		}
	});
	this.destructive = destructive;
	this.cells = [];
};
tink_core_CallbackList.__name__ = "tink.core.CallbackList";
tink_core_CallbackList.__super__ = tink_core_SimpleDisposable;
tink_core_CallbackList.prototype = $extend(tink_core_SimpleDisposable.prototype,{
	destructive: null
	,cells: null
	,get_length: function() {
		return this.used;
	}
	,used: null
	,queue: null
	,busy: null
	,ondrain: null
	,onfill: null
	,release: function() {
		if(--this.used <= this.cells.length >> 1) {
			this.compact();
		}
	}
	,destroy: function() {
		var _g = 0;
		var _g1 = this.cells;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.cb = null;
			c.list = null;
		}
		this.queue = null;
		this.cells = null;
		if(this.used > 0) {
			this.used = 0;
			var fn = this.ondrain;
			if(tink_core_Callback.depth < 500) {
				tink_core_Callback.depth++;
				fn();
				tink_core_Callback.depth--;
			} else {
				tink_core_Callback.defer(fn);
			}
		}
	}
	,drain: function() {
		var fn = this.ondrain;
		if(tink_core_Callback.depth < 500) {
			tink_core_Callback.depth++;
			fn();
			tink_core_Callback.depth--;
		} else {
			tink_core_Callback.defer(fn);
		}
	}
	,add: function(cb) {
		if(this.disposeHandlers == null) {
			return null;
		}
		var node = new tink_core__$Callback_ListCell(cb,this);
		this.cells.push(node);
		if(this.used++ == 0) {
			var fn = this.onfill;
			if(tink_core_Callback.depth < 500) {
				tink_core_Callback.depth++;
				fn();
				tink_core_Callback.depth--;
			} else {
				tink_core_Callback.defer(fn);
			}
		}
		return node;
	}
	,invoke: function(data) {
		var _gthis = this;
		if(tink_core_Callback.depth < 500) {
			tink_core_Callback.depth++;
			if(_gthis.disposeHandlers != null) {
				if(_gthis.busy) {
					if(_gthis.destructive != true) {
						var _g = $bind(_gthis,_gthis.invoke);
						var data1 = data;
						var tmp = function() {
							_g(data1);
						};
						_gthis.queue.push(tmp);
					}
				} else {
					_gthis.busy = true;
					if(_gthis.destructive) {
						_gthis.dispose();
					}
					var length = _gthis.cells.length;
					var _g1 = 0;
					var _g2 = length;
					while(_g1 < _g2) {
						var i = _g1++;
						var _this = _gthis.cells[i];
						if(_this.list != null) {
							_this.cb(data);
						}
					}
					_gthis.busy = false;
					if(_gthis.disposeHandlers == null) {
						_gthis.destroy();
					} else {
						if(_gthis.used < _gthis.cells.length) {
							_gthis.compact();
						}
						if(_gthis.queue.length > 0) {
							(_gthis.queue.shift())();
						}
					}
				}
			}
			tink_core_Callback.depth--;
		} else {
			tink_core_Callback.defer(function() {
				if(_gthis.disposeHandlers != null) {
					if(_gthis.busy) {
						if(_gthis.destructive != true) {
							var _g = $bind(_gthis,_gthis.invoke);
							var data1 = data;
							var tmp = function() {
								_g(data1);
							};
							_gthis.queue.push(tmp);
						}
					} else {
						_gthis.busy = true;
						if(_gthis.destructive) {
							_gthis.dispose();
						}
						var length = _gthis.cells.length;
						var _g1 = 0;
						var _g2 = length;
						while(_g1 < _g2) {
							var i = _g1++;
							var _this = _gthis.cells[i];
							if(_this.list != null) {
								_this.cb(data);
							}
						}
						_gthis.busy = false;
						if(_gthis.disposeHandlers == null) {
							_gthis.destroy();
						} else {
							if(_gthis.used < _gthis.cells.length) {
								_gthis.compact();
							}
							if(_gthis.queue.length > 0) {
								(_gthis.queue.shift())();
							}
						}
					}
				}
			});
		}
	}
	,compact: function() {
		if(this.busy) {
			return;
		} else if(this.used == 0) {
			this.resize(0);
			var fn = this.ondrain;
			if(tink_core_Callback.depth < 500) {
				tink_core_Callback.depth++;
				fn();
				tink_core_Callback.depth--;
			} else {
				tink_core_Callback.defer(fn);
			}
		} else {
			var compacted = 0;
			var _g = 0;
			var _g1 = this.cells.length;
			while(_g < _g1) {
				var i = _g++;
				var _g2 = this.cells[i];
				var _g3 = _g2.list;
				if(_g2.cb != null) {
					var v = _g2;
					if(compacted != i) {
						this.cells[compacted] = v;
					}
					if(++compacted == this.used) {
						break;
					}
				}
			}
			this.resize(this.used);
		}
	}
	,resize: function(length) {
		this.cells.length = length;
	}
	,clear: function() {
		if(this.busy) {
			this.queue.push($bind(this,this.clear));
		}
		var _g = 0;
		var _g1 = this.cells;
		while(_g < _g1.length) {
			var cell = _g1[_g];
			++_g;
			cell.cb = null;
			cell.list = null;
		}
		this.resize(0);
	}
	,__class__: tink_core_CallbackList
	,__properties__: $extend(tink_core_SimpleDisposable.prototype.__properties__,{get_length:"get_length"})
});
var tink_core_AlreadyDisposed = function() {
};
tink_core_AlreadyDisposed.__name__ = "tink.core.AlreadyDisposed";
tink_core_AlreadyDisposed.__interfaces__ = [tink_core_OwnedDisposable];
tink_core_AlreadyDisposed.prototype = {
	get_disposed: function() {
		return true;
	}
	,ondispose: function(d) {
		d();
	}
	,dispose: function() {
	}
	,__class__: tink_core_AlreadyDisposed
	,__properties__: {get_disposed:"get_disposed"}
};
var tink_core_TypedError = function(code,message,pos) {
	if(code == null) {
		code = 500;
	}
	this.isTinkError = true;
	this.code = code;
	this.message = message;
	this.pos = pos;
	this.exceptionStack = [];
	this.callStack = [];
};
tink_core_TypedError.__name__ = "tink.core.TypedError";
tink_core_TypedError.withData = function(code,message,data,pos) {
	return tink_core_TypedError.typed(code,message,data,pos);
};
tink_core_TypedError.typed = function(code,message,data,pos) {
	var ret = new tink_core_TypedError(code,message,pos);
	ret.data = data;
	return ret;
};
tink_core_TypedError.ofJsError = function(e,pos) {
	return tink_core_TypedError.withData(500,e.message,e,pos);
};
tink_core_TypedError.asError = function(v) {
	if(v != null && v.isTinkError) {
		return v;
	} else {
		return null;
	}
};
tink_core_TypedError.catchExceptions = function(f,report,pos) {
	try {
		return tink_core_Outcome.Success(f());
	} catch( _g ) {
		haxe_NativeStackTrace.lastError = _g;
		var e = haxe_Exception.caught(_g).unwrap();
		var e1 = tink_core_TypedError.asError(e);
		var tmp;
		if(e1 == null) {
			tmp = report == null ? tink_core_TypedError.withData(null,"Unexpected Error",e1,pos) : report(e1);
		} else {
			var e = e1;
			tmp = e;
		}
		return tink_core_Outcome.Failure(tmp);
	}
};
tink_core_TypedError.reporter = function(code,message,pos) {
	return function(e) {
		return tink_core_TypedError.withData(code,message,e,pos);
	};
};
tink_core_TypedError.rethrow = function(any) {
	throw haxe_Exception.thrown(any);
};
tink_core_TypedError.tryFinally = function(f,cleanup) {
	try { return f(); } finally { cleanup(); }
	return null;
};
tink_core_TypedError.prototype = {
	message: null
	,code: null
	,data: null
	,pos: null
	,callStack: null
	,exceptionStack: null
	,isTinkError: null
	,printPos: function() {
		return this.pos.className + "." + this.pos.methodName + ":" + this.pos.lineNumber;
	}
	,toString: function() {
		var ret = "Error#" + this.code + ": " + this.message;
		if(this.pos != null) {
			ret += " @ " + this.printPos();
		}
		return ret;
	}
	,toPromise: function() {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(this)));
	}
	,throwSelf: function() {
		var any = this;
		throw haxe_Exception.thrown(any);
	}
	,toJsError: function() {
		var value = this.data;
		var _g = ((value) instanceof Error) ? value : null;
		if(_g == null) {
			return new tink_core__$Error_TinkError(this);
		} else {
			var e = _g;
			return e;
		}
	}
	,__class__: tink_core_TypedError
};
var tink_core_Stack = {};
tink_core_Stack.toString = function(this1) {
	return "Error stack not available. Compile with -D error_stack.";
};
var tink_core__$Error_TinkError = function(e) {
	Error.call(this);
	this.message = e.message;
	this.data = e;
};
tink_core__$Error_TinkError.__name__ = "tink.core._Error.TinkError";
tink_core__$Error_TinkError.__super__ = Error;
tink_core__$Error_TinkError.prototype = $extend(Error.prototype,{
	data: null
	,__class__: tink_core__$Error_TinkError
});
var tink_core__$Future_FutureObject = function() { };
tink_core__$Future_FutureObject.__name__ = "tink.core._Future.FutureObject";
tink_core__$Future_FutureObject.__isInterface__ = true;
tink_core__$Future_FutureObject.prototype = {
	getStatus: null
	,handle: null
	,eager: null
	,__class__: tink_core__$Future_FutureObject
};
var tink_core__$Future_NeverFuture = function() {
};
tink_core__$Future_NeverFuture.__name__ = "tink.core._Future.NeverFuture";
tink_core__$Future_NeverFuture.__interfaces__ = [tink_core__$Future_FutureObject];
tink_core__$Future_NeverFuture.prototype = {
	getStatus: function() {
		return tink_core_FutureStatus.NeverEver;
	}
	,handle: function(callback) {
		return null;
	}
	,eager: function() {
	}
	,__class__: tink_core__$Future_NeverFuture
};
var tink_core__$Lazy_Computable = function() { };
tink_core__$Lazy_Computable.__name__ = "tink.core._Lazy.Computable";
tink_core__$Lazy_Computable.__isInterface__ = true;
tink_core__$Lazy_Computable.prototype = {
	isComputed: null
	,compute: null
	,underlying: null
	,__class__: tink_core__$Lazy_Computable
};
var tink_core__$Lazy_LazyObject = function() { };
tink_core__$Lazy_LazyObject.__name__ = "tink.core._Lazy.LazyObject";
tink_core__$Lazy_LazyObject.__isInterface__ = true;
tink_core__$Lazy_LazyObject.__interfaces__ = [tink_core__$Lazy_Computable];
tink_core__$Lazy_LazyObject.prototype = {
	get: null
	,__class__: tink_core__$Lazy_LazyObject
};
var tink_core__$Lazy_LazyConst = function(value) {
	this.value = value;
};
tink_core__$Lazy_LazyConst.__name__ = "tink.core._Lazy.LazyConst";
tink_core__$Lazy_LazyConst.__interfaces__ = [tink_core__$Lazy_LazyObject];
tink_core__$Lazy_LazyConst.prototype = {
	value: null
	,isComputed: function() {
		return true;
	}
	,get: function() {
		return this.value;
	}
	,compute: function() {
	}
	,underlying: function() {
		return null;
	}
	,__class__: tink_core__$Lazy_LazyConst
};
var tink_core__$Future_SyncFuture = function(value) {
	this.value = value;
};
tink_core__$Future_SyncFuture.__name__ = "tink.core._Future.SyncFuture";
tink_core__$Future_SyncFuture.__interfaces__ = [tink_core__$Future_FutureObject];
tink_core__$Future_SyncFuture.prototype = {
	value: null
	,getStatus: function() {
		return tink_core_FutureStatus.Ready(this.value);
	}
	,handle: function(cb) {
		tink_core_Callback.invoke(cb,tink_core_Lazy.get(this.value));
		return null;
	}
	,eager: function() {
		if(!this.value.isComputed()) {
			tink_core_Lazy.get(this.value);
		}
	}
	,__class__: tink_core__$Future_SyncFuture
};
var tink_core_Future = {};
tink_core_Future.__properties__ = {get_status:"get_status"};
tink_core_Future.get_status = function(this1) {
	return this1.getStatus();
};
tink_core_Future._new = function(wakeup) {
	var this1 = new tink_core__$Future_SuspendableFuture(wakeup);
	return this1;
};
tink_core_Future.handle = function(this1,callback) {
	return this1.handle(callback);
};
tink_core_Future.eager = function(this1) {
	this1.eager();
	return this1;
};
tink_core_Future.noise = function(this1) {
	if(this1.getStatus()._hx_index == 4) {
		return tink_core_Future.NEVER;
	} else {
		return tink_core_Future.map(this1,function(_) {
			return null;
		});
	}
};
tink_core_Future.first = function(this1,that) {
	var _g = this1;
	var _g1 = _g.getStatus();
	switch(_g1._hx_index) {
	case 3:
		var _g2 = _g1.result;
		var _g1 = that.getStatus();
		switch(_g1._hx_index) {
		case 3:
			var _g2 = _g1.result;
			var v = _g;
			return v;
		case 4:
			var v = _g;
			return v;
		default:
			var v = _g;
			return v;
		}
		break;
	case 4:
		var v = that;
		return v;
	default:
		var _g1 = that.getStatus();
		switch(_g1._hx_index) {
		case 3:
			var _g2 = _g1.result;
			var v = that;
			return v;
		case 4:
			var v = _g;
			return v;
		default:
			return new tink_core__$Future_SuspendableFuture(function(fire) {
				return new tink_core__$Callback_LinkPair(this1.handle(fire),that.handle(fire));
			});
		}
	}
};
tink_core_Future.map = function(this1,f,gather) {
	var _g = this1.getStatus();
	switch(_g._hx_index) {
	case 3:
		var l = _g.result;
		var this2 = l;
		var f1 = f;
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyFunc(function() {
			return f1(this2.get());
		},this2));
	case 4:
		return tink_core_Future.NEVER;
	default:
		return new tink_core__$Future_SuspendableFuture(function(fire) {
			return this1.handle(function(v) {
				fire(f(v));
			});
		});
	}
};
tink_core_Future.flatMap = function(this1,next,gather) {
	var _g = this1.getStatus();
	switch(_g._hx_index) {
	case 3:
		var l = _g.result;
		return new tink_core__$Future_SuspendableFuture(function(fire) {
			return next(tink_core_Lazy.get(l)).handle(function(v) {
				fire(v);
			});
		});
	case 4:
		return tink_core_Future.NEVER;
	default:
		return new tink_core__$Future_SuspendableFuture(function($yield) {
			var inner = new tink_core_CallbackLinkRef();
			var outer = this1.handle(function(v) {
				var outer = next(v).handle($yield);
				inner.link = outer;
			});
			return new tink_core__$Callback_LinkPair(outer,inner);
		});
	}
};
tink_core_Future.next = function(this1,n) {
	return tink_core_Future.flatMap(this1,n);
};
tink_core_Future.gather = function(this1) {
	return this1;
};
tink_core_Future.merge = function(this1,that,combine) {
	var _g = this1.getStatus();
	var _g1 = that.getStatus();
	if(_g._hx_index == 4) {
		return tink_core_Future.NEVER;
	} else if(_g1._hx_index == 4) {
		return tink_core_Future.NEVER;
	} else {
		return new tink_core__$Future_SuspendableFuture(function($yield) {
			var check = function(v) {
				var _g = this1.getStatus();
				var _g1 = that.getStatus();
				if(_g._hx_index == 3) {
					if(_g1._hx_index == 3) {
						var b = _g1.result;
						var a = _g.result;
						$yield(combine(tink_core_Lazy.get(a),tink_core_Lazy.get(b)));
					}
				}
			};
			return new tink_core__$Callback_LinkPair(this1.handle(check),that.handle(check));
		});
	}
};
tink_core_Future.flatten = function(f) {
	return tink_core_Future.flatMap(f,function(v) {
		return v;
	});
};
tink_core_Future.ofJsPromise = function(promise) {
	return tink_core_Future.irreversible(function(cb) {
		promise.then(function(a) {
			var _g = cb;
			var a1 = tink_core_Outcome.Success(a);
			tink_core_Callback.defer(function() {
				_g(a1);
			});
		},function(e) {
			cb(tink_core_Outcome.Failure(tink_core_TypedError.withData(null,e.message,e,{ fileName : "tink/core/Future.hx", lineNumber : 158, className : "tink.core._Future.Future_Impl_", methodName : "ofJsPromise"})));
		});
	});
};
tink_core_Future.fromNever = function(l) {
	return l;
};
tink_core_Future.ofAny = function(v) {
	return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(v));
};
tink_core_Future.asPromise = function(s) {
	return s;
};
tink_core_Future.ofMany = function(futures,gather) {
	return tink_core_Future.inSequence(futures);
};
tink_core_Future.inParallel = function(futures,concurrency) {
	return tink_core_Future.many(futures,concurrency);
};
tink_core_Future.inSequence = function(futures) {
	return tink_core_Future.many(futures,1);
};
tink_core_Future.many = function(a,concurrency) {
	return tink_core_Future.processMany(a,concurrency,tink_core_Outcome.Success,function(o) {
		return tink_core_OutcomeTools.orNull(o);
	});
};
tink_core_Future.processMany = function(a,concurrency,fn,lift) {
	if(a.length == 0) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(lift(tink_core_Outcome.Success([]))));
	} else {
		var this1 = new tink_core__$Future_SuspendableFuture(function($yield) {
			var links = [];
			var _g = [];
			var _g1 = 0;
			while(_g1 < a.length) {
				var x = a[_g1];
				++_g1;
				_g.push(null);
			}
			var ret = _g;
			var index = 0;
			var pending = 0;
			var done = false;
			var concurrency1;
			if(concurrency == null) {
				concurrency1 = a.length;
			} else {
				var v = concurrency;
				concurrency1 = v < 1 ? 1 : v > a.length ? a.length : v;
			}
			var fireWhenReady = function() {
				if(index == ret.length) {
					if(pending == 0) {
						var v = lift(tink_core_Outcome.Success(ret));
						done = true;
						$yield(v);
						return true;
					} else {
						return false;
					}
				} else {
					return false;
				}
			};
			var step = null;
			step = function() {
				if(!done && !fireWhenReady()) {
					while(index < ret.length) {
						index += 1;
						var index1 = [index - 1];
						var p = a[index1[0]];
						var check = [(function(index) {
							return function(o) {
								var _g = fn(o);
								switch(_g._hx_index) {
								case 0:
									var v = _g.data;
									ret[index[0]] = v;
									fireWhenReady();
									break;
								case 1:
									var e = _g.failure;
									var _g = 0;
									while(_g < links.length) {
										var l = links[_g];
										++_g;
										if(l != null) {
											l.cancel();
										}
									}
									var v = lift(tink_core_Outcome.Failure(e));
									done = true;
									$yield(v);
									break;
								}
							};
						})(index1)];
						var _g = p.getStatus();
						if(_g._hx_index == 3) {
							var _hx_tmp;
							_hx_tmp = tink_core_Lazy.get(_g.result);
							var v = _hx_tmp;
							check[0](v);
							if(!done) {
								continue;
							}
						} else {
							pending += 1;
							links.push(p.handle((function(check) {
								return function(o) {
									pending -= 1;
									check[0](o);
									if(!done) {
										step();
									}
								};
							})(check)));
						}
						break;
					}
				}
			};
			var _g = 0;
			var _g1 = concurrency1;
			while(_g < _g1) {
				var i = _g++;
				step();
			}
			return tink_core_CallbackLink.fromMany(links);
		});
		return this1;
	}
};
tink_core_Future.lazy = function(l) {
	return new tink_core__$Future_SyncFuture(l);
};
tink_core_Future.sync = function(v) {
	return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(v));
};
tink_core_Future.isFuture = function(maybeFuture) {
	return js_Boot.__implements(maybeFuture,tink_core__$Future_FutureObject);
};
tink_core_Future.async = function(init,lazy) {
	if(lazy == null) {
		lazy = false;
	}
	var ret = tink_core_Future.irreversible(init);
	if(lazy) {
		return ret;
	} else {
		ret.eager();
		return ret;
	}
};
tink_core_Future.irreversible = function(init) {
	return new tink_core__$Future_SuspendableFuture(function($yield) {
		init($yield);
		return null;
	});
};
tink_core_Future.or = function(a,b) {
	return tink_core_Future.first(a,b);
};
tink_core_Future.either = function(a,b) {
	return tink_core_Future.first(tink_core_Future.map(a,haxe_ds_Either.Left),tink_core_Future.map(b,haxe_ds_Either.Right));
};
tink_core_Future.and = function(a,b) {
	return tink_core_Future.merge(a,b,function(a,b) {
		var this1 = new tink_core_MPair(a,b);
		return this1;
	});
};
tink_core_Future._tryFailingFlatMap = function(f,map) {
	return tink_core_Future.flatMap(f,function(o) {
		switch(o._hx_index) {
		case 0:
			var d = o.data;
			return map(d);
		case 1:
			var f = o.failure;
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(f)));
		}
	});
};
tink_core_Future._tryFlatMap = function(f,map) {
	return tink_core_Future.flatMap(f,function(o) {
		switch(o._hx_index) {
		case 0:
			var d = o.data;
			return tink_core_Future.map(map(d),tink_core_Outcome.Success);
		case 1:
			var f = o.failure;
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(f)));
		}
	});
};
tink_core_Future._tryFailingMap = function(f,map) {
	return tink_core_Future.map(f,function(o) {
		return tink_core_OutcomeTools.flatMap(o,tink_core__$Outcome_OutcomeMapper.withSameError(map));
	});
};
tink_core_Future._tryMap = function(f,map) {
	return tink_core_Future.map(f,function(o) {
		return tink_core_OutcomeTools.map(o,map);
	});
};
tink_core_Future._flatMap = function(f,map) {
	return tink_core_Future.flatMap(f,map);
};
tink_core_Future._map = function(f,map) {
	return tink_core_Future.map(f,map);
};
tink_core_Future.trigger = function() {
	return new tink_core_FutureTrigger();
};
tink_core_Future.delay = function(ms,value) {
	var this1 = tink_core_Future.irreversible(function(cb) {
		haxe_Timer.delay(function() {
			cb(tink_core_Lazy.get(value));
		},ms);
	});
	this1.eager();
	return this1;
};
var tink_core_FutureStatus = $hxEnums["tink.core.FutureStatus"] = { __ename__:true,__constructs__:null
	,Suspended: {_hx_name:"Suspended",_hx_index:0,__enum__:"tink.core.FutureStatus",toString:$estr}
	,Awaited: {_hx_name:"Awaited",_hx_index:1,__enum__:"tink.core.FutureStatus",toString:$estr}
	,EagerlyAwaited: {_hx_name:"EagerlyAwaited",_hx_index:2,__enum__:"tink.core.FutureStatus",toString:$estr}
	,Ready: ($_=function(result) { return {_hx_index:3,result:result,__enum__:"tink.core.FutureStatus",toString:$estr}; },$_._hx_name="Ready",$_.__params__ = ["result"],$_)
	,NeverEver: {_hx_name:"NeverEver",_hx_index:4,__enum__:"tink.core.FutureStatus",toString:$estr}
};
tink_core_FutureStatus.__constructs__ = [tink_core_FutureStatus.Suspended,tink_core_FutureStatus.Awaited,tink_core_FutureStatus.EagerlyAwaited,tink_core_FutureStatus.Ready,tink_core_FutureStatus.NeverEver];
var tink_core_FutureTrigger = function() {
	this.status = tink_core_FutureStatus.Awaited;
	this.list = new tink_core_CallbackList(true);
};
tink_core_FutureTrigger.__name__ = "tink.core.FutureTrigger";
tink_core_FutureTrigger.__interfaces__ = [tink_core__$Future_FutureObject];
tink_core_FutureTrigger.prototype = {
	status: null
	,list: null
	,getStatus: function() {
		return this.status;
	}
	,handle: function(callback) {
		var _g = this.status;
		if(_g._hx_index == 3) {
			var result = _g.result;
			tink_core_Callback.invoke(callback,tink_core_Lazy.get(result));
			return null;
		} else {
			var v = _g;
			var _this = this.list;
			if(_this.disposeHandlers == null) {
				return null;
			} else {
				var node = new tink_core__$Callback_ListCell(callback,_this);
				_this.cells.push(node);
				if(_this.used++ == 0) {
					var fn = _this.onfill;
					if(tink_core_Callback.depth < 500) {
						tink_core_Callback.depth++;
						fn();
						tink_core_Callback.depth--;
					} else {
						tink_core_Callback.defer(fn);
					}
				}
				return node;
			}
		}
	}
	,eager: function() {
	}
	,asFuture: function() {
		return this;
	}
	,trigger: function(result) {
		var _g = this.status;
		if(_g._hx_index == 3) {
			var _g1 = _g.result;
			return false;
		} else {
			this.status = tink_core_FutureStatus.Ready(new tink_core__$Lazy_LazyConst(result));
			this.list.invoke(result);
			return true;
		}
	}
	,__class__: tink_core_FutureTrigger
};
var tink_core_JsPromiseTools = function() { };
tink_core_JsPromiseTools.__name__ = "tink.core.JsPromiseTools";
tink_core_JsPromiseTools.toSurprise = function(promise) {
	return tink_core_Future.ofJsPromise(promise);
};
tink_core_JsPromiseTools.toPromise = function(promise) {
	return tink_core_Future.ofJsPromise(promise);
};
var tink_core__$Future_SuspendableFuture = function(wakeup) {
	this.status = tink_core_FutureStatus.Suspended;
	var _gthis = this;
	this.wakeup = wakeup;
	this.callbacks = new tink_core_CallbackList(true);
	this.callbacks.ondrain = function() {
		if(_gthis.status == tink_core_FutureStatus.Awaited) {
			_gthis.status = tink_core_FutureStatus.Suspended;
			var this1 = _gthis.link;
			if(this1 != null) {
				this1.cancel();
			}
			_gthis.link = null;
		}
	};
	this.callbacks.onfill = function() {
		if(_gthis.status == tink_core_FutureStatus.Suspended) {
			_gthis.status = tink_core_FutureStatus.Awaited;
			_gthis.arm();
		}
	};
};
tink_core__$Future_SuspendableFuture.__name__ = "tink.core._Future.SuspendableFuture";
tink_core__$Future_SuspendableFuture.__interfaces__ = [tink_core__$Future_FutureObject];
tink_core__$Future_SuspendableFuture.prototype = {
	callbacks: null
	,status: null
	,link: null
	,wakeup: null
	,getStatus: function() {
		return this.status;
	}
	,trigger: function(value) {
		var _g = this.status;
		if(_g._hx_index == 3) {
			var _g1 = _g.result;
		} else {
			this.status = tink_core_FutureStatus.Ready(new tink_core__$Lazy_LazyConst(value));
			var link = this.link;
			this.link = null;
			this.wakeup = null;
			this.callbacks.invoke(value);
			if(link != null) {
				link.cancel();
			}
		}
	}
	,handle: function(callback) {
		var _g = this.status;
		if(_g._hx_index == 3) {
			var result = _g.result;
			tink_core_Callback.invoke(callback,tink_core_Lazy.get(result));
			return null;
		} else {
			var _this = this.callbacks;
			if(_this.disposeHandlers == null) {
				return null;
			} else {
				var node = new tink_core__$Callback_ListCell(callback,_this);
				_this.cells.push(node);
				if(_this.used++ == 0) {
					var fn = _this.onfill;
					if(tink_core_Callback.depth < 500) {
						tink_core_Callback.depth++;
						fn();
						tink_core_Callback.depth--;
					} else {
						tink_core_Callback.defer(fn);
					}
				}
				return node;
			}
		}
	}
	,arm: function() {
		var _gthis = this;
		this.link = this.wakeup(function(x) {
			_gthis.trigger(x);
		});
	}
	,eager: function() {
		switch(this.status._hx_index) {
		case 0:
			this.status = tink_core_FutureStatus.EagerlyAwaited;
			this.arm();
			break;
		case 1:
			this.status = tink_core_FutureStatus.EagerlyAwaited;
			break;
		default:
		}
	}
	,__class__: tink_core__$Future_SuspendableFuture
};
var tink_core_Lazy = {};
tink_core_Lazy.__properties__ = {get_computed:"get_computed"};
tink_core_Lazy.get_computed = function(this1) {
	return this1.isComputed();
};
tink_core_Lazy.get = function(this1) {
	this1.compute();
	return this1.get();
};
tink_core_Lazy.fromNoise = function(l) {
	return l;
};
tink_core_Lazy.ofFunc = function(f) {
	return new tink_core__$Lazy_LazyFunc(f);
};
tink_core_Lazy.map = function(this1,f) {
	return new tink_core__$Lazy_LazyFunc(function() {
		return f(this1.get());
	},this1);
};
tink_core_Lazy.flatMap = function(this1,f) {
	return new tink_core__$Lazy_LazyFunc(function() {
		return tink_core_Lazy.get(f(this1.get()));
	},this1);
};
tink_core_Lazy.ofConst = function(c) {
	return new tink_core__$Lazy_LazyConst(c);
};
var tink_core__$Lazy_LazyFunc = function(f,from) {
	this.f = f;
	this.from = from;
};
tink_core__$Lazy_LazyFunc.__name__ = "tink.core._Lazy.LazyFunc";
tink_core__$Lazy_LazyFunc.__interfaces__ = [tink_core__$Lazy_LazyObject];
tink_core__$Lazy_LazyFunc.prototype = {
	f: null
	,from: null
	,result: null
	,underlying: function() {
		return this.from;
	}
	,isComputed: function() {
		return this.f == null;
	}
	,get: function() {
		return this.result;
	}
	,compute: function() {
		var _g = this.f;
		if(_g != null) {
			var v = _g;
			this.f = null;
			var _g = this.from;
			if(_g != null) {
				var cur = _g;
				this.from = null;
				var stack = [];
				while(cur != null && !cur.isComputed()) {
					stack.push(cur);
					cur = cur.underlying();
				}
				stack.reverse();
				var _g = 0;
				while(_g < stack.length) {
					var c = stack[_g];
					++_g;
					c.compute();
				}
			}
			this.result = v();
		}
	}
	,__class__: tink_core__$Lazy_LazyFunc
};
var tink_core_NamedWith = function(name,value) {
	this.name = name;
	this.value = value;
};
tink_core_NamedWith.__name__ = "tink.core.NamedWith";
tink_core_NamedWith.prototype = {
	name: null
	,value: null
	,__class__: tink_core_NamedWith
};
var tink_core_Noise = {};
tink_core_Noise.ofAny = function(t) {
	return null;
};
var tink_core_OptionTools = function() { };
tink_core_OptionTools.__name__ = "tink.core.OptionTools";
tink_core_OptionTools.force = function(o,pos) {
	if(o._hx_index == 0) {
		var v = o.v;
		return v;
	} else {
		throw haxe_Exception.thrown(new tink_core_TypedError(404,"Some value expected but none found",pos));
	}
};
tink_core_OptionTools.sure = function(o,pos) {
	if(o._hx_index == 0) {
		var v = o.v;
		return v;
	} else {
		throw haxe_Exception.thrown(new tink_core_TypedError(404,"Some value expected but none found",pos));
	}
};
tink_core_OptionTools.toOutcome = function(o,pos) {
	switch(o._hx_index) {
	case 0:
		var value = o.v;
		return tink_core_Outcome.Success(value);
	case 1:
		return tink_core_Outcome.Failure(new tink_core_TypedError(404,"Some value expected but none found in " + pos.fileName + "@line " + pos.lineNumber,{ fileName : "tink/core/Option.hx", lineNumber : 31, className : "tink.core.OptionTools", methodName : "toOutcome"}));
	}
};
tink_core_OptionTools.or = function(o,l) {
	if(o._hx_index == 0) {
		var v = o.v;
		return v;
	} else {
		return tink_core_Lazy.get(l);
	}
};
tink_core_OptionTools.orTry = function(o,fallback) {
	if(o._hx_index == 0) {
		var v = o.v;
		return o;
	} else {
		return tink_core_Lazy.get(fallback);
	}
};
tink_core_OptionTools.orNull = function(o) {
	if(o._hx_index == 0) {
		var v = o.v;
		return v;
	} else {
		return null;
	}
};
tink_core_OptionTools.filter = function(o,f) {
	if(o._hx_index == 0) {
		if(f(o.v) == false) {
			return haxe_ds_Option.None;
		} else {
			return o;
		}
	} else {
		return o;
	}
};
tink_core_OptionTools.satisfies = function(o,f) {
	if(o._hx_index == 0) {
		var v = o.v;
		return f(v);
	} else {
		return false;
	}
};
tink_core_OptionTools.equals = function(o,v) {
	if(o._hx_index == 0) {
		var v1 = o.v;
		return v1 == v;
	} else {
		return false;
	}
};
tink_core_OptionTools.map = function(o,f) {
	if(o._hx_index == 0) {
		var v = o.v;
		return haxe_ds_Option.Some(f(v));
	} else {
		return haxe_ds_Option.None;
	}
};
tink_core_OptionTools.flatMap = function(o,f) {
	if(o._hx_index == 0) {
		var v = o.v;
		return f(v);
	} else {
		return haxe_ds_Option.None;
	}
};
tink_core_OptionTools.iterator = function(o) {
	return new tink_core_OptionIter(o);
};
tink_core_OptionTools.toArray = function(o) {
	if(o._hx_index == 0) {
		var v = o.v;
		return [v];
	} else {
		return [];
	}
};
var tink_core_OptionIter = function(o) {
	this.alive = true;
	if(o._hx_index == 0) {
		var v = o.v;
		this.value = v;
	} else {
		this.alive = false;
	}
};
tink_core_OptionIter.__name__ = "tink.core.OptionIter";
tink_core_OptionIter.prototype = {
	value: null
	,alive: null
	,hasNext: function() {
		return this.alive;
	}
	,next: function() {
		this.alive = false;
		return this.value;
	}
	,__class__: tink_core_OptionIter
};
var tink_core_Outcome = $hxEnums["tink.core.Outcome"] = { __ename__:true,__constructs__:null
	,Success: ($_=function(data) { return {_hx_index:0,data:data,__enum__:"tink.core.Outcome",toString:$estr}; },$_._hx_name="Success",$_.__params__ = ["data"],$_)
	,Failure: ($_=function(failure) { return {_hx_index:1,failure:failure,__enum__:"tink.core.Outcome",toString:$estr}; },$_._hx_name="Failure",$_.__params__ = ["failure"],$_)
};
tink_core_Outcome.__constructs__ = [tink_core_Outcome.Success,tink_core_Outcome.Failure];
var tink_core_OutcomeTools = function() { };
tink_core_OutcomeTools.__name__ = "tink.core.OutcomeTools";
tink_core_OutcomeTools.sure = function(outcome) {
	switch(outcome._hx_index) {
	case 0:
		var data = outcome.data;
		return data;
	case 1:
		var failure = outcome.failure;
		var _g = tink_core_TypedError.asError(failure);
		if(_g == null) {
			throw haxe_Exception.thrown(failure);
		} else {
			var e = _g;
			return e.throwSelf();
		}
		break;
	}
};
tink_core_OutcomeTools.toOption = function(outcome) {
	switch(outcome._hx_index) {
	case 0:
		var data = outcome.data;
		return haxe_ds_Option.Some(data);
	case 1:
		var _g = outcome.failure;
		return haxe_ds_Option.None;
	}
};
tink_core_OutcomeTools.orNull = function(outcome) {
	switch(outcome._hx_index) {
	case 0:
		var data = outcome.data;
		return data;
	case 1:
		var _g = outcome.failure;
		return null;
	}
};
tink_core_OutcomeTools.orUse = function(outcome,fallback) {
	return tink_core_OutcomeTools.or(outcome,fallback);
};
tink_core_OutcomeTools.or = function(outcome,fallback) {
	switch(outcome._hx_index) {
	case 0:
		var data = outcome.data;
		return data;
	case 1:
		var _g = outcome.failure;
		return tink_core_Lazy.get(fallback);
	}
};
tink_core_OutcomeTools.orTry = function(outcome,fallback) {
	switch(outcome._hx_index) {
	case 0:
		var _g = outcome.data;
		return outcome;
	case 1:
		var _g = outcome.failure;
		return tink_core_Lazy.get(fallback);
	}
};
tink_core_OutcomeTools.equals = function(outcome,to) {
	switch(outcome._hx_index) {
	case 0:
		var data = outcome.data;
		return data == to;
	case 1:
		var _g = outcome.failure;
		return false;
	}
};
tink_core_OutcomeTools.map = function(outcome,transform) {
	switch(outcome._hx_index) {
	case 0:
		var a = outcome.data;
		return tink_core_Outcome.Success(transform(a));
	case 1:
		var f = outcome.failure;
		return tink_core_Outcome.Failure(f);
	}
};
tink_core_OutcomeTools.isSuccess = function(outcome) {
	if(outcome._hx_index == 0) {
		var _g = outcome.data;
		return true;
	} else {
		return false;
	}
};
tink_core_OutcomeTools.flatMap = function(o,mapper) {
	return tink_core__$Outcome_OutcomeMapper.apply(mapper,o);
};
tink_core_OutcomeTools.swap = function(outcome,v) {
	switch(outcome._hx_index) {
	case 0:
		var a = outcome.data;
		return tink_core_Outcome.Success(v);
	case 1:
		var f = outcome.failure;
		return tink_core_Outcome.Failure(f);
	}
};
tink_core_OutcomeTools.next = function(outcome,f) {
	switch(outcome._hx_index) {
	case 0:
		var v = outcome.data;
		return f(v);
	case 1:
		var e = outcome.failure;
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(e)));
	}
};
tink_core_OutcomeTools.attempt = function(f,report) {
	try {
		return tink_core_Outcome.Success(f());
	} catch( _g ) {
		haxe_NativeStackTrace.lastError = _g;
		var e = haxe_Exception.caught(_g).unwrap();
		return tink_core_Outcome.Failure(report(e));
	}
};
tink_core_OutcomeTools.flatten = function(o) {
	switch(o._hx_index) {
	case 0:
		var _g = o.data;
		switch(_g._hx_index) {
		case 0:
			var d = _g.data;
			return tink_core_Outcome.Success(d);
		case 1:
			var f = _g.failure;
			return tink_core_Outcome.Failure(f);
		}
		break;
	case 1:
		var f = o.failure;
		return tink_core_Outcome.Failure(f);
	}
};
var tink_core__$Outcome_OutcomeMapper = {};
tink_core__$Outcome_OutcomeMapper._new = function(f) {
	var this1 = { f : f};
	return this1;
};
tink_core__$Outcome_OutcomeMapper.apply = function(this1,o) {
	return this1.f(o);
};
tink_core__$Outcome_OutcomeMapper.withSameError = function(f) {
	return tink_core__$Outcome_OutcomeMapper._new(function(o) {
		switch(o._hx_index) {
		case 0:
			var d = o.data;
			return f(d);
		case 1:
			var f1 = o.failure;
			return tink_core_Outcome.Failure(f1);
		}
	});
};
tink_core__$Outcome_OutcomeMapper.withEitherError = function(f) {
	return tink_core__$Outcome_OutcomeMapper._new(function(o) {
		switch(o._hx_index) {
		case 0:
			var d = o.data;
			var _g = f(d);
			switch(_g._hx_index) {
			case 0:
				var d = _g.data;
				return tink_core_Outcome.Success(d);
			case 1:
				var f1 = _g.failure;
				return tink_core_Outcome.Failure(haxe_ds_Either.Right(f1));
			}
			break;
		case 1:
			var f1 = o.failure;
			return tink_core_Outcome.Failure(haxe_ds_Either.Left(f1));
		}
	});
};
var tink_core_Pair = {};
tink_core_Pair.__properties__ = {get_b:"get_b",get_a:"get_a"};
tink_core_Pair._new = function(a,b) {
	var this1 = new tink_core_MPair(a,b);
	return this1;
};
tink_core_Pair.get_a = function(this1) {
	return this1.a;
};
tink_core_Pair.get_b = function(this1) {
	return this1.b;
};
tink_core_Pair.toBool = function(this1) {
	return this1 != null;
};
tink_core_Pair.isNil = function(this1) {
	return this1 == null;
};
tink_core_Pair.nil = function() {
	return null;
};
var tink_core_MPair = function(a,b) {
	this.a = a;
	this.b = b;
};
tink_core_MPair.__name__ = "tink.core.MPair";
tink_core_MPair.prototype = {
	a: null
	,b: null
	,__class__: tink_core_MPair
};
var tink_core_ProgressValue = {};
tink_core_ProgressValue.__properties__ = {get_total:"get_total",get_value:"get_value"};
tink_core_ProgressValue._new = function(value,total) {
	var this1 = new tink_core_MPair(value,total);
	var this2 = this1;
	return this2;
};
tink_core_ProgressValue.normalize = function(this1) {
	var o = this1.b;
	if(o._hx_index == 0) {
		var v = o.v;
		return haxe_ds_Option.Some(this1.a / v);
	} else {
		return haxe_ds_Option.None;
	}
};
tink_core_ProgressValue.get_value = function(this1) {
	return this1.a;
};
tink_core_ProgressValue.get_total = function(this1) {
	return this1.b;
};
var tink_core_Progress = {};
tink_core_Progress.listen = function(this1,cb) {
	return this1.progressed.listen(cb);
};
tink_core_Progress.handle = function(this1,cb) {
	return this1.result.handle(cb);
};
tink_core_Progress.trigger = function() {
	return new tink_core_ProgressTrigger();
};
tink_core_Progress.make = function(f) {
	return new tink_core__$Progress_SuspendableProgress(function(fire) {
		return f(function(value,total) {
			var fire1 = fire;
			var this1 = new tink_core_MPair(value,total);
			var this2 = this1;
			fire1(tink_core_ProgressStatus.InProgress(this2));
		},function(result) {
			fire(tink_core_ProgressStatus.Finished(result));
		});
	});
};
tink_core_Progress.map = function(this1,f) {
	return new tink_core__$Progress_ProgressObject(tink_core_Signal.map(this1.changed,function(s) {
		return tink_core_ProgressStatusTools.map(s,f);
	}),function() {
		return tink_core_ProgressStatusTools.map(this1.getStatus(),f);
	});
};
tink_core_Progress.asFuture = function(this1) {
	return this1.result;
};
tink_core_Progress.promise = function(v) {
	return new tink_core__$Progress_SuspendableProgress(function(fire) {
		var inner = new tink_core_CallbackLinkRef();
		return new tink_core__$Callback_LinkPair(v.handle(function(o) {
			switch(o._hx_index) {
			case 0:
				var p = o.data;
				var this1 = p.changed.listen(function(s) {
					fire(tink_core_ProgressStatusTools.map(s,tink_core_Outcome.Success));
				});
				inner.link = this1;
				break;
			case 1:
				var e = o.failure;
				fire(tink_core_ProgressStatus.Finished(tink_core_Outcome.Failure(e)));
				break;
			}
		}),inner);
	});
};
tink_core_Progress.flatten = function(v) {
	return tink_core_Progress.map(tink_core_Progress.promise(v),function(o) {
		switch(o._hx_index) {
		case 0:
			var _g = o.data;
			switch(_g._hx_index) {
			case 0:
				var v = _g.data;
				return tink_core_Outcome.Success(v);
			case 1:
				var e = _g.failure;
				return tink_core_Outcome.Failure(e);
			}
			break;
		case 1:
			var e = o.failure;
			return tink_core_Outcome.Failure(e);
		}
	});
};
tink_core_Progress.future = function(v) {
	return new tink_core__$Progress_SuspendableProgress(function(fire) {
		var inner = new tink_core_CallbackLinkRef();
		return new tink_core__$Callback_LinkPair(v.handle(function(p) {
			var this1 = p.changed.listen(fire);
			inner.link = this1;
		}),inner);
	});
};
tink_core_Progress.next = function(this1,f) {
	return tink_core_Future.flatMap(this1.result,f);
};
var tink_core__$Progress_ProgressObject = function(changed,getStatus) {
	this.changed = changed;
	var this1 = new tink_core__$Signal_Suspendable(function(fire) {
		return changed.listen(function(s) {
			if(s._hx_index == 0) {
				var v = s.v;
				fire(v);
			}
		});
	},null);
	this.progressed = this1;
	this.getStatus = getStatus;
	var this1 = new tink_core__$Future_SuspendableFuture(function(fire) {
		var _g = getStatus();
		if(_g._hx_index == 1) {
			var v = _g.v;
			fire(v);
			return null;
		} else {
			return changed.listen(function(s) {
				if(s._hx_index == 1) {
					var v = s.v;
					fire(v);
				}
			});
		}
	});
	this.result = this1;
};
tink_core__$Progress_ProgressObject.__name__ = "tink.core._Progress.ProgressObject";
tink_core__$Progress_ProgressObject.prototype = {
	get_status: function() {
		return this.getStatus();
	}
	,getStatus: null
	,changed: null
	,progressed: null
	,result: null
	,__class__: tink_core__$Progress_ProgressObject
	,__properties__: {get_status:"get_status"}
};
var tink_core__$Progress_SuspendableProgress = function(wakeup,status) {
	if(status == null) {
		status = tink_core_ProgressStatus.InProgress(tink_core_ProgressValue.ZERO);
	}
	var disposable = tink_core_AlreadyDisposed.INST;
	var changed;
	switch(status._hx_index) {
	case 0:
		var _g = status.v;
		var this1 = new tink_core__$Signal_Suspendable(function(fire) {
			return wakeup(function(s) {
				status = s;
				fire(status);
			});
		},function(d) {
			disposable = d;
		});
		changed = this1;
		break;
	case 1:
		var _g = status.v;
		changed = tink_core_Signal.dead();
		break;
	}
	tink_core__$Progress_ProgressObject.call(this,changed,function() {
		return status;
	});
};
tink_core__$Progress_SuspendableProgress.__name__ = "tink.core._Progress.SuspendableProgress";
tink_core__$Progress_SuspendableProgress.__super__ = tink_core__$Progress_ProgressObject;
tink_core__$Progress_SuspendableProgress.prototype = $extend(tink_core__$Progress_ProgressObject.prototype,{
	noop: function(_,_1) {
		return null;
	}
	,__class__: tink_core__$Progress_SuspendableProgress
});
var tink_core_ProgressTrigger = function(status) {
	this._changed = null;
	var _gthis = this;
	if(status == null) {
		status = tink_core_ProgressStatus.InProgress(tink_core_ProgressValue.ZERO);
		this._status = status;
	}
	var tmp;
	if(status == null) {
		tmp = false;
	} else if(status._hx_index == 1) {
		var _g = status.v;
		tmp = true;
	} else {
		tmp = false;
	}
	tink_core__$Progress_ProgressObject.call(this,tmp ? tink_core_Signal.dead() : this._changed = tink_core_Signal.trigger(),function() {
		return _gthis._status;
	});
};
tink_core_ProgressTrigger.__name__ = "tink.core.ProgressTrigger";
tink_core_ProgressTrigger.__super__ = tink_core__$Progress_ProgressObject;
tink_core_ProgressTrigger.prototype = $extend(tink_core__$Progress_ProgressObject.prototype,{
	_status: null
	,_changed: null
	,asProgress: function() {
		return this;
	}
	,progress: function(v,total) {
		var _g = this._status;
		var tmp;
		if(_g._hx_index == 1) {
			var _g1 = _g.v;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			var _this = this._changed;
			var this1 = new tink_core_MPair(v,total);
			var this2 = this1;
			_this.handlers.invoke(this._status = tink_core_ProgressStatus.InProgress(this2));
		}
	}
	,finish: function(v) {
		var _g = this._status;
		var tmp;
		if(_g._hx_index == 1) {
			var _g1 = _g.v;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this._changed.handlers.invoke(this._status = tink_core_ProgressStatus.Finished(v));
		}
	}
	,__class__: tink_core_ProgressTrigger
});
var tink_core_UnitInterval = {};
tink_core_UnitInterval.toPercentageString = function(this1,dp) {
	var m = Math.pow(10,dp);
	var v = Math.round(this1 * m * 100) / m;
	var s = v == null ? "null" : "" + v;
	var _g = s.indexOf(".");
	if(_g == -1) {
		return s + "." + StringTools.lpad("","0",dp) + "%";
	} else {
		var i = _g;
		if(s.length - i > dp) {
			return HxOverrides.substr(s,0,dp + i + 1) + "%";
		} else {
			var i = _g;
			return StringTools.rpad(s,"0",i + dp + 1) + "%";
		}
	}
};
var tink_core_ProgressStatus = $hxEnums["tink.core.ProgressStatus"] = { __ename__:true,__constructs__:null
	,InProgress: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"tink.core.ProgressStatus",toString:$estr}; },$_._hx_name="InProgress",$_.__params__ = ["v"],$_)
	,Finished: ($_=function(v) { return {_hx_index:1,v:v,__enum__:"tink.core.ProgressStatus",toString:$estr}; },$_._hx_name="Finished",$_.__params__ = ["v"],$_)
};
tink_core_ProgressStatus.__constructs__ = [tink_core_ProgressStatus.InProgress,tink_core_ProgressStatus.Finished];
var tink_core_ProgressStatusTools = function() { };
tink_core_ProgressStatusTools.__name__ = "tink.core.ProgressStatusTools";
tink_core_ProgressStatusTools.map = function(p,f) {
	switch(p._hx_index) {
	case 0:
		var v = p.v;
		return tink_core_ProgressStatus.InProgress(v);
	case 1:
		var v = p.v;
		return tink_core_ProgressStatus.Finished(f(v));
	}
};
var tink_core_TotalTools = function() { };
tink_core_TotalTools.__name__ = "tink.core.TotalTools";
tink_core_TotalTools.eq = function(a,b) {
	switch(a._hx_index) {
	case 0:
		if(b._hx_index == 0) {
			var t2 = b.v;
			var t1 = a.v;
			return t1 == t2;
		} else {
			return false;
		}
		break;
	case 1:
		if(b._hx_index == 1) {
			return true;
		} else {
			return false;
		}
		break;
	}
};
var tink_core_ProgressTools = function() { };
tink_core_ProgressTools.__name__ = "tink.core.ProgressTools";
tink_core_ProgressTools.asPromise = function(p) {
	return p.result;
};
var tink_core_Promise = {};
tink_core_Promise._new = function(f) {
	var this1 = new tink_core__$Future_SuspendableFuture(function(cb) {
		return f(function(v) {
			cb(tink_core_Outcome.Success(v));
		},function(e) {
			cb(tink_core_Outcome.Failure(e));
		});
	});
	var this2 = this1;
	return this2;
};
tink_core_Promise.eager = function(this1) {
	this1.eager();
	return this1;
};
tink_core_Promise.map = function(this1,f) {
	return tink_core_Future.map(this1,f);
};
tink_core_Promise.flatMap = function(this1,f) {
	return tink_core_Future.flatMap(this1,f);
};
tink_core_Promise.tryRecover = function(this1,f) {
	return tink_core_Future.flatMap(this1,function(o) {
		switch(o._hx_index) {
		case 0:
			var d = o.data;
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(o));
		case 1:
			var e = o.failure;
			return f(e);
		}
	});
};
tink_core_Promise.recover = function(this1,f) {
	return tink_core_Future.flatMap(this1,function(o) {
		switch(o._hx_index) {
		case 0:
			var d = o.data;
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(d));
		case 1:
			var e = o.failure;
			return f(e);
		}
	});
};
tink_core_Promise.mapError = function(this1,f) {
	return tink_core_Future.map(this1,function(o) {
		switch(o._hx_index) {
		case 0:
			var _g = o.data;
			return o;
		case 1:
			var e = o.failure;
			return tink_core_Outcome.Failure(f(e));
		}
	});
};
tink_core_Promise.handle = function(this1,cb) {
	return this1.handle(cb);
};
tink_core_Promise.noise = function(this1) {
	if(this1.getStatus()._hx_index == 4) {
		return tink_core_Promise.NEVER;
	} else {
		return tink_core_Promise.next(this1,function(v) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(null)));
		});
	}
};
tink_core_Promise.isSuccess = function(this1) {
	return tink_core_Future.map(this1,function(o) {
		return tink_core_OutcomeTools.isSuccess(o);
	});
};
tink_core_Promise.next = function(this1,f,gather) {
	return tink_core_Future.flatMap(this1,function(o) {
		switch(o._hx_index) {
		case 0:
			var d = o.data;
			return f(d);
		case 1:
			var f1 = o.failure;
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(f1)));
		}
	});
};
tink_core_Promise.swap = function(this1,v) {
	return tink_core_Promise.next(this1,function(_) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(v)));
	});
};
tink_core_Promise.swapError = function(this1,e) {
	return tink_core_Promise.mapError(this1,function(_) {
		return e;
	});
};
tink_core_Promise.merge = function(this1,other,merger,gather) {
	return tink_core_Future.flatMap(tink_core_Future.merge(this1,other,function(a,b) {
		switch(a._hx_index) {
		case 0:
			var _g = a.data;
			switch(b._hx_index) {
			case 0:
				var b1 = b.data;
				var a1 = _g;
				return merger(a1,b1);
			case 1:
				var e = b.failure;
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(e)));
			}
			break;
		case 1:
			var e = a.failure;
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(e)));
		}
	}),function(o) {
		return o;
	});
};
tink_core_Promise.and = function(a,b) {
	return tink_core_Promise.merge(a,b,function(a,b) {
		var this1 = new tink_core_MPair(a,b);
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(this1)));
	});
};
tink_core_Promise.iterate = function(promises,$yield,fallback) {
	return tink_core_Future.irreversible(function(cb) {
		var iter = $getIterator(promises);
		var next = null;
		next = function() {
			if(iter.hasNext()) {
				iter.next().handle(function(o) {
					switch(o._hx_index) {
					case 0:
						var v = o.data;
						$yield(v).handle(function(o) {
							switch(o._hx_index) {
							case 0:
								var _g = o.data;
								switch(_g._hx_index) {
								case 0:
									var ret = _g.v;
									cb(tink_core_Outcome.Success(ret));
									break;
								case 1:
									next();
									break;
								}
								break;
							case 1:
								var e = o.failure;
								cb(tink_core_Outcome.Failure(e));
								break;
							}
						});
						break;
					case 1:
						var e = o.failure;
						cb(tink_core_Outcome.Failure(e));
						break;
					}
				});
			} else {
				fallback.handle(cb);
			}
		};
		next();
	});
};
tink_core_Promise.retry = function(gen,next) {
	var stamp = function() {
		var hrtime = process.hrtime();
		return (hrtime[0] + hrtime[1] / 1e9) * 1000;
	};
	var start = stamp();
	var attempt = null;
	attempt = function(count) {
		var f = function(error) {
			return tink_core_Promise.next(next({ attempt : count, error : error, elapsed : stamp() - start}),function(_) {
				return attempt(count + 1);
			});
		};
		return tink_core_Future.flatMap(gen(),function(o) {
			switch(o._hx_index) {
			case 0:
				var d = o.data;
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(o));
			case 1:
				var e = o.failure;
				return f(e);
			}
		});
	};
	return attempt(1);
};
tink_core_Promise.ofJsPromise = function(promise) {
	return tink_core_Future.ofJsPromise(promise);
};
tink_core_Promise.toJsPromise = function(this1) {
	return new Promise(function(resolve,reject) {
		this1.handle(function(o) {
			switch(o._hx_index) {
			case 0:
				var v = o.data;
				resolve(v);
				break;
			case 1:
				var e = o.failure;
				reject(e.toJsError());
				break;
			}
		});
	});
};
tink_core_Promise.ofSpecific = function(s) {
	return s;
};
tink_core_Promise.fromNever = function(l) {
	return l;
};
tink_core_Promise.ofTrigger = function(f) {
	return f;
};
tink_core_Promise.ofHappyTrigger = function(f) {
	return tink_core_Future.map(f,tink_core_Outcome.Success);
};
tink_core_Promise.ofFuture = function(f) {
	return tink_core_Future.map(f,tink_core_Outcome.Success);
};
tink_core_Promise.ofOutcome = function(o) {
	return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(o));
};
tink_core_Promise.ofError = function(e) {
	return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(e)));
};
tink_core_Promise.ofData = function(d) {
	return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(d)));
};
tink_core_Promise.lazy = function(p) {
	var this1 = new tink_core__$Future_SuspendableFuture(function(cb) {
		return tink_core_Lazy.get(p).handle(cb);
	});
	return this1;
};
tink_core_Promise.inParallel = function(a,concurrency) {
	return tink_core_Promise.many(a,concurrency);
};
tink_core_Promise.many = function(a,concurrency) {
	return tink_core_Future.processMany(a,concurrency,function(o) {
		return o;
	},function(o) {
		return o;
	});
};
tink_core_Promise.inSequence = function(a) {
	return tink_core_Promise.many(a,1);
};
tink_core_Promise.cache = function(gen) {
	var p = null;
	return function() {
		var ret = p;
		if(ret == null) {
			var sync = false;
			ret = tink_core_Promise.next(gen(),function(o) {
				o.b.handle(function(_) {
					sync = true;
					p = null;
				});
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(o.a)));
			});
			if(!sync) {
				p = ret;
			}
		}
		return tink_core_Future.map(ret,function(o) {
			if(!tink_core_OutcomeTools.isSuccess(o)) {
				p = null;
			}
			return o;
		});
	};
};
tink_core_Promise.lift = function(p) {
	return p;
};
tink_core_Promise.trigger = function() {
	var this1 = new tink_core_FutureTrigger();
	return this1;
};
tink_core_Promise.resolve = function(v) {
	return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(v)));
};
tink_core_Promise.reject = function(e) {
	return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(e)));
};
var tink_core_Next = {};
tink_core_Next.ofSafe = function(f) {
	return function(x) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(x)));
	};
};
tink_core_Next.ofSync = function(f) {
	return function(x) {
		return tink_core_Future.map(f(x),tink_core_Outcome.Success);
	};
};
tink_core_Next.ofSafeSync = function(f) {
	return function(x) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(f(x))));
	};
};
tink_core_Next._chain = function(a,b) {
	return function(v) {
		return tink_core_Promise.next(a(v),b);
	};
};
var tink_core_Recover = {};
tink_core_Recover.ofSync = function(f) {
	return function(e) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(e)));
	};
};
var tink_core_Combiner = {};
tink_core_Combiner.ofSync = function(f) {
	return function(x1,x2) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(x1,x2)));
	};
};
tink_core_Combiner.ofSafe = function(f) {
	return function(x1,x2) {
		return tink_core_Future.map(f(x1,x2),tink_core_Outcome.Success);
	};
};
tink_core_Combiner.ofSafeSync = function(f) {
	return function(x1,x2) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(f(x1,x2))));
	};
};
var tink_core_PromiseTrigger = {};
tink_core_PromiseTrigger._new = function() {
	var this1 = new tink_core_FutureTrigger();
	return this1;
};
tink_core_PromiseTrigger.resolve = function(this1,v) {
	return this1.trigger(tink_core_Outcome.Success(v));
};
tink_core_PromiseTrigger.reject = function(this1,e) {
	return this1.trigger(tink_core_Outcome.Failure(e));
};
tink_core_PromiseTrigger.asPromise = function(this1) {
	return this1;
};
var tink_core_Ref = {};
tink_core_Ref.__properties__ = {set_value:"set_value",get_value:"get_value"};
tink_core_Ref._new = function() {
	var this1 = new Array(1);
	var this2 = this1;
	return this2;
};
tink_core_Ref.get_value = function(this1) {
	return this1[0];
};
tink_core_Ref.set_value = function(this1,param) {
	return this1[0] = param;
};
tink_core_Ref.toString = function(this1) {
	return "@[" + Std.string(this1[0]) + "]";
};
tink_core_Ref.to = function(v) {
	var this1 = new Array(1);
	var this2 = this1;
	var ret = this2;
	ret[0] = v;
	return ret;
};
var tink_core_Gather = {};
tink_core_Gather._new = function(v) {
	var this1 = v;
	return this1;
};
tink_core_Gather.ofBool = function(b) {
	var this1 = b;
	return this1;
};
var tink_core_Signal = {};
tink_core_Signal._new = function(f,init) {
	var this1 = new tink_core__$Signal_Suspendable(f,init);
	return this1;
};
tink_core_Signal.handle = function(this1,handler) {
	return this1.listen(handler);
};
tink_core_Signal.map = function(this1,f,gather) {
	return tink_core__$Signal_Suspendable.over(this1,function(fire) {
		return this1.listen(function(v) {
			fire(f(v));
		});
	});
};
tink_core_Signal.flatMap = function(this1,f,gather) {
	return tink_core__$Signal_Suspendable.over(this1,function(fire) {
		return this1.listen(function(v) {
			f(v).handle(fire);
		});
	});
};
tink_core_Signal.filter = function(this1,f,gather) {
	return tink_core__$Signal_Suspendable.over(this1,function(fire) {
		return this1.listen(function(v) {
			if(f(v)) {
				fire(v);
			}
		});
	});
};
tink_core_Signal.select = function(this1,selector,gather) {
	return tink_core__$Signal_Suspendable.over(this1,function(fire) {
		return this1.listen(function(v) {
			var _g = selector(v);
			if(_g._hx_index == 0) {
				var v = _g.v;
				fire(v);
			}
		});
	});
};
tink_core_Signal.join = function(this1,that,gather) {
	if(this1.get_disposed()) {
		return that;
	} else if(that.get_disposed()) {
		return this1;
	} else {
		return new tink_core__$Signal_Suspendable(function(fire) {
			var cb = fire;
			return new tink_core__$Callback_LinkPair(this1.listen(cb),that.listen(cb));
		},function(self) {
			var release = function() {
				if(this1.get_disposed() && that.get_disposed()) {
					self.dispose();
				}
			};
			this1.ondispose(release);
			that.ondispose(release);
		});
	}
};
tink_core_Signal.nextTime = function(this1,condition) {
	return tink_core_Signal.pickNext(this1,function(v) {
		if(condition == null || condition(v)) {
			return haxe_ds_Option.Some(v);
		} else {
			return haxe_ds_Option.None;
		}
	});
};
tink_core_Signal.pickNext = function(this1,selector) {
	var ret = new tink_core_FutureTrigger();
	var link = null;
	link = this1.listen(function(v) {
		var _g = selector(v);
		switch(_g._hx_index) {
		case 0:
			var v = _g.v;
			ret.trigger(v);
			break;
		case 1:
			break;
		}
	});
	ret.handle(link == null ? tink_core_CallbackLink.noop : ($_=link,$bind($_,$_.cancel)));
	return ret;
};
tink_core_Signal.until = function(this1,end) {
	return new tink_core__$Signal_Suspendable(function($yield) {
		return this1.listen($yield);
	},function(self) {
		end.handle($bind(self,self.dispose));
	});
};
tink_core_Signal.next = function(this1,condition) {
	return tink_core_Signal.nextTime(this1,condition);
};
tink_core_Signal.noise = function(this1) {
	return tink_core_Signal.map(this1,function(_) {
		return null;
	});
};
tink_core_Signal.gather = function(this1) {
	return this1;
};
tink_core_Signal.create = function(f) {
	var this1 = new tink_core__$Signal_Suspendable(f,null);
	return this1;
};
tink_core_Signal.generate = function(generator,init) {
	var this1 = new tink_core__$Signal_Suspendable(function(fire) {
		generator(fire);
		return null;
	},init);
	return this1;
};
tink_core_Signal.trigger = function() {
	return new tink_core_SignalTrigger();
};
tink_core_Signal.ofClassical = function(add,remove,gather) {
	return new tink_core__$Signal_Suspendable(function(fire) {
		add(fire);
		var _g = remove;
		var a1 = fire;
		var this1 = new tink_core_SimpleLink(function() {
			_g(a1);
		});
		return this1;
	});
};
tink_core_Signal.dead = function() {
	return tink_core__$Signal_Disposed.INST;
};
var tink_core__$Signal_SignalObject = function() { };
tink_core__$Signal_SignalObject.__name__ = "tink.core._Signal.SignalObject";
tink_core__$Signal_SignalObject.__isInterface__ = true;
tink_core__$Signal_SignalObject.__interfaces__ = [tink_core_Disposable];
tink_core__$Signal_SignalObject.prototype = {
	listen: null
	,__class__: tink_core__$Signal_SignalObject
};
var tink_core__$Signal_Disposed = function() {
	tink_core_AlreadyDisposed.call(this);
};
tink_core__$Signal_Disposed.__name__ = "tink.core._Signal.Disposed";
tink_core__$Signal_Disposed.__interfaces__ = [tink_core__$Signal_SignalObject];
tink_core__$Signal_Disposed.__super__ = tink_core_AlreadyDisposed;
tink_core__$Signal_Disposed.prototype = $extend(tink_core_AlreadyDisposed.prototype,{
	listen: function(cb) {
		return null;
	}
	,__class__: tink_core__$Signal_Disposed
});
var tink_core__$Signal_Suspendable = function(activate,init) {
	this.handlers = new tink_core_CallbackList();
	var _gthis = this;
	this.activate = activate;
	this.init = init;
	this.handlers.ondrain = function() {
		var this1 = _gthis.subscription;
		if(this1 != null) {
			this1.cancel();
		}
	};
	this.handlers.onfill = function() {
		if(init != null) {
			var f = init;
			init = null;
			f(_gthis);
		}
		_gthis.subscription = activate(($_=_gthis.handlers,$bind($_,$_.invoke)));
	};
};
tink_core__$Signal_Suspendable.__name__ = "tink.core._Signal.Suspendable";
tink_core__$Signal_Suspendable.__interfaces__ = [tink_core_OwnedDisposable,tink_core__$Signal_SignalObject];
tink_core__$Signal_Suspendable.over = function(s,activate) {
	if(s.get_disposed()) {
		return tink_core_Signal.dead();
	} else {
		var ret = new tink_core__$Signal_Suspendable(activate);
		s.ondispose($bind(ret,ret.dispose));
		return ret;
	}
};
tink_core__$Signal_Suspendable.prototype = {
	handlers: null
	,activate: null
	,init: null
	,subscription: null
	,get_disposed: function() {
		return this.handlers.disposeHandlers == null;
	}
	,dispose: function() {
		this.handlers.dispose();
	}
	,ondispose: function(handler) {
		this.handlers.ondispose(handler);
	}
	,listen: function(cb) {
		var _this = this.handlers;
		if(_this.disposeHandlers == null) {
			return null;
		} else {
			var node = new tink_core__$Callback_ListCell(cb,_this);
			_this.cells.push(node);
			if(_this.used++ == 0) {
				var fn = _this.onfill;
				if(tink_core_Callback.depth < 500) {
					tink_core_Callback.depth++;
					fn();
					tink_core_Callback.depth--;
				} else {
					tink_core_Callback.defer(fn);
				}
			}
			return node;
		}
	}
	,__class__: tink_core__$Signal_Suspendable
	,__properties__: {get_disposed:"get_disposed"}
};
var tink_core_SignalTrigger = function() {
	this.handlers = new tink_core_CallbackList();
};
tink_core_SignalTrigger.__name__ = "tink.core.SignalTrigger";
tink_core_SignalTrigger.__interfaces__ = [tink_core_OwnedDisposable,tink_core__$Signal_SignalObject];
tink_core_SignalTrigger.prototype = {
	get_disposed: function() {
		return this.handlers.disposeHandlers == null;
	}
	,handlers: null
	,dispose: function() {
		this.handlers.dispose();
	}
	,ondispose: function(d) {
		this.handlers.ondispose(d);
	}
	,trigger: function(event) {
		this.handlers.invoke(event);
	}
	,getLength: function() {
		return this.handlers.used;
	}
	,listen: function(cb) {
		var _this = this.handlers;
		if(_this.disposeHandlers == null) {
			return null;
		} else {
			var node = new tink_core__$Callback_ListCell(cb,_this);
			_this.cells.push(node);
			if(_this.used++ == 0) {
				var fn = _this.onfill;
				if(tink_core_Callback.depth < 500) {
					tink_core_Callback.depth++;
					fn();
					tink_core_Callback.depth--;
				} else {
					tink_core_Callback.defer(fn);
				}
			}
			return node;
		}
	}
	,clear: function() {
		this.handlers.clear();
	}
	,asSignal: function() {
		return this;
	}
	,__class__: tink_core_SignalTrigger
	,__properties__: {get_disposed:"get_disposed"}
};
function $iterator(o) { if( o instanceof Array ) return function() { return new haxe_iterators_ArrayIterator(o); }; return typeof(o.iterator) == 'function' ? $bind(o,o.iterator) : o.iterator; }
function $getIterator(o) { if( o instanceof Array ) return new haxe_iterators_ArrayIterator(o); else return o.iterator(); }
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
String.prototype.__class__ = String;
String.__name__ = "String";
Array.__name__ = "Array";
var Int = { };
var Dynamic = { };
var Float = Number;
var Bool = Boolean;
var Class = { };
var Enum = { };
haxe_Resource.content = [];
haxe_ds_ObjectMap.count = 0;
js_Boot.__toStr = ({ }).toString;
auction_server_Handler._ = auction_server_HandlerLift;
auction_server_bid_BidSchema.counter = new auction_server_pack_Counter();
auction_server_saleable_Saleable.counter = new auction_server_pack_Counter();
auction_server_session_Session.counter = new auction_server_pack_Counter();
auction_server_session_SessionSchema.counter = new auction_server_pack_Counter();
auction_server_ws_Handler._ = auction_server_ws_HandlerLift;
haxe_crypto_Base64.CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
haxe_crypto_Base64.BYTES = haxe_io_Bytes.ofString(haxe_crypto_Base64.CHARS);
stx_nano_Couple._ = stx_nano_CoupleLift;
stx_nano_Err.UUID = "e30e1389-4a72-41fe-ba9f-d7ddf3d1e247";
stx_nano_FailCode.E_ResourceNotFound = "E_ResourceNotFound";
stx_nano_FailCode.E_IteratorExhaustedUnexpectedly = "E_IteratorExhaustedUnexpectedly";
stx_nano_FailCode.E_UnexpectedNullValueEncountered = "E_UnexpectedNullValueEncountered";
stx_nano_FailCode.E_OptionForcedError = "E_OptionForcedError";
stx_nano_FailCode.E_ValueNotReady = "E_ValueNotReady";
stx_nano_FailCode.E_AbstractMethod = "E_AbstractMethod";
stx_nano_FailCode.E_IndexOutOfBounds = "E_IndexOutOfBounds";
stx_nano_FailCode.E_UndefinedError = "E_UndefinedError";
stx_nano_Failure._ = stx_nano_FailureLift;
stx_nano_Iter._ = stx_nano_IterLift;
stx_nano_Pledge._ = stx_nano_PledgeLift;
stx_nano_Position.ZERO = stx_nano_Position.make(null,null,null,null);
stx_nano_Position._ = stx_nano_PositionLift;
stx_nano_Res._ = stx_nano_ResLift;
stx_nano_Slot._ = stx_nano_SlotLift;
stx_nano_Triple._ = stx_nano_TripleLift;
stx_pico_Either._ = stx_pico_EitherLift;
stx_pico_Option._ = stx_pico_OptionLift;
stx_pico_Outcome._ = stx_pico_OutcomeLift;
tink_core_Callback.depth = 0;
tink_core_Callback.MAX_DEPTH = 500;
tink_core_AlreadyDisposed.INST = new tink_core_AlreadyDisposed();
tink_core_Future.NOISE = new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(null));
tink_core_Future.NULL = tink_core_Future.NOISE;
tink_core_Future.NEVER = new tink_core__$Future_NeverFuture();
tink_core_Lazy.NOISE = new tink_core__$Lazy_LazyConst(null);
tink_core_Lazy.NULL = tink_core_Lazy.NOISE;
tink_core_Noise.Noise = null;
tink_core_ProgressValue.ZERO = (function($this) {
	var $r;
	var this1 = new tink_core_MPair(0,haxe_ds_Option.None);
	var this2 = this1;
	$r = this2;
	return $r;
}(this));
tink_core_Progress.INIT = tink_core_ProgressValue.ZERO;
tink_core_Promise.NOISE = new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(null)));
tink_core_Promise.NULL = tink_core_Promise.NOISE;
tink_core_Promise.NEVER = tink_core_Future.NEVER;
tink_core__$Signal_Disposed.INST = new tink_core__$Signal_Disposed();
Server.main();
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
